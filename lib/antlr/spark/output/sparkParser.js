// Generated from antlr/spark/grammar/spark.g4 by ANTLR 4.7.1
// jshint ignore: start
var antlr4 = require('antlr4/index');
var sparkListener = require('./sparkListener').sparkListener;
var sparkVisitor = require('./sparkVisitor').sparkVisitor;
var grammarFileName = "spark.g4";
var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u0100\u098f\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0003\u0002\u0003\u0002\u0003\u0002",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0003\b\u0003\b",
    "\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u00e7\n\b\u0003\b\u0003\b\u0003",
    "\b\u0005\b\u00ec\n\b\u0003\b\u0005\b\u00ef\n\b\u0003\b\u0003\b\u0003",
    "\b\u0005\b\u00f4\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b",
    "\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u0101\n\b\u0003\b\u0003",
    "\b\u0005\b\u0105\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b",
    "\u010c\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0007\b\u011a\n\b\f\b\u000e\b\u011d",
    "\u000b\b\u0003\b\u0005\b\u0120\n\b\u0003\b\u0005\b\u0123\n\b\u0003\b",
    "\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u012a\n\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0007\b\u013b\n\b\f\b\u000e\b\u013e\u000b",
    "\b\u0003\b\u0005\b\u0141\n\b\u0003\b\u0005\b\u0144\n\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0005\b\u014b\n\b\u0003\b\u0003\b\u0003\b",
    "\u0003\b\u0005\b\u0151\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u0157",
    "\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b",
    "\u0003\b\u0005\b\u0162\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u0182\n\b",
    "\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u018a\n\b\u0003",
    "\b\u0003\b\u0005\b\u018e\n\b\u0003\b\u0003\b\u0003\b\u0005\b\u0193\n",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u0199\n\b\u0003\b\u0003\b",
    "\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u01a1\n\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0005\b\u01a7\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b",
    "\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u01b4\n\b\u0003",
    "\b\u0006\b\u01b7\n\b\r\b\u000e\b\u01b8\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0005\b\u01c2\n\b\u0003\b\u0006\b\u01c5\n",
    "\b\r\b\u000e\b\u01c6\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b",
    "\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005",
    "\b\u01d7\n\b\u0003\b\u0003\b\u0003\b\u0007\b\u01dc\n\b\f\b\u000e\b\u01df",
    "\u000b\b\u0003\b\u0005\b\u01e2\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0005\b\u01ea\n\b\u0003\b\u0003\b\u0003\b\u0007\b\u01ef\n",
    "\b\f\b\u000e\b\u01f2\u000b\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b",
    "\u01f8\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u0207\n\b\u0003\b",
    "\u0003\b\u0005\b\u020b\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u0211",
    "\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u0217\n\b\u0003\b\u0005",
    "\b\u021a\n\b\u0003\b\u0005\b\u021d\n\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0005\b\u0223\n\b\u0003\b\u0003\b\u0005\b\u0227\n\b\u0003\b\u0003",
    "\b\u0005\b\u022b\n\b\u0003\b\u0003\b\u0003\b\u0005\b\u0230\n\b\u0003",
    "\b\u0003\b\u0005\b\u0234\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b",
    "\u0003\b\u0005\b\u023c\n\b\u0003\b\u0005\b\u023f\n\b\u0003\b\u0003\b",
    "\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u0248\n\b\u0003\b\u0003",
    "\b\u0003\b\u0005\b\u024d\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b",
    "\u0253\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u025a\n\b",
    "\u0003\b\u0005\b\u025d\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u0263",
    "\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0007\b",
    "\u026c\n\b\f\b\u000e\b\u026f\u000b\b\u0005\b\u0271\n\b\u0003\b\u0003",
    "\b\u0005\b\u0275\n\b\u0003\b\u0003\b\u0003\b\u0005\b\u027a\n\b\u0003",
    "\b\u0003\b\u0003\b\u0005\b\u027f\n\b\u0003\b\u0003\b\u0003\b\u0003\b",
    "\u0003\b\u0005\b\u0286\n\b\u0003\b\u0005\b\u0289\n\b\u0003\b\u0005\b",
    "\u028c\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u0293\n\b",
    "\u0003\b\u0003\b\u0003\b\u0005\b\u0298\n\b\u0003\b\u0003\b\u0003\b\u0005",
    "\b\u029d\n\b\u0003\b\u0005\b\u02a0\n\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0005\b\u02a9\n\b\u0003\b\u0003\b\u0003\b",
    "\u0003\b\u0003\b\u0003\b\u0005\b\u02b1\n\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0005\b\u02b7\n\b\u0003\b\u0003\b\u0005\b\u02bb\n\b\u0003\b\u0003",
    "\b\u0005\b\u02bf\n\b\u0003\b\u0003\b\u0005\b\u02c3\n\b\u0005\b\u02c5",
    "\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b",
    "\u02ce\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u02d4\n\b\u0003\b",
    "\u0003\b\u0003\b\u0005\b\u02d9\n\b\u0003\b\u0005\b\u02dc\n\b\u0003\b",
    "\u0003\b\u0005\b\u02e0\n\b\u0003\b\u0005\b\u02e3\n\b\u0003\b\u0003\b",
    "\u0003\b\u0003\b\u0003\b\u0003\b\u0007\b\u02eb\n\b\f\b\u000e\b\u02ee",
    "\u000b\b\u0005\b\u02f0\n\b\u0003\b\u0003\b\u0005\b\u02f4\n\b\u0003\b",
    "\u0003\b\u0003\b\u0003\b\u0005\b\u02fa\n\b\u0003\b\u0005\b\u02fd\n\b",
    "\u0003\b\u0005\b\u0300\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u0306",
    "\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u030e\n",
    "\b\u0003\b\u0003\b\u0003\b\u0005\b\u0313\n\b\u0003\b\u0003\b\u0003\b",
    "\u0003\b\u0005\b\u0319\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u031f",
    "\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0007\b",
    "\u0328\n\b\f\b\u000e\b\u032b\u000b\b\u0003\b\u0003\b\u0003\b\u0007\b",
    "\u0330\n\b\f\b\u000e\b\u0333\u000b\b\u0003\b\u0003\b\u0007\b\u0337\n",
    "\b\f\b\u000e\b\u033a\u000b\b\u0003\b\u0003\b\u0003\b\u0007\b\u033f\n",
    "\b\f\b\u000e\b\u0342\u000b\b\u0005\b\u0344\n\b\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0005\t\u034c\n\t\u0003\t\u0003\t\u0005\t",
    "\u0350\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u0357\n\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u03cb\n\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u03d3\n\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u03db\n\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u03e4\n\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0005\t\u03f0\n\t\u0003\n\u0003\n\u0005\n\u03f4\n\n\u0003\n\u0005",
    "\n\u03f7\n\n\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u03fd\n\n\u0003",
    "\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0005\u000b\u0407\n\u000b\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005",
    "\f\u0413\n\f\u0003\f\u0003\f\u0003\f\u0005\f\u0418\n\f\u0003\r\u0003",
    "\r\u0003\r\u0003\u000e\u0005\u000e\u041e\n\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0005\u000f\u042a\n\u000f\u0005\u000f\u042c",
    "\n\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u0431\n\u000f",
    "\u0003\u000f\u0003\u000f\u0005\u000f\u0435\n\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0005\u000f\u043a\n\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0005\u000f\u043f\n\u000f\u0003\u000f\u0005\u000f\u0442",
    "\n\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u0447\n\u000f",
    "\u0003\u000f\u0003\u000f\u0005\u000f\u044b\n\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0005\u000f\u0450\n\u000f\u0005\u000f\u0452\n\u000f",
    "\u0003\u0010\u0003\u0010\u0005\u0010\u0456\n\u0010\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u045d\n\u0011",
    "\f\u0011\u000e\u0011\u0460\u000b\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u0467\n\u0012\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u046e\n",
    "\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0007\u0014\u0473\n\u0014",
    "\f\u0014\u000e\u0014\u0476\u000b\u0014\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0007\u0015\u047c\n\u0015\f\u0015\u000e\u0015\u047f",
    "\u000b\u0015\u0003\u0016\u0003\u0016\u0005\u0016\u0483\n\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0007\u0018\u0490",
    "\n\u0018\f\u0018\u000e\u0018\u0493\u000b\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0019\u0003\u0019\u0005\u0019\u0499\n\u0019\u0003\u0019\u0005",
    "\u0019\u049c\n\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0007\u001a",
    "\u04a1\n\u001a\f\u001a\u000e\u001a\u04a4\u000b\u001a\u0003\u001a\u0005",
    "\u001a\u04a7\n\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0005\u001b\u04ad\n\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0007\u001c\u04b3\n\u001c\f\u001c\u000e\u001c\u04b6\u000b\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0007\u001d\u04be\n\u001d\f\u001d\u000e\u001d\u04c1\u000b\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0005\u001e\u04cb\n\u001e\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u04d2\n\u001f\u0003",
    " \u0003 \u0003 \u0003 \u0005 \u04d8\n \u0003!\u0003!\u0003!\u0003\"",
    "\u0005\"\u04de\n\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0006\"\u04e5",
    "\n\"\r\"\u000e\"\u04e6\u0005\"\u04e9\n\"\u0003#\u0003#\u0003#\u0003",
    "#\u0003#\u0007#\u04f0\n#\f#\u000e#\u04f3\u000b#\u0005#\u04f5\n#\u0003",
    "#\u0003#\u0003#\u0003#\u0003#\u0007#\u04fc\n#\f#\u000e#\u04ff\u000b",
    "#\u0005#\u0501\n#\u0003#\u0003#\u0003#\u0003#\u0003#\u0007#\u0508\n",
    "#\f#\u000e#\u050b\u000b#\u0005#\u050d\n#\u0003#\u0003#\u0003#\u0003",
    "#\u0003#\u0007#\u0514\n#\f#\u000e#\u0517\u000b#\u0005#\u0519\n#\u0003",
    "#\u0005#\u051c\n#\u0003#\u0003#\u0003#\u0005#\u0521\n#\u0005#\u0523",
    "\n#\u0003$\u0005$\u0526\n$\u0003$\u0003$\u0003$\u0003%\u0003%\u0003",
    "%\u0003%\u0003%\u0003%\u0003%\u0005%\u0532\n%\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0005%\u0539\n%\u0003%\u0003%\u0003%\u0003%\u0003%\u0005%\u0540",
    "\n%\u0003%\u0007%\u0543\n%\f%\u000e%\u0546\u000b%\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0003&\u0005&\u0550\n&\u0003\'\u0003\'",
    "\u0005\'\u0554\n\'\u0003\'\u0003\'\u0005\'\u0558\n\'\u0003(\u0003(\u0003",
    "(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0005(\u0564\n(\u0003",
    "(\u0005(\u0567\n(\u0003(\u0003(\u0005(\u056b\n(\u0003(\u0003(\u0003",
    "(\u0003(\u0003(\u0003(\u0003(\u0003(\u0005(\u0575\n(\u0003(\u0003(\u0005",
    "(\u0579\n(\u0005(\u057b\n(\u0003(\u0005(\u057e\n(\u0003(\u0003(\u0005",
    "(\u0582\n(\u0003(\u0005(\u0585\n(\u0003(\u0003(\u0005(\u0589\n(\u0003",
    "(\u0003(\u0007(\u058d\n(\f(\u000e(\u0590\u000b(\u0003(\u0005(\u0593",
    "\n(\u0003(\u0003(\u0005(\u0597\n(\u0003(\u0003(\u0003(\u0005(\u059c",
    "\n(\u0003(\u0005(\u059f\n(\u0005(\u05a1\n(\u0003(\u0007(\u05a4\n(\f",
    "(\u000e(\u05a7\u000b(\u0003(\u0003(\u0005(\u05ab\n(\u0003(\u0005(\u05ae",
    "\n(\u0003(\u0003(\u0005(\u05b2\n(\u0003(\u0005(\u05b5\n(\u0005(\u05b7",
    "\n(\u0003)\u0003)\u0003)\u0005)\u05bc\n)\u0003)\u0007)\u05bf\n)\f)\u000e",
    ")\u05c2\u000b)\u0003)\u0003)\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0007*\u05cc\n*\f*\u000e*\u05cf\u000b*\u0003*\u0003*\u0005*\u05d3",
    "\n*\u0003+\u0003+\u0003+\u0003+\u0007+\u05d9\n+\f+\u000e+\u05dc\u000b",
    "+\u0003+\u0007+\u05df\n+\f+\u000e+\u05e2\u000b+\u0003+\u0005+\u05e5",
    "\n+\u0003,\u0003,\u0003,\u0003,\u0003,\u0007,\u05ec\n,\f,\u000e,\u05ef",
    "\u000b,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0007,\u05fb\n,\f,\u000e,\u05fe\u000b,\u0003,\u0003,\u0005",
    ",\u0602\n,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0007",
    ",\u060c\n,\f,\u000e,\u060f\u000b,\u0003,\u0003,\u0005,\u0613\n,\u0003",
    "-\u0003-\u0003-\u0003-\u0007-\u0619\n-\f-\u000e-\u061c\u000b-\u0005",
    "-\u061e\n-\u0003-\u0003-\u0005-\u0622\n-\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0007.\u062e\n.\f.\u000e",
    ".\u0631\u000b.\u0003.\u0003.\u0003.\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0007/\u063b\n/\f/\u000e/\u063e\u000b/\u0003/\u0003/\u0005/\u0642",
    "\n/\u00030\u00030\u00050\u0646\n0\u00030\u00050\u0649\n0\u00031\u0003",
    "1\u00031\u00051\u064e\n1\u00031\u00031\u00031\u00031\u00031\u00071\u0655",
    "\n1\f1\u000e1\u0658\u000b1\u00051\u065a\n1\u00031\u00031\u00031\u0005",
    "1\u065f\n1\u00031\u00031\u00031\u00071\u0664\n1\f1\u000e1\u0667\u000b",
    "1\u00051\u0669\n1\u00032\u00032\u00033\u00033\u00073\u066f\n3\f3\u000e",
    "3\u0672\u000b3\u00034\u00034\u00034\u00034\u00054\u0678\n4\u00034\u0003",
    "4\u00034\u00034\u00034\u00054\u067f\n4\u00035\u00055\u0682\n5\u0003",
    "5\u00035\u00035\u00055\u0687\n5\u00035\u00035\u00035\u00035\u00055\u068d",
    "\n5\u00035\u00035\u00055\u0691\n5\u00035\u00055\u0694\n5\u00035\u0005",
    "5\u0697\n5\u00036\u00036\u00036\u00036\u00056\u069d\n6\u00037\u0003",
    "7\u00037\u00057\u06a2\n7\u00037\u00037\u00038\u00058\u06a7\n8\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00058\u06b9\n8\u00058\u06bb\n",
    "8\u00038\u00058\u06be\n8\u00039\u00039\u00039\u00039\u0003:\u0003:\u0003",
    ":\u0007:\u06c7\n:\f:\u000e:\u06ca\u000b:\u0003;\u0003;\u0003;\u0003",
    ";\u0007;\u06d0\n;\f;\u000e;\u06d3\u000b;\u0003;\u0003;\u0003<\u0003",
    "<\u0005<\u06d9\n<\u0003=\u0003=\u0003=\u0003=\u0007=\u06df\n=\f=\u000e",
    "=\u06e2\u000b=\u0003=\u0003=\u0003>\u0003>\u0003>\u0005>\u06e9\n>\u0003",
    "?\u0003?\u0005?\u06ed\n?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0005",
    "?\u06f5\n?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0005?\u06fd\n",
    "?\u0003?\u0003?\u0003?\u0003?\u0005?\u0703\n?\u0003@\u0003@\u0003@\u0003",
    "@\u0007@\u0709\n@\f@\u000e@\u070c\u000b@\u0003@\u0003@\u0003A\u0003",
    "A\u0003A\u0003A\u0003A\u0007A\u0715\nA\fA\u000eA\u0718\u000bA\u0005",
    "A\u071a\nA\u0003A\u0003A\u0003A\u0003B\u0005B\u0720\nB\u0003B\u0003",
    "B\u0005B\u0724\nB\u0005B\u0726\nB\u0003C\u0003C\u0003C\u0003C\u0003",
    "C\u0003C\u0003C\u0005C\u072f\nC\u0003C\u0003C\u0003C\u0003C\u0003C\u0003",
    "C\u0003C\u0003C\u0003C\u0003C\u0005C\u073b\nC\u0005C\u073d\nC\u0003",
    "C\u0003C\u0003C\u0003C\u0003C\u0005C\u0744\nC\u0003C\u0003C\u0003C\u0003",
    "C\u0003C\u0005C\u074b\nC\u0003C\u0003C\u0003C\u0003C\u0005C\u0751\n",
    "C\u0003C\u0003C\u0003C\u0003C\u0005C\u0757\nC\u0005C\u0759\nC\u0003",
    "D\u0003D\u0003D\u0005D\u075e\nD\u0003D\u0003D\u0003E\u0003E\u0003E\u0005",
    "E\u0765\nE\u0003E\u0003E\u0003F\u0003F\u0005F\u076b\nF\u0003F\u0003",
    "F\u0005F\u076f\nF\u0005F\u0771\nF\u0003G\u0003G\u0003G\u0007G\u0776",
    "\nG\fG\u000eG\u0779\u000bG\u0003H\u0003H\u0003I\u0003I\u0003I\u0003",
    "I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0005I\u0787\nI\u0005I\u0789",
    "\nI\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0007I\u0791\nI\fI\u000e",
    "I\u0794\u000bI\u0003J\u0005J\u0797\nJ\u0003J\u0003J\u0003J\u0003J\u0003",
    "J\u0003J\u0005J\u079f\nJ\u0003J\u0003J\u0003J\u0003J\u0003J\u0007J\u07a6",
    "\nJ\fJ\u000eJ\u07a9\u000bJ\u0003J\u0003J\u0003J\u0005J\u07ae\nJ\u0003",
    "J\u0003J\u0003J\u0003J\u0003J\u0003J\u0005J\u07b6\nJ\u0003J\u0003J\u0003",
    "J\u0003J\u0005J\u07bc\nJ\u0003J\u0003J\u0003J\u0005J\u07c1\nJ\u0003",
    "J\u0003J\u0003J\u0005J\u07c6\nJ\u0003K\u0003K\u0003K\u0003K\u0005K\u07cc",
    "\nK\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003",
    "K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0007",
    "K\u07e1\nK\fK\u000eK\u07e4\u000bK\u0003L\u0003L\u0003L\u0006L\u07e9",
    "\nL\rL\u000eL\u07ea\u0003L\u0003L\u0005L\u07ef\nL\u0003L\u0003L\u0003",
    "L\u0003L\u0003L\u0006L\u07f6\nL\rL\u000eL\u07f7\u0003L\u0003L\u0005",
    "L\u07fc\nL\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003",
    "L\u0003L\u0003L\u0003L\u0003L\u0003L\u0007L\u080c\nL\fL\u000eL\u080f",
    "\u000bL\u0005L\u0811\nL\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0005",
    "L\u0819\nL\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0005L\u0822",
    "\nL\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003",
    "L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0006",
    "L\u0837\nL\rL\u000eL\u0838\u0003L\u0003L\u0003L\u0003L\u0003L\u0003",
    "L\u0003L\u0003L\u0003L\u0005L\u0844\nL\u0003L\u0003L\u0003L\u0007L\u0849",
    "\nL\fL\u000eL\u084c\u000bL\u0005L\u084e\nL\u0003L\u0003L\u0003L\u0005",
    "L\u0853\nL\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003",
    "L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0006L\u0864\nL\rL\u000e",
    "L\u0865\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003",
    "L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0005L\u0877\nL\u0003L\u0003",
    "L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0007L\u0881\nL\fL\u000e",
    "L\u0884\u000bL\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0003",
    "M\u0006M\u088e\nM\rM\u000eM\u088f\u0005M\u0892\nM\u0003N\u0003N\u0003",
    "O\u0003O\u0003P\u0003P\u0003Q\u0003Q\u0003R\u0003R\u0007R\u089e\nR\f",
    "R\u000eR\u08a1\u000bR\u0003S\u0003S\u0003S\u0003S\u0005S\u08a7\nS\u0003",
    "T\u0005T\u08aa\nT\u0003T\u0003T\u0005T\u08ae\nT\u0003U\u0003U\u0003",
    "U\u0005U\u08b3\nU\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003",
    "V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0005V\u08c4\nV\u0003",
    "V\u0003V\u0005V\u08c8\nV\u0003V\u0003V\u0003V\u0003V\u0003V\u0007V\u08cf",
    "\nV\fV\u000eV\u08d2\u000bV\u0003V\u0005V\u08d5\nV\u0005V\u08d7\nV\u0003",
    "W\u0003W\u0003W\u0007W\u08dc\nW\fW\u000eW\u08df\u000bW\u0003X\u0003",
    "X\u0003X\u0003X\u0005X\u08e5\nX\u0003Y\u0003Y\u0003Y\u0007Y\u08ea\n",
    "Y\fY\u000eY\u08ed\u000bY\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0005Z\u08f4",
    "\nZ\u0003[\u0003[\u0003[\u0003[\u0003[\u0003\\\u0003\\\u0003\\\u0003",
    "\\\u0007\\\u08ff\n\\\f\\\u000e\\\u0902\u000b\\\u0003]\u0003]\u0003]",
    "\u0003]\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0007^\u090f",
    "\n^\f^\u000e^\u0912\u000b^\u0003^\u0003^\u0003^\u0003^\u0003^\u0007",
    "^\u0919\n^\f^\u000e^\u091c\u000b^\u0005^\u091e\n^\u0003^\u0003^\u0003",
    "^\u0003^\u0003^\u0007^\u0925\n^\f^\u000e^\u0928\u000b^\u0005^\u092a",
    "\n^\u0005^\u092c\n^\u0003^\u0005^\u092f\n^\u0003^\u0005^\u0932\n^\u0003",
    "_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003",
    "_\u0003_\u0003_\u0003_\u0003_\u0003_\u0005_\u0944\n_\u0003`\u0003`\u0003",
    "`\u0003`\u0003`\u0003`\u0003`\u0005`\u094d\n`\u0003a\u0003a\u0003a\u0007",
    "a\u0952\na\fa\u000ea\u0955\u000ba\u0003b\u0003b\u0003b\u0003b\u0003",
    "b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003",
    "b\u0005b\u0966\nb\u0003c\u0003c\u0003c\u0005c\u096b\nc\u0003d\u0003",
    "d\u0003e\u0005e\u0970\ne\u0003e\u0003e\u0005e\u0974\ne\u0003e\u0003",
    "e\u0005e\u0978\ne\u0003e\u0003e\u0005e\u097c\ne\u0003e\u0003e\u0005",
    "e\u0980\ne\u0003e\u0003e\u0005e\u0984\ne\u0003e\u0003e\u0005e\u0988",
    "\ne\u0003e\u0005e\u098b\ne\u0003f\u0003f\u0003f\u0007\u02ec\u0329\u0331",
    "\u0338\u0340\u0006H\u0090\u0094\u0096g\u0002\u0004\u0006\b\n\f\u000e",
    "\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@B",
    "DFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a",
    "\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2",
    "\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba",
    "\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u0002\u001d\u0003\u0002",
    "\u00ca\u00cb\u0004\u0002RRTT\u0005\u0002\\^\u00b0\u00b0\u00b6\u00b6",
    "\u0004\u0002\u000e\u000e!!\u0004\u0002..YY\u0004\u0002\u00b0\u00b0\u00b6",
    "\u00b6\u0004\u0002\u000f\u000f\u00d7\u00d7\u0003\u0002hk\u0003\u0002",
    "hj\u0003\u0002-.\u0004\u0002KKMM\u0004\u0002\u0011\u0011\u0013\u0013",
    "\u0003\u0002\u00f6\u00f7\u0003\u0002&\'\u0004\u0002\u008c\u008d\u0092",
    "\u0092\u0003\u0002\u008e\u0091\u0004\u0002\u008c\u008d\u0095\u0095\u0003",
    "\u0002~\u0080\u0003\u0002\u0084\u008b\u0003\u0002\u008c\u0096\u0003",
    "\u0002\u001f\"\u0003\u0002*+\u0003\u0002\u008c\u008d\u0004\u0002DD\u009d",
    "\u009d\u0004\u0002\u001b\u001b\u009b\u009b\u0003\u0002HI\n\u0002\r5",
    "88@gl\u0083\u0091\u0091\u0097\u00a0\u00a2\u00ee\u00f0\u00f1\u0002\u0b29",
    "\u0002\u00cc\u0003\u0002\u0002\u0002\u0004\u00cf\u0003\u0002\u0002\u0002",
    "\u0006\u00d2\u0003\u0002\u0002\u0002\b\u00d5\u0003\u0002\u0002\u0002",
    "\n\u00d8\u0003\u0002\u0002\u0002\f\u00db\u0003\u0002\u0002\u0002\u000e",
    "\u0343\u0003\u0002\u0002\u0002\u0010\u03ef\u0003\u0002\u0002\u0002\u0012",
    "\u03f1\u0003\u0002\u0002\u0002\u0014\u0400\u0003\u0002\u0002\u0002\u0016",
    "\u040c\u0003\u0002\u0002\u0002\u0018\u0419\u0003\u0002\u0002\u0002\u001a",
    "\u041d\u0003\u0002\u0002\u0002\u001c\u0451\u0003\u0002\u0002\u0002\u001e",
    "\u0453\u0003\u0002\u0002\u0002 \u0457\u0003\u0002\u0002\u0002\"\u0463",
    "\u0003\u0002\u0002\u0002$\u046d\u0003\u0002\u0002\u0002&\u046f\u0003",
    "\u0002\u0002\u0002(\u0477\u0003\u0002\u0002\u0002*\u0480\u0003\u0002",
    "\u0002\u0002,\u0488\u0003\u0002\u0002\u0002.\u048b\u0003\u0002\u0002",
    "\u00020\u0496\u0003\u0002\u0002\u00022\u04a6\u0003\u0002\u0002\u0002",
    "4\u04ac\u0003\u0002\u0002\u00026\u04ae\u0003\u0002\u0002\u00028\u04b9",
    "\u0003\u0002\u0002\u0002:\u04ca\u0003\u0002\u0002\u0002<\u04d1\u0003",
    "\u0002\u0002\u0002>\u04d3\u0003\u0002\u0002\u0002@\u04d9\u0003\u0002",
    "\u0002\u0002B\u04e8\u0003\u0002\u0002\u0002D\u04f4\u0003\u0002\u0002",
    "\u0002F\u0525\u0003\u0002\u0002\u0002H\u052a\u0003\u0002\u0002\u0002",
    "J\u054f\u0003\u0002\u0002\u0002L\u0551\u0003\u0002\u0002\u0002N\u05b6",
    "\u0003\u0002\u0002\u0002P\u05b8\u0003\u0002\u0002\u0002R\u05d2\u0003",
    "\u0002\u0002\u0002T\u05d4\u0003\u0002\u0002\u0002V\u0612\u0003\u0002",
    "\u0002\u0002X\u0621\u0003\u0002\u0002\u0002Z\u0623\u0003\u0002\u0002",
    "\u0002\\\u0641\u0003\u0002\u0002\u0002^\u0643\u0003\u0002\u0002\u0002",
    "`\u064a\u0003\u0002\u0002\u0002b\u066a\u0003\u0002\u0002\u0002d\u066c",
    "\u0003\u0002\u0002\u0002f\u067e\u0003\u0002\u0002\u0002h\u0696\u0003",
    "\u0002\u0002\u0002j\u069c\u0003\u0002\u0002\u0002l\u069e\u0003\u0002",
    "\u0002\u0002n\u06bd\u0003\u0002\u0002\u0002p\u06bf\u0003\u0002\u0002",
    "\u0002r\u06c3\u0003\u0002\u0002\u0002t\u06cb\u0003\u0002\u0002\u0002",
    "v\u06d6\u0003\u0002\u0002\u0002x\u06da\u0003\u0002\u0002\u0002z\u06e5",
    "\u0003\u0002\u0002\u0002|\u0702\u0003\u0002\u0002\u0002~\u0704\u0003",
    "\u0002\u0002\u0002\u0080\u070f\u0003\u0002\u0002\u0002\u0082\u0725\u0003",
    "\u0002\u0002\u0002\u0084\u0758\u0003\u0002\u0002\u0002\u0086\u075d\u0003",
    "\u0002\u0002\u0002\u0088\u0764\u0003\u0002\u0002\u0002\u008a\u0768\u0003",
    "\u0002\u0002\u0002\u008c\u0772\u0003\u0002\u0002\u0002\u008e\u077a\u0003",
    "\u0002\u0002\u0002\u0090\u0788\u0003\u0002\u0002\u0002\u0092\u07c5\u0003",
    "\u0002\u0002\u0002\u0094\u07cb\u0003\u0002\u0002\u0002\u0096\u0876\u0003",
    "\u0002\u0002\u0002\u0098\u0891\u0003\u0002\u0002\u0002\u009a\u0893\u0003",
    "\u0002\u0002\u0002\u009c\u0895\u0003\u0002\u0002\u0002\u009e\u0897\u0003",
    "\u0002\u0002\u0002\u00a0\u0899\u0003\u0002\u0002\u0002\u00a2\u089b\u0003",
    "\u0002\u0002\u0002\u00a4\u08a2\u0003\u0002\u0002\u0002\u00a6\u08ad\u0003",
    "\u0002\u0002\u0002\u00a8\u08b2\u0003\u0002\u0002\u0002\u00aa\u08d6\u0003",
    "\u0002\u0002\u0002\u00ac\u08d8\u0003\u0002\u0002\u0002\u00ae\u08e0\u0003",
    "\u0002\u0002\u0002\u00b0\u08e6\u0003\u0002\u0002\u0002\u00b2\u08ee\u0003",
    "\u0002\u0002\u0002\u00b4\u08f5\u0003\u0002\u0002\u0002\u00b6\u08fa\u0003",
    "\u0002\u0002\u0002\u00b8\u0903\u0003\u0002\u0002\u0002\u00ba\u0931\u0003",
    "\u0002\u0002\u0002\u00bc\u0943\u0003\u0002\u0002\u0002\u00be\u094c\u0003",
    "\u0002\u0002\u0002\u00c0\u094e\u0003\u0002\u0002\u0002\u00c2\u0965\u0003",
    "\u0002\u0002\u0002\u00c4\u096a\u0003\u0002\u0002\u0002\u00c6\u096c\u0003",
    "\u0002\u0002\u0002\u00c8\u098a\u0003\u0002\u0002\u0002\u00ca\u098c\u0003",
    "\u0002\u0002\u0002\u00cc\u00cd\u0005\u000e\b\u0002\u00cd\u00ce\u0007",
    "\u0002\u0002\u0003\u00ce\u0003\u0003\u0002\u0002\u0002\u00cf\u00d0\u0005",
    "\u008aF\u0002\u00d0\u00d1\u0007\u0002\u0002\u0003\u00d1\u0005\u0003",
    "\u0002\u0002\u0002\u00d2\u00d3\u0005\u0086D\u0002\u00d3\u00d4\u0007",
    "\u0002\u0002\u0003\u00d4\u0007\u0003\u0002\u0002\u0002\u00d5\u00d6\u0005",
    "\u0088E\u0002\u00d6\u00d7\u0007\u0002\u0002\u0003\u00d7\t\u0003\u0002",
    "\u0002\u0002\u00d8\u00d9\u0005\u00aaV\u0002\u00d9\u00da\u0007\u0002",
    "\u0002\u0003\u00da\u000b\u0003\u0002\u0002\u0002\u00db\u00dc\u0005\u00ac",
    "W\u0002\u00dc\u00dd\u0007\u0002\u0002\u0003\u00dd\r\u0003\u0002\u0002",
    "\u0002\u00de\u0344\u0005\u001a\u000e\u0002\u00df\u00e0\u0007d\u0002",
    "\u0002\u00e0\u0344\u0005\u00c2b\u0002\u00e1\u00e2\u0007Q\u0002\u0002",
    "\u00e2\u00e6\u0007\u00d1\u0002\u0002\u00e3\u00e4\u0007\u0081\u0002\u0002",
    "\u00e4\u00e5\u0007\"\u0002\u0002\u00e5\u00e7\u0007$\u0002\u0002\u00e6",
    "\u00e3\u0003\u0002\u0002\u0002\u00e6\u00e7\u0003\u0002\u0002\u0002\u00e7",
    "\u00e8\u0003\u0002\u0002\u0002\u00e8\u00eb\u0005\u00c2b\u0002\u00e9",
    "\u00ea\u0007t\u0002\u0002\u00ea\u00ec\u0007\u00f2\u0002\u0002\u00eb",
    "\u00e9\u0003\u0002\u0002\u0002\u00eb\u00ec\u0003\u0002\u0002\u0002\u00ec",
    "\u00ee\u0003\u0002\u0002\u0002\u00ed\u00ef\u0005\u0018\r\u0002\u00ee",
    "\u00ed\u0003\u0002\u0002\u0002\u00ee\u00ef\u0003\u0002\u0002\u0002\u00ef",
    "\u00f3\u0003\u0002\u0002\u0002\u00f0\u00f1\u0007O\u0002\u0002\u00f1",
    "\u00f2\u0007\u00bc\u0002\u0002\u00f2\u00f4\u0005.\u0018\u0002\u00f3",
    "\u00f0\u0003\u0002\u0002\u0002\u00f3\u00f4\u0003\u0002\u0002\u0002\u00f4",
    "\u0344\u0003\u0002\u0002\u0002\u00f5\u00f6\u0007o\u0002\u0002\u00f6",
    "\u00f7\u0007\u00d1\u0002\u0002\u00f7\u00f8\u0005\u00c2b\u0002\u00f8",
    "\u00f9\u0007u\u0002\u0002\u00f9\u00fa\u0007\u00bc\u0002\u0002\u00fa",
    "\u00fb\u0005.\u0018\u0002\u00fb\u0344\u0003\u0002\u0002\u0002\u00fc",
    "\u00fd\u0007g\u0002\u0002\u00fd\u0100\u0007\u00d1\u0002\u0002\u00fe",
    "\u00ff\u0007\u0081\u0002\u0002\u00ff\u0101\u0007$\u0002\u0002\u0100",
    "\u00fe\u0003\u0002\u0002\u0002\u0100\u0101\u0003\u0002\u0002\u0002\u0101",
    "\u0102\u0003\u0002\u0002\u0002\u0102\u0104\u0005\u00c2b\u0002\u0103",
    "\u0105\t\u0002\u0002\u0002\u0104\u0103\u0003\u0002\u0002\u0002\u0104",
    "\u0105\u0003\u0002\u0002\u0002\u0105\u0344\u0003\u0002\u0002\u0002\u0106",
    "\u010b\u0005\u0012\n\u0002\u0107\u0108\u0007\u0003\u0002\u0002\u0108",
    "\u0109\u0005\u00acW\u0002\u0109\u010a\u0007\u0004\u0002\u0002\u010a",
    "\u010c\u0003\u0002\u0002\u0002\u010b\u0107\u0003\u0002\u0002\u0002\u010b",
    "\u010c\u0003\u0002\u0002\u0002\u010c\u010d\u0003\u0002\u0002\u0002\u010d",
    "\u011b\u0005,\u0017\u0002\u010e\u010f\u0007\u00b9\u0002\u0002\u010f",
    "\u011a\u0005.\u0018\u0002\u0110\u0111\u0007\u00d9\u0002\u0002\u0111",
    "\u0112\u0007\u0016\u0002\u0002\u0112\u011a\u0005p9\u0002\u0113\u011a",
    "\u0005\u0014\u000b\u0002\u0114\u011a\u0005\u0018\r\u0002\u0115\u0116",
    "\u0007t\u0002\u0002\u0116\u011a\u0007\u00f2\u0002\u0002\u0117\u0118",
    "\u0007\u00bb\u0002\u0002\u0118\u011a\u0005.\u0018\u0002\u0119\u010e",
    "\u0003\u0002\u0002\u0002\u0119\u0110\u0003\u0002\u0002\u0002\u0119\u0113",
    "\u0003\u0002\u0002\u0002\u0119\u0114\u0003\u0002\u0002\u0002\u0119\u0115",
    "\u0003\u0002\u0002\u0002\u0119\u0117\u0003\u0002\u0002\u0002\u011a\u011d",
    "\u0003\u0002\u0002\u0002\u011b\u0119\u0003\u0002\u0002\u0002\u011b\u011c",
    "\u0003\u0002\u0002\u0002\u011c\u0122\u0003\u0002\u0002\u0002\u011d\u011b",
    "\u0003\u0002\u0002\u0002\u011e\u0120\u0007\u0010\u0002\u0002\u011f\u011e",
    "\u0003\u0002\u0002\u0002\u011f\u0120\u0003\u0002\u0002\u0002\u0120\u0121",
    "\u0003\u0002\u0002\u0002\u0121\u0123\u0005\u001a\u000e\u0002\u0122\u011f",
    "\u0003\u0002\u0002\u0002\u0122\u0123\u0003\u0002\u0002\u0002\u0123\u0344",
    "\u0003\u0002\u0002\u0002\u0124\u0129\u0005\u0012\n\u0002\u0125\u0126",
    "\u0007\u0003\u0002\u0002\u0126\u0127\u0005\u00acW\u0002\u0127\u0128",
    "\u0007\u0004\u0002\u0002\u0128\u012a\u0003\u0002\u0002\u0002\u0129\u0125",
    "\u0003\u0002\u0002\u0002\u0129\u012a\u0003\u0002\u0002\u0002\u012a\u013c",
    "\u0003\u0002\u0002\u0002\u012b\u012c\u0007t\u0002\u0002\u012c\u013b",
    "\u0007\u00f2\u0002\u0002\u012d\u012e\u0007\u00d9\u0002\u0002\u012e\u012f",
    "\u0007\u0016\u0002\u0002\u012f\u0130\u0007\u0003\u0002\u0002\u0130\u0131",
    "\u0005\u00acW\u0002\u0131\u0132\u0007\u0004\u0002\u0002\u0132\u013b",
    "\u0003\u0002\u0002\u0002\u0133\u013b\u0005\u0014\u000b\u0002\u0134\u013b",
    "\u0005\u0016\f\u0002\u0135\u013b\u0005\u0084C\u0002\u0136\u013b\u0005",
    ":\u001e\u0002\u0137\u013b\u0005\u0018\r\u0002\u0138\u0139\u0007\u00bb",
    "\u0002\u0002\u0139\u013b\u0005.\u0018\u0002\u013a\u012b\u0003\u0002",
    "\u0002\u0002\u013a\u012d\u0003\u0002\u0002\u0002\u013a\u0133\u0003\u0002",
    "\u0002\u0002\u013a\u0134\u0003\u0002\u0002\u0002\u013a\u0135\u0003\u0002",
    "\u0002\u0002\u013a\u0136\u0003\u0002\u0002\u0002\u013a\u0137\u0003\u0002",
    "\u0002\u0002\u013a\u0138\u0003\u0002\u0002\u0002\u013b\u013e\u0003\u0002",
    "\u0002\u0002\u013c\u013a\u0003\u0002\u0002\u0002\u013c\u013d\u0003\u0002",
    "\u0002\u0002\u013d\u0143\u0003\u0002\u0002\u0002\u013e\u013c\u0003\u0002",
    "\u0002\u0002\u013f\u0141\u0007\u0010\u0002\u0002\u0140\u013f\u0003\u0002",
    "\u0002\u0002\u0140\u0141\u0003\u0002\u0002\u0002\u0141\u0142\u0003\u0002",
    "\u0002\u0002\u0142\u0144\u0005\u001a\u000e\u0002\u0143\u0140\u0003\u0002",
    "\u0002\u0002\u0143\u0144\u0003\u0002\u0002\u0002\u0144\u0344\u0003\u0002",
    "\u0002\u0002\u0145\u0146\u0007Q\u0002\u0002\u0146\u014a\u0007R\u0002",
    "\u0002\u0147\u0148\u0007\u0081\u0002\u0002\u0148\u0149\u0007\"\u0002",
    "\u0002\u0149\u014b\u0007$\u0002\u0002\u014a\u0147\u0003\u0002\u0002",
    "\u0002\u014a\u014b\u0003\u0002\u0002\u0002\u014b\u014c\u0003\u0002\u0002",
    "\u0002\u014c\u014d\u0005\u0086D\u0002\u014d\u014e\u0007&\u0002\u0002",
    "\u014e\u0150\u0005\u0086D\u0002\u014f\u0151\u0005\u0018\r\u0002\u0150",
    "\u014f\u0003\u0002\u0002\u0002\u0150\u0151\u0003\u0002\u0002\u0002\u0151",
    "\u0344\u0003\u0002\u0002\u0002\u0152\u0153\u0007\u00d5\u0002\u0002\u0153",
    "\u0154\u0007R\u0002\u0002\u0154\u0156\u0005\u0086D\u0002\u0155\u0157",
    "\u0005 \u0011\u0002\u0156\u0155\u0003\u0002\u0002\u0002\u0156\u0157",
    "\u0003\u0002\u0002\u0002\u0157\u0158\u0003\u0002\u0002\u0002\u0158\u0159",
    "\u0007\u00d6\u0002\u0002\u0159\u0161\u0007\u00d8\u0002\u0002\u015a\u0162",
    "\u0005\u00c2b\u0002\u015b\u015c\u0007/\u0002\u0002\u015c\u015d\u0007",
    "b\u0002\u0002\u015d\u0162\u0005r:\u0002\u015e\u015f\u0007/\u0002\u0002",
    "\u015f\u0160\u0007\u0011\u0002\u0002\u0160\u0162\u0007b\u0002\u0002",
    "\u0161\u015a\u0003\u0002\u0002\u0002\u0161\u015b\u0003\u0002\u0002\u0002",
    "\u0161\u015e\u0003\u0002\u0002\u0002\u0161\u0162\u0003\u0002\u0002\u0002",
    "\u0162\u0344\u0003\u0002\u0002\u0002\u0163\u0164\u0007o\u0002\u0002",
    "\u0164\u0165\u0007R\u0002\u0002\u0165\u0166\u0005\u0086D\u0002\u0166",
    "\u0167\u0007\u000f\u0002\u0002\u0167\u0168\u0007b\u0002\u0002\u0168",
    "\u0169\u0007\u0003\u0002\u0002\u0169\u016a\u0005\u00acW\u0002\u016a",
    "\u016b\u0007\u0004\u0002\u0002\u016b\u0344\u0003\u0002\u0002\u0002\u016c",
    "\u016d\u0007o\u0002\u0002\u016d\u016e\t\u0003\u0002\u0002\u016e\u016f",
    "\u0005\u0086D\u0002\u016f\u0170\u0007p\u0002\u0002\u0170\u0171\u0007",
    "l\u0002\u0002\u0171\u0172\u0005\u0086D\u0002\u0172\u0344\u0003\u0002",
    "\u0002\u0002\u0173\u0174\u0007o\u0002\u0002\u0174\u0175\t\u0003\u0002",
    "\u0002\u0175\u0176\u0005\u0086D\u0002\u0176\u0177\u0007u\u0002\u0002",
    "\u0177\u0178\u0007\u00bb\u0002\u0002\u0178\u0179\u0005.\u0018\u0002",
    "\u0179\u0344\u0003\u0002\u0002\u0002\u017a\u017b\u0007o\u0002\u0002",
    "\u017b\u017c\t\u0003\u0002\u0002\u017c\u017d\u0005\u0086D\u0002\u017d",
    "\u017e\u0007\u00ba\u0002\u0002\u017e\u0181\u0007\u00bb\u0002\u0002\u017f",
    "\u0180\u0007\u0081\u0002\u0002\u0180\u0182\u0007$\u0002\u0002\u0181",
    "\u017f\u0003\u0002\u0002\u0002\u0181\u0182\u0003\u0002\u0002\u0002\u0182",
    "\u0183\u0003\u0002\u0002\u0002\u0183\u0184\u0005.\u0018\u0002\u0184",
    "\u0344\u0003\u0002\u0002\u0002\u0185\u0186\u0007o\u0002\u0002\u0186",
    "\u0187\u0007R\u0002\u0002\u0187\u0189\u0005\u0086D\u0002\u0188\u018a",
    "\u0005 \u0011\u0002\u0189\u0188\u0003\u0002\u0002\u0002\u0189\u018a",
    "\u0003\u0002\u0002\u0002\u018a\u018b\u0003\u0002\u0002\u0002\u018b\u018d",
    "\u0007\u00c9\u0002\u0002\u018c\u018e\u0007c\u0002\u0002\u018d\u018c",
    "\u0003\u0002\u0002\u0002\u018d\u018e\u0003\u0002\u0002\u0002\u018e\u018f",
    "\u0003\u0002\u0002\u0002\u018f\u0190\u0005\u00c2b\u0002\u0190\u0192",
    "\u0005\u00aeX\u0002\u0191\u0193\u0005\u00a8U\u0002\u0192\u0191\u0003",
    "\u0002\u0002\u0002\u0192\u0193\u0003\u0002\u0002\u0002\u0193\u0344\u0003",
    "\u0002\u0002\u0002\u0194\u0195\u0007o\u0002\u0002\u0195\u0196\u0007",
    "R\u0002\u0002\u0196\u0198\u0005\u0086D\u0002\u0197\u0199\u0005 \u0011",
    "\u0002\u0198\u0197\u0003\u0002\u0002\u0002\u0198\u0199\u0003\u0002\u0002",
    "\u0002\u0199\u019a\u0003\u0002\u0002\u0002\u019a\u019b\u0007u\u0002",
    "\u0002\u019b\u019c\u0007\u00a2\u0002\u0002\u019c\u01a0\u0007\u00f2\u0002",
    "\u0002\u019d\u019e\u0007O\u0002\u0002\u019e\u019f\u0007\u00a3\u0002",
    "\u0002\u019f\u01a1\u0005.\u0018\u0002\u01a0\u019d\u0003\u0002\u0002",
    "\u0002\u01a0\u01a1\u0003\u0002\u0002\u0002\u01a1\u0344\u0003\u0002\u0002",
    "\u0002\u01a2\u01a3\u0007o\u0002\u0002\u01a3\u01a4\u0007R\u0002\u0002",
    "\u01a4\u01a6\u0005\u0086D\u0002\u01a5\u01a7\u0005 \u0011\u0002\u01a6",
    "\u01a5\u0003\u0002\u0002\u0002\u01a6\u01a7\u0003\u0002\u0002\u0002\u01a7",
    "\u01a8\u0003\u0002\u0002\u0002\u01a8\u01a9\u0007u\u0002\u0002\u01a9",
    "\u01aa\u0007\u00a3\u0002\u0002\u01aa\u01ab\u0005.\u0018\u0002\u01ab",
    "\u0344\u0003\u0002\u0002\u0002\u01ac\u01ad\u0007o\u0002\u0002\u01ad",
    "\u01ae\u0007R\u0002\u0002\u01ae\u01af\u0005\u0086D\u0002\u01af\u01b3",
    "\u0007\u000f\u0002\u0002\u01b0\u01b1\u0007\u0081\u0002\u0002\u01b1\u01b2",
    "\u0007\"\u0002\u0002\u01b2\u01b4\u0007$\u0002\u0002\u01b3\u01b0\u0003",
    "\u0002\u0002\u0002\u01b3\u01b4\u0003\u0002\u0002\u0002\u01b4\u01b6\u0003",
    "\u0002\u0002\u0002\u01b5\u01b7\u0005\u001e\u0010\u0002\u01b6\u01b5\u0003",
    "\u0002\u0002\u0002\u01b7\u01b8\u0003\u0002\u0002\u0002\u01b8\u01b6\u0003",
    "\u0002\u0002\u0002\u01b8\u01b9\u0003\u0002\u0002\u0002\u01b9\u0344\u0003",
    "\u0002\u0002\u0002\u01ba\u01bb\u0007o\u0002\u0002\u01bb\u01bc\u0007",
    "T\u0002\u0002\u01bc\u01bd\u0005\u0086D\u0002\u01bd\u01c1\u0007\u000f",
    "\u0002\u0002\u01be\u01bf\u0007\u0081\u0002\u0002\u01bf\u01c0\u0007\"",
    "\u0002\u0002\u01c0\u01c2\u0007$\u0002\u0002\u01c1\u01be\u0003\u0002",
    "\u0002\u0002\u01c1\u01c2\u0003\u0002\u0002\u0002\u01c2\u01c4\u0003\u0002",
    "\u0002\u0002\u01c3\u01c5\u0005 \u0011\u0002\u01c4\u01c3\u0003\u0002",
    "\u0002\u0002\u01c5\u01c6\u0003\u0002\u0002\u0002\u01c6\u01c4\u0003\u0002",
    "\u0002\u0002\u01c6\u01c7\u0003\u0002\u0002\u0002\u01c7\u0344\u0003\u0002",
    "\u0002\u0002\u01c8\u01c9\u0007o\u0002\u0002\u01c9\u01ca\u0007R\u0002",
    "\u0002\u01ca\u01cb\u0005\u0086D\u0002\u01cb\u01cc\u0005 \u0011\u0002",
    "\u01cc\u01cd\u0007p\u0002\u0002\u01cd\u01ce\u0007l\u0002\u0002\u01ce",
    "\u01cf\u0005 \u0011\u0002\u01cf\u0344\u0003\u0002\u0002\u0002\u01d0",
    "\u01d1\u0007o\u0002\u0002\u01d1\u01d2\u0007R\u0002\u0002\u01d2\u01d3",
    "\u0005\u0086D\u0002\u01d3\u01d6\u0007g\u0002\u0002\u01d4\u01d5\u0007",
    "\u0081\u0002\u0002\u01d5\u01d7\u0007$\u0002\u0002\u01d6\u01d4\u0003",
    "\u0002\u0002\u0002\u01d6\u01d7\u0003\u0002\u0002\u0002\u01d7\u01d8\u0003",
    "\u0002\u0002\u0002\u01d8\u01dd\u0005 \u0011\u0002\u01d9\u01da\u0007",
    "\u0005\u0002\u0002\u01da\u01dc\u0005 \u0011\u0002\u01db\u01d9\u0003",
    "\u0002\u0002\u0002\u01dc\u01df\u0003\u0002\u0002\u0002\u01dd\u01db\u0003",
    "\u0002\u0002\u0002\u01dd\u01de\u0003\u0002\u0002\u0002\u01de\u01e1\u0003",
    "\u0002\u0002\u0002\u01df\u01dd\u0003\u0002\u0002\u0002\u01e0\u01e2\u0007",
    "\u00ce\u0002\u0002\u01e1\u01e0\u0003\u0002\u0002\u0002\u01e1\u01e2\u0003",
    "\u0002\u0002\u0002\u01e2\u0344\u0003\u0002\u0002\u0002\u01e3\u01e4\u0007",
    "o\u0002\u0002\u01e4\u01e5\u0007T\u0002\u0002\u01e5\u01e6\u0005\u0086",
    "D\u0002\u01e6\u01e9\u0007g\u0002\u0002\u01e7\u01e8\u0007\u0081\u0002",
    "\u0002\u01e8\u01ea\u0007$\u0002\u0002\u01e9\u01e7\u0003\u0002\u0002",
    "\u0002\u01e9\u01ea\u0003\u0002\u0002\u0002\u01ea\u01eb\u0003\u0002\u0002",
    "\u0002\u01eb\u01f0\u0005 \u0011\u0002\u01ec\u01ed\u0007\u0005\u0002",
    "\u0002\u01ed\u01ef\u0005 \u0011\u0002\u01ee\u01ec\u0003\u0002\u0002",
    "\u0002\u01ef\u01f2\u0003\u0002\u0002\u0002\u01f0\u01ee\u0003\u0002\u0002",
    "\u0002\u01f0\u01f1\u0003\u0002\u0002\u0002\u01f1\u0344\u0003\u0002\u0002",
    "\u0002\u01f2\u01f0\u0003\u0002\u0002\u0002\u01f3\u01f4\u0007o\u0002",
    "\u0002\u01f4\u01f5\u0007R\u0002\u0002\u01f5\u01f7\u0005\u0086D\u0002",
    "\u01f6\u01f8\u0005 \u0011\u0002\u01f7\u01f6\u0003\u0002\u0002\u0002",
    "\u01f7\u01f8\u0003\u0002\u0002\u0002\u01f8\u01f9\u0003\u0002\u0002\u0002",
    "\u01f9\u01fa\u0007u\u0002\u0002\u01fa\u01fb\u0005\u0018\r\u0002\u01fb",
    "\u0344\u0003\u0002\u0002\u0002\u01fc\u01fd\u0007o\u0002\u0002\u01fd",
    "\u01fe\u0007R\u0002\u0002\u01fe\u01ff\u0005\u0086D\u0002\u01ff\u0200",
    "\u0007\u00e2\u0002\u0002\u0200\u0201\u0007e\u0002\u0002\u0201\u0344",
    "\u0003\u0002\u0002\u0002\u0202\u0203\u0007g\u0002\u0002\u0203\u0206",
    "\u0007R\u0002\u0002\u0204\u0205\u0007\u0081\u0002\u0002\u0205\u0207",
    "\u0007$\u0002\u0002\u0206\u0204\u0003\u0002\u0002\u0002\u0206\u0207",
    "\u0003\u0002\u0002\u0002\u0207\u0208\u0003\u0002\u0002\u0002\u0208\u020a",
    "\u0005\u0086D\u0002\u0209\u020b\u0007\u00ce\u0002\u0002\u020a\u0209",
    "\u0003\u0002\u0002\u0002\u020a\u020b\u0003\u0002\u0002\u0002\u020b\u0344",
    "\u0003\u0002\u0002\u0002\u020c\u020d\u0007g\u0002\u0002\u020d\u0210",
    "\u0007T\u0002\u0002\u020e\u020f\u0007\u0081\u0002\u0002\u020f\u0211",
    "\u0007$\u0002\u0002\u0210\u020e\u0003\u0002\u0002\u0002\u0210\u0211",
    "\u0003\u0002\u0002\u0002\u0211\u0212\u0003\u0002\u0002\u0002\u0212\u0344",
    "\u0005\u0086D\u0002\u0213\u0216\u0007Q\u0002\u0002\u0214\u0215\u0007",
    "\u001f\u0002\u0002\u0215\u0217\u0007U\u0002\u0002\u0216\u0214\u0003",
    "\u0002\u0002\u0002\u0216\u0217\u0003\u0002\u0002\u0002\u0217\u021c\u0003",
    "\u0002\u0002\u0002\u0218\u021a\u0007\u00b7\u0002\u0002\u0219\u0218\u0003",
    "\u0002\u0002\u0002\u0219\u021a\u0003\u0002\u0002\u0002\u021a\u021b\u0003",
    "\u0002\u0002\u0002\u021b\u021d\u0007\u00b8\u0002\u0002\u021c\u0219\u0003",
    "\u0002\u0002\u0002\u021c\u021d\u0003\u0002\u0002\u0002\u021d\u021e\u0003",
    "\u0002\u0002\u0002\u021e\u0222\u0007T\u0002\u0002\u021f\u0220\u0007",
    "\u0081\u0002\u0002\u0220\u0221\u0007\"\u0002\u0002\u0221\u0223\u0007",
    "$\u0002\u0002\u0222\u021f\u0003\u0002\u0002\u0002\u0222\u0223\u0003",
    "\u0002\u0002\u0002\u0223\u0224\u0003\u0002\u0002\u0002\u0224\u0226\u0005",
    "\u0086D\u0002\u0225\u0227\u0005x=\u0002\u0226\u0225\u0003\u0002\u0002",
    "\u0002\u0226\u0227\u0003\u0002\u0002\u0002\u0227\u022a\u0003\u0002\u0002",
    "\u0002\u0228\u0229\u0007t\u0002\u0002\u0229\u022b\u0007\u00f2\u0002",
    "\u0002\u022a\u0228\u0003\u0002\u0002\u0002\u022a\u022b\u0003\u0002\u0002",
    "\u0002\u022b\u022f\u0003\u0002\u0002\u0002\u022c\u022d\u0007\u00d9\u0002",
    "\u0002\u022d\u022e\u0007?\u0002\u0002\u022e\u0230\u0005p9\u0002\u022f",
    "\u022c\u0003\u0002\u0002\u0002\u022f\u0230\u0003\u0002\u0002\u0002\u0230",
    "\u0233\u0003\u0002\u0002\u0002\u0231\u0232\u0007\u00bb\u0002\u0002\u0232",
    "\u0234\u0005.\u0018\u0002\u0233\u0231\u0003\u0002\u0002\u0002\u0233",
    "\u0234\u0003\u0002\u0002\u0002\u0234\u0235\u0003\u0002\u0002\u0002\u0235",
    "\u0236\u0007\u0010\u0002\u0002\u0236\u0237\u0005\u001a\u000e\u0002\u0237",
    "\u0344\u0003\u0002\u0002\u0002\u0238\u023b\u0007Q\u0002\u0002\u0239",
    "\u023a\u0007\u001f\u0002\u0002\u023a\u023c\u0007U\u0002\u0002\u023b",
    "\u0239\u0003\u0002\u0002\u0002\u023b\u023c\u0003\u0002\u0002\u0002\u023c",
    "\u023e\u0003\u0002\u0002\u0002\u023d\u023f\u0007\u00b7\u0002\u0002\u023e",
    "\u023d\u0003\u0002\u0002\u0002\u023e\u023f\u0003\u0002\u0002\u0002\u023f",
    "\u0240\u0003\u0002\u0002\u0002\u0240\u0241\u0007\u00b8\u0002\u0002\u0241",
    "\u0242\u0007T\u0002\u0002\u0242\u0247\u0005\u0086D\u0002\u0243\u0244",
    "\u0007\u0003\u0002\u0002\u0244\u0245\u0005\u00acW\u0002\u0245\u0246",
    "\u0007\u0004\u0002\u0002\u0246\u0248\u0003\u0002\u0002\u0002\u0247\u0243",
    "\u0003\u0002\u0002\u0002\u0247\u0248\u0003\u0002\u0002\u0002\u0248\u0249",
    "\u0003\u0002\u0002\u0002\u0249\u024c\u0005,\u0017\u0002\u024a\u024b",
    "\u0007\u00b9\u0002\u0002\u024b\u024d\u0005.\u0018\u0002\u024c\u024a",
    "\u0003\u0002\u0002\u0002\u024c\u024d\u0003\u0002\u0002\u0002\u024d\u0344",
    "\u0003\u0002\u0002\u0002\u024e\u024f\u0007o\u0002\u0002\u024f\u0250",
    "\u0007T\u0002\u0002\u0250\u0252\u0005\u0086D\u0002\u0251\u0253\u0007",
    "\u0010\u0002\u0002\u0252\u0251\u0003\u0002\u0002\u0002\u0252\u0253\u0003",
    "\u0002\u0002\u0002\u0253\u0254\u0003\u0002\u0002\u0002\u0254\u0255\u0005",
    "\u001a\u000e\u0002\u0255\u0344\u0003\u0002\u0002\u0002\u0256\u0259\u0007",
    "Q\u0002\u0002\u0257\u0258\u0007\u001f\u0002\u0002\u0258\u025a\u0007",
    "U\u0002\u0002\u0259\u0257\u0003\u0002\u0002\u0002\u0259\u025a\u0003",
    "\u0002\u0002\u0002\u025a\u025c\u0003\u0002\u0002\u0002\u025b\u025d\u0007",
    "\u00b8\u0002\u0002\u025c\u025b\u0003\u0002\u0002\u0002\u025c\u025d\u0003",
    "\u0002\u0002\u0002\u025d\u025e\u0003\u0002\u0002\u0002\u025e\u0262\u0007",
    "\u00af\u0002\u0002\u025f\u0260\u0007\u0081\u0002\u0002\u0260\u0261\u0007",
    "\"\u0002\u0002\u0261\u0263\u0007$\u0002\u0002\u0262\u025f\u0003\u0002",
    "\u0002\u0002\u0262\u0263\u0003\u0002\u0002\u0002\u0263\u0264\u0003\u0002",
    "\u0002\u0002\u0264\u0265\u0005\u00c0a\u0002\u0265\u0266\u0007\u0010",
    "\u0002\u0002\u0266\u0270\u0007\u00f2\u0002\u0002\u0267\u0268\u0007\u00a1",
    "\u0002\u0002\u0268\u026d\u0005@!\u0002\u0269\u026a\u0007\u0005\u0002",
    "\u0002\u026a\u026c\u0005@!\u0002\u026b\u0269\u0003\u0002\u0002\u0002",
    "\u026c\u026f\u0003\u0002\u0002\u0002\u026d\u026b\u0003\u0002\u0002\u0002",
    "\u026d\u026e\u0003\u0002\u0002\u0002\u026e\u0271\u0003\u0002\u0002\u0002",
    "\u026f\u026d\u0003\u0002\u0002\u0002\u0270\u0267\u0003\u0002\u0002\u0002",
    "\u0270\u0271\u0003\u0002\u0002\u0002\u0271\u0344\u0003\u0002\u0002\u0002",
    "\u0272\u0274\u0007g\u0002\u0002\u0273\u0275\u0007\u00b8\u0002\u0002",
    "\u0274\u0273\u0003\u0002\u0002\u0002\u0274\u0275\u0003\u0002\u0002\u0002",
    "\u0275\u0276\u0003\u0002\u0002\u0002\u0276\u0279\u0007\u00af\u0002\u0002",
    "\u0277\u0278\u0007\u0081\u0002\u0002\u0278\u027a\u0007$\u0002\u0002",
    "\u0279\u0277\u0003\u0002\u0002\u0002\u0279\u027a\u0003\u0002\u0002\u0002",
    "\u027a\u027b\u0003\u0002\u0002\u0002\u027b\u0344\u0005\u00c0a\u0002",
    "\u027c\u027e\u0007Z\u0002\u0002\u027d\u027f\t\u0004\u0002\u0002\u027e",
    "\u027d\u0003\u0002\u0002\u0002\u027e\u027f\u0003\u0002\u0002\u0002\u027f",
    "\u0280\u0003\u0002\u0002\u0002\u0280\u0344\u0005\u000e\b\u0002\u0281",
    "\u0282\u0007`\u0002\u0002\u0282\u0285\u0007a\u0002\u0002\u0283\u0284",
    "\t\u0005\u0002\u0002\u0284\u0286\u0005\u00c2b\u0002\u0285\u0283\u0003",
    "\u0002\u0002\u0002\u0285\u0286\u0003\u0002\u0002\u0002\u0286\u028b\u0003",
    "\u0002\u0002\u0002\u0287\u0289\u0007&\u0002\u0002\u0288\u0287\u0003",
    "\u0002\u0002\u0002\u0288\u0289\u0003\u0002\u0002\u0002\u0289\u028a\u0003",
    "\u0002\u0002\u0002\u028a\u028c\u0007\u00f2\u0002\u0002\u028b\u0288\u0003",
    "\u0002\u0002\u0002\u028b\u028c\u0003\u0002\u0002\u0002\u028c\u0344\u0003",
    "\u0002\u0002\u0002\u028d\u028e\u0007`\u0002\u0002\u028e\u028f\u0007",
    "R\u0002\u0002\u028f\u0292\u0007\u00b0\u0002\u0002\u0290\u0291\t\u0005",
    "\u0002\u0002\u0291\u0293\u0005\u00c2b\u0002\u0292\u0290\u0003\u0002",
    "\u0002\u0002\u0292\u0293\u0003\u0002\u0002\u0002\u0293\u0294\u0003\u0002",
    "\u0002\u0002\u0294\u0295\u0007&\u0002\u0002\u0295\u0297\u0007\u00f2",
    "\u0002\u0002\u0296\u0298\u0005 \u0011\u0002\u0297\u0296\u0003\u0002",
    "\u0002\u0002\u0297\u0298\u0003\u0002\u0002\u0002\u0298\u0344\u0003\u0002",
    "\u0002\u0002\u0299\u029a\u0007`\u0002\u0002\u029a\u029f\u0007\u00d2",
    "\u0002\u0002\u029b\u029d\u0007&\u0002\u0002\u029c\u029b\u0003\u0002",
    "\u0002\u0002\u029c\u029d\u0003\u0002\u0002\u0002\u029d\u029e\u0003\u0002",
    "\u0002\u0002\u029e\u02a0\u0007\u00f2\u0002\u0002\u029f\u029c\u0003\u0002",
    "\u0002\u0002\u029f\u02a0\u0003\u0002\u0002\u0002\u02a0\u0344\u0003\u0002",
    "\u0002\u0002\u02a1\u02a2\u0007`\u0002\u0002\u02a2\u02a3\u0007\u00bb",
    "\u0002\u0002\u02a3\u02a8\u0005\u0086D\u0002\u02a4\u02a5\u0007\u0003",
    "\u0002\u0002\u02a5\u02a6\u00052\u001a\u0002\u02a6\u02a7\u0007\u0004",
    "\u0002\u0002\u02a7\u02a9\u0003\u0002\u0002\u0002\u02a8\u02a4\u0003\u0002",
    "\u0002\u0002\u02a8\u02a9\u0003\u0002\u0002\u0002\u02a9\u0344\u0003\u0002",
    "\u0002\u0002\u02aa\u02ab\u0007`\u0002\u0002\u02ab\u02ac\u0007b\u0002",
    "\u0002\u02ac\u02ad\t\u0005\u0002\u0002\u02ad\u02b0\u0005\u0086D\u0002",
    "\u02ae\u02af\t\u0005\u0002\u0002\u02af\u02b1\u0005\u00c2b\u0002\u02b0",
    "\u02ae\u0003\u0002\u0002\u0002\u02b0\u02b1\u0003\u0002\u0002\u0002\u02b1",
    "\u0344\u0003\u0002\u0002\u0002\u02b2\u02b3\u0007`\u0002\u0002\u02b3",
    "\u02b4\u0007e\u0002\u0002\u02b4\u02b6\u0005\u0086D\u0002\u02b5\u02b7",
    "\u0005 \u0011\u0002\u02b6\u02b5\u0003\u0002\u0002\u0002\u02b6\u02b7",
    "\u0003\u0002\u0002\u0002\u02b7\u0344\u0003\u0002\u0002\u0002\u02b8\u02ba",
    "\u0007`\u0002\u0002\u02b9\u02bb\u0005\u00c2b\u0002\u02ba\u02b9\u0003",
    "\u0002\u0002\u0002\u02ba\u02bb\u0003\u0002\u0002\u0002\u02bb\u02bc\u0003",
    "\u0002\u0002\u0002\u02bc\u02c4\u0007f\u0002\u0002\u02bd\u02bf\u0007",
    "&\u0002\u0002\u02be\u02bd\u0003\u0002\u0002\u0002\u02be\u02bf\u0003",
    "\u0002\u0002\u0002\u02bf\u02c2\u0003\u0002\u0002\u0002\u02c0\u02c3\u0005",
    "\u00c0a\u0002\u02c1\u02c3\u0007\u00f2\u0002\u0002\u02c2\u02c0\u0003",
    "\u0002\u0002\u0002\u02c2\u02c1\u0003\u0002\u0002\u0002\u02c3\u02c5\u0003",
    "\u0002\u0002\u0002\u02c4\u02be\u0003\u0002\u0002\u0002\u02c4\u02c5\u0003",
    "\u0002\u0002\u0002\u02c5\u0344\u0003\u0002\u0002\u0002\u02c6\u02c7\u0007",
    "`\u0002\u0002\u02c7\u02c8\u0007Q\u0002\u0002\u02c8\u02c9\u0007R\u0002",
    "\u0002\u02c9\u0344\u0005\u0086D\u0002\u02ca\u02cb\t\u0006\u0002\u0002",
    "\u02cb\u02cd\u0007\u00af\u0002\u0002\u02cc\u02ce\u0007\u00b0\u0002\u0002",
    "\u02cd\u02cc\u0003\u0002\u0002\u0002\u02cd\u02ce\u0003\u0002\u0002\u0002",
    "\u02ce\u02cf\u0003\u0002\u0002\u0002\u02cf\u0344\u0005$\u0013\u0002",
    "\u02d0\u02d1\t\u0006\u0002\u0002\u02d1\u02d3\u0007\u00d1\u0002\u0002",
    "\u02d2\u02d4\u0007\u00b0\u0002\u0002\u02d3\u02d2\u0003\u0002\u0002\u0002",
    "\u02d3\u02d4\u0003\u0002\u0002\u0002\u02d4\u02d5\u0003\u0002\u0002\u0002",
    "\u02d5\u0344\u0005\u00c2b\u0002\u02d6\u02d8\t\u0006\u0002\u0002\u02d7",
    "\u02d9\u0007R\u0002\u0002\u02d8\u02d7\u0003\u0002\u0002\u0002\u02d8",
    "\u02d9\u0003\u0002\u0002\u0002\u02d9\u02db\u0003\u0002\u0002\u0002\u02da",
    "\u02dc\t\u0007\u0002\u0002\u02db\u02da\u0003\u0002\u0002\u0002\u02db",
    "\u02dc\u0003\u0002\u0002\u0002\u02dc\u02dd\u0003\u0002\u0002\u0002\u02dd",
    "\u02df\u0005\u0086D\u0002\u02de\u02e0\u0005 \u0011\u0002\u02df\u02de",
    "\u0003\u0002\u0002\u0002\u02df\u02e0\u0003\u0002\u0002\u0002\u02e0\u02e2",
    "\u0003\u0002\u0002\u0002\u02e1\u02e3\u0005&\u0014\u0002\u02e2\u02e1",
    "\u0003\u0002\u0002\u0002\u02e2\u02e3\u0003\u0002\u0002\u0002\u02e3\u0344",
    "\u0003\u0002\u0002\u0002\u02e4\u02e5\u0007\u00b1\u0002\u0002\u02e5\u02e6",
    "\u0007R\u0002\u0002\u02e6\u0344\u0005\u0086D\u0002\u02e7\u02ef\u0007",
    "\u00b1\u0002\u0002\u02e8\u02f0\u0007\u00f2\u0002\u0002\u02e9\u02eb\u000b",
    "\u0002\u0002\u0002\u02ea\u02e9\u0003\u0002\u0002\u0002\u02eb\u02ee\u0003",
    "\u0002\u0002\u0002\u02ec\u02ed\u0003\u0002\u0002\u0002\u02ec\u02ea\u0003",
    "\u0002\u0002\u0002\u02ed\u02f0\u0003\u0002\u0002\u0002\u02ee\u02ec\u0003",
    "\u0002\u0002\u0002\u02ef\u02e8\u0003\u0002\u0002\u0002\u02ef\u02ec\u0003",
    "\u0002\u0002\u0002\u02f0\u0344\u0003\u0002\u0002\u0002\u02f1\u02f3\u0007",
    "\u00b3\u0002\u0002\u02f2\u02f4\u0007\u00b5\u0002\u0002\u02f3\u02f2\u0003",
    "\u0002\u0002\u0002\u02f3\u02f4\u0003\u0002\u0002\u0002\u02f4\u02f5\u0003",
    "\u0002\u0002\u0002\u02f5\u02f6\u0007R\u0002\u0002\u02f6\u02f9\u0005",
    "\u0086D\u0002\u02f7\u02f8\u0007\u00b9\u0002\u0002\u02f8\u02fa\u0005",
    ".\u0018\u0002\u02f9\u02f7\u0003\u0002\u0002\u0002\u02f9\u02fa\u0003",
    "\u0002\u0002\u0002\u02fa\u02ff\u0003\u0002\u0002\u0002\u02fb\u02fd\u0007",
    "\u0010\u0002\u0002\u02fc\u02fb\u0003\u0002\u0002\u0002\u02fc\u02fd\u0003",
    "\u0002\u0002\u0002\u02fd\u02fe\u0003\u0002\u0002\u0002\u02fe\u0300\u0005",
    "\u001a\u000e\u0002\u02ff\u02fc\u0003\u0002\u0002\u0002\u02ff\u0300\u0003",
    "\u0002\u0002\u0002\u0300\u0344\u0003\u0002\u0002\u0002\u0301\u0302\u0007",
    "\u00b4\u0002\u0002\u0302\u0305\u0007R\u0002\u0002\u0303\u0304\u0007",
    "\u0081\u0002\u0002\u0304\u0306\u0007$\u0002\u0002\u0305\u0303\u0003",
    "\u0002\u0002\u0002\u0305\u0306\u0003\u0002\u0002\u0002\u0306\u0307\u0003",
    "\u0002\u0002\u0002\u0307\u0344\u0005\u0086D\u0002\u0308\u0309\u0007",
    "\u00b2\u0002\u0002\u0309\u0344\u0007\u00b3\u0002\u0002\u030a\u030b\u0007",
    "\u00e5\u0002\u0002\u030b\u030d\u0007w\u0002\u0002\u030c\u030e\u0007",
    "\u00f0\u0002\u0002\u030d\u030c\u0003\u0002\u0002\u0002\u030d\u030e\u0003",
    "\u0002\u0002\u0002\u030e\u030f\u0003\u0002\u0002\u0002\u030f\u0310\u0007",
    "\u00f1\u0002\u0002\u0310\u0312\u0007\u00f2\u0002\u0002\u0311\u0313\u0007",
    "\u009e\u0002\u0002\u0312\u0311\u0003\u0002\u0002\u0002\u0312\u0313\u0003",
    "\u0002\u0002\u0002\u0313\u0314\u0003\u0002\u0002\u0002\u0314\u0315\u0007",
    "X\u0002\u0002\u0315\u0316\u0007R\u0002\u0002\u0316\u0318\u0005\u0086",
    "D\u0002\u0317\u0319\u0005 \u0011\u0002\u0318\u0317\u0003\u0002\u0002",
    "\u0002\u0318\u0319\u0003\u0002\u0002\u0002\u0319\u0344\u0003\u0002\u0002",
    "\u0002\u031a\u031b\u0007\u00d4\u0002\u0002\u031b\u031c\u0007R\u0002",
    "\u0002\u031c\u031e\u0005\u0086D\u0002\u031d\u031f\u0005 \u0011\u0002",
    "\u031e\u031d\u0003\u0002\u0002\u0002\u031e\u031f\u0003\u0002\u0002\u0002",
    "\u031f\u0344\u0003\u0002\u0002\u0002\u0320\u0321\u0007\u00e0\u0002\u0002",
    "\u0321\u0322\u0007\u00e1\u0002\u0002\u0322\u0323\u0007R\u0002\u0002",
    "\u0323\u0344\u0005\u0086D\u0002\u0324\u0325\t\b\u0002\u0002\u0325\u0329",
    "\u0005\u00c2b\u0002\u0326\u0328\u000b\u0002\u0002\u0002\u0327\u0326",
    "\u0003\u0002\u0002\u0002\u0328\u032b\u0003\u0002\u0002\u0002\u0329\u032a",
    "\u0003\u0002\u0002\u0002\u0329\u0327\u0003\u0002\u0002\u0002\u032a\u0344",
    "\u0003\u0002\u0002\u0002\u032b\u0329\u0003\u0002\u0002\u0002\u032c\u032d",
    "\u0007u\u0002\u0002\u032d\u0331\u0007\u00e6\u0002\u0002\u032e\u0330",
    "\u000b\u0002\u0002\u0002\u032f\u032e\u0003\u0002\u0002\u0002\u0330\u0333",
    "\u0003\u0002\u0002\u0002\u0331\u0332\u0003\u0002\u0002\u0002\u0331\u032f",
    "\u0003\u0002\u0002\u0002\u0332\u0344\u0003\u0002\u0002\u0002\u0333\u0331",
    "\u0003\u0002\u0002\u0002\u0334\u0338\u0007u\u0002\u0002\u0335\u0337",
    "\u000b\u0002\u0002\u0002\u0336\u0335\u0003\u0002\u0002\u0002\u0337\u033a",
    "\u0003\u0002\u0002\u0002\u0338\u0339\u0003\u0002\u0002\u0002\u0338\u0336",
    "\u0003\u0002\u0002\u0002\u0339\u0344\u0003\u0002\u0002\u0002\u033a\u0338",
    "\u0003\u0002\u0002\u0002\u033b\u0344\u0007v\u0002\u0002\u033c\u0340",
    "\u0005\u0010\t\u0002\u033d\u033f\u000b\u0002\u0002\u0002\u033e\u033d",
    "\u0003\u0002\u0002\u0002\u033f\u0342\u0003\u0002\u0002\u0002\u0340\u0341",
    "\u0003\u0002\u0002\u0002\u0340\u033e\u0003\u0002\u0002\u0002\u0341\u0344",
    "\u0003\u0002\u0002\u0002\u0342\u0340\u0003\u0002\u0002\u0002\u0343\u00de",
    "\u0003\u0002\u0002\u0002\u0343\u00df\u0003\u0002\u0002\u0002\u0343\u00e1",
    "\u0003\u0002\u0002\u0002\u0343\u00f5\u0003\u0002\u0002\u0002\u0343\u00fc",
    "\u0003\u0002\u0002\u0002\u0343\u0106\u0003\u0002\u0002\u0002\u0343\u0124",
    "\u0003\u0002\u0002\u0002\u0343\u0145\u0003\u0002\u0002\u0002\u0343\u0152",
    "\u0003\u0002\u0002\u0002\u0343\u0163\u0003\u0002\u0002\u0002\u0343\u016c",
    "\u0003\u0002\u0002\u0002\u0343\u0173\u0003\u0002\u0002\u0002\u0343\u017a",
    "\u0003\u0002\u0002\u0002\u0343\u0185\u0003\u0002\u0002\u0002\u0343\u0194",
    "\u0003\u0002\u0002\u0002\u0343\u01a2\u0003\u0002\u0002\u0002\u0343\u01ac",
    "\u0003\u0002\u0002\u0002\u0343\u01ba\u0003\u0002\u0002\u0002\u0343\u01c8",
    "\u0003\u0002\u0002\u0002\u0343\u01d0\u0003\u0002\u0002\u0002\u0343\u01e3",
    "\u0003\u0002\u0002\u0002\u0343\u01f3\u0003\u0002\u0002\u0002\u0343\u01fc",
    "\u0003\u0002\u0002\u0002\u0343\u0202\u0003\u0002\u0002\u0002\u0343\u020c",
    "\u0003\u0002\u0002\u0002\u0343\u0213\u0003\u0002\u0002\u0002\u0343\u0238",
    "\u0003\u0002\u0002\u0002\u0343\u024e\u0003\u0002\u0002\u0002\u0343\u0256",
    "\u0003\u0002\u0002\u0002\u0343\u0272\u0003\u0002\u0002\u0002\u0343\u027c",
    "\u0003\u0002\u0002\u0002\u0343\u0281\u0003\u0002\u0002\u0002\u0343\u028d",
    "\u0003\u0002\u0002\u0002\u0343\u0299\u0003\u0002\u0002\u0002\u0343\u02a1",
    "\u0003\u0002\u0002\u0002\u0343\u02aa\u0003\u0002\u0002\u0002\u0343\u02b2",
    "\u0003\u0002\u0002\u0002\u0343\u02b8\u0003\u0002\u0002\u0002\u0343\u02c6",
    "\u0003\u0002\u0002\u0002\u0343\u02ca\u0003\u0002\u0002\u0002\u0343\u02d0",
    "\u0003\u0002\u0002\u0002\u0343\u02d6\u0003\u0002\u0002\u0002\u0343\u02e4",
    "\u0003\u0002\u0002\u0002\u0343\u02e7\u0003\u0002\u0002\u0002\u0343\u02f1",
    "\u0003\u0002\u0002\u0002\u0343\u0301\u0003\u0002\u0002\u0002\u0343\u0308",
    "\u0003\u0002\u0002\u0002\u0343\u030a\u0003\u0002\u0002\u0002\u0343\u031a",
    "\u0003\u0002\u0002\u0002\u0343\u0320\u0003\u0002\u0002\u0002\u0343\u0324",
    "\u0003\u0002\u0002\u0002\u0343\u032c\u0003\u0002\u0002\u0002\u0343\u0334",
    "\u0003\u0002\u0002\u0002\u0343\u033b\u0003\u0002\u0002\u0002\u0343\u033c",
    "\u0003\u0002\u0002\u0002\u0344\u000f\u0003\u0002\u0002\u0002\u0345\u0346",
    "\u0007Q\u0002\u0002\u0346\u03f0\u0007\u00e6\u0002\u0002\u0347\u0348",
    "\u0007g\u0002\u0002\u0348\u03f0\u0007\u00e6\u0002\u0002\u0349\u034b",
    "\u0007\u00dd\u0002\u0002\u034a\u034c\u0007\u00e6\u0002\u0002\u034b\u034a",
    "\u0003\u0002\u0002\u0002\u034b\u034c\u0003\u0002\u0002\u0002\u034c\u03f0",
    "\u0003\u0002\u0002\u0002\u034d\u034f\u0007\u00dc\u0002\u0002\u034e\u0350",
    "\u0007\u00e6\u0002\u0002\u034f\u034e\u0003\u0002\u0002\u0002\u034f\u0350",
    "\u0003\u0002\u0002\u0002\u0350\u03f0\u0003\u0002\u0002\u0002\u0351\u0352",
    "\u0007`\u0002\u0002\u0352\u03f0\u0007\u00dd\u0002\u0002\u0353\u0354",
    "\u0007`\u0002\u0002\u0354\u0356\u0007\u00e6\u0002\u0002\u0355\u0357",
    "\u0007\u00dd\u0002\u0002\u0356\u0355\u0003\u0002\u0002\u0002\u0356\u0357",
    "\u0003\u0002\u0002\u0002\u0357\u03f0\u0003\u0002\u0002\u0002\u0358\u0359",
    "\u0007`\u0002\u0002\u0359\u03f0\u0007\u00e9\u0002\u0002\u035a\u035b",
    "\u0007`\u0002\u0002\u035b\u03f0\u0007\u00e7\u0002\u0002\u035c\u035d",
    "\u0007`\u0002\u0002\u035d\u035e\u0007J\u0002\u0002\u035e\u03f0\u0007",
    "\u00e7\u0002\u0002\u035f\u0360\u0007\u00e3\u0002\u0002\u0360\u03f0\u0007",
    "R\u0002\u0002\u0361\u0362\u0007\u00e4\u0002\u0002\u0362\u03f0\u0007",
    "R\u0002\u0002\u0363\u0364\u0007`\u0002\u0002\u0364\u03f0\u0007\u00e8",
    "\u0002\u0002\u0365\u0366\u0007`\u0002\u0002\u0366\u0367\u0007Q\u0002",
    "\u0002\u0367\u03f0\u0007R\u0002\u0002\u0368\u0369\u0007`\u0002\u0002",
    "\u0369\u03f0\u0007\u00ea\u0002\u0002\u036a\u036b\u0007`\u0002\u0002",
    "\u036b\u03f0\u0007\u00ec\u0002\u0002\u036c\u036d\u0007`\u0002\u0002",
    "\u036d\u03f0\u0007\u00ed\u0002\u0002\u036e\u036f\u0007Q\u0002\u0002",
    "\u036f\u03f0\u0007\u00eb\u0002\u0002\u0370\u0371\u0007g\u0002\u0002",
    "\u0371\u03f0\u0007\u00eb\u0002\u0002\u0372\u0373\u0007o\u0002\u0002",
    "\u0373\u03f0\u0007\u00eb\u0002\u0002\u0374\u0375\u0007\u00de\u0002\u0002",
    "\u0375\u03f0\u0007R\u0002\u0002\u0376\u0377\u0007\u00de\u0002\u0002",
    "\u0377\u03f0\u0007\u00d1\u0002\u0002\u0378\u0379\u0007\u00df\u0002\u0002",
    "\u0379\u03f0\u0007R\u0002\u0002\u037a\u037b\u0007\u00df\u0002\u0002",
    "\u037b\u03f0\u0007\u00d1\u0002\u0002\u037c\u037d\u0007Q\u0002\u0002",
    "\u037d\u037e\u0007\u00b8\u0002\u0002\u037e\u03f0\u0007|\u0002\u0002",
    "\u037f\u0380\u0007g\u0002\u0002\u0380\u0381\u0007\u00b8\u0002\u0002",
    "\u0381\u03f0\u0007|\u0002\u0002\u0382\u0383\u0007o\u0002\u0002\u0383",
    "\u0384\u0007R\u0002\u0002\u0384\u0385\u0005\u0086D\u0002\u0385\u0386",
    "\u0007\"\u0002\u0002\u0386\u0387\u0007\u00cc\u0002\u0002\u0387\u03f0",
    "\u0003\u0002\u0002\u0002\u0388\u0389\u0007o\u0002\u0002\u0389\u038a",
    "\u0007R\u0002\u0002\u038a\u038b\u0005\u0086D\u0002\u038b\u038c\u0007",
    "\u00cc\u0002\u0002\u038c\u038d\u0007\u0016\u0002\u0002\u038d\u03f0\u0003",
    "\u0002\u0002\u0002\u038e\u038f\u0007o\u0002\u0002\u038f\u0390\u0007",
    "R\u0002\u0002\u0390\u0391\u0005\u0086D\u0002\u0391\u0392\u0007\"\u0002",
    "\u0002\u0392\u0393\u0007\u00cd\u0002\u0002\u0393\u03f0\u0003\u0002\u0002",
    "\u0002\u0394\u0395\u0007o\u0002\u0002\u0395\u0396\u0007R\u0002\u0002",
    "\u0396\u0397\u0005\u0086D\u0002\u0397\u0398\u0007\u00be\u0002\u0002",
    "\u0398\u0399\u0007\u0016\u0002\u0002\u0399\u03f0\u0003\u0002\u0002\u0002",
    "\u039a\u039b\u0007o\u0002\u0002\u039b\u039c\u0007R\u0002\u0002\u039c",
    "\u039d\u0005\u0086D\u0002\u039d\u039e\u0007\"\u0002\u0002\u039e\u039f",
    "\u0007\u00be\u0002\u0002\u039f\u03f0\u0003\u0002\u0002\u0002\u03a0\u03a1",
    "\u0007o\u0002\u0002\u03a1\u03a2\u0007R\u0002\u0002\u03a2\u03a3\u0005",
    "\u0086D\u0002\u03a3\u03a4\u0007\"\u0002\u0002\u03a4\u03a5\u0007\u00bf",
    "\u0002\u0002\u03a5\u03a6\u0007\u0010\u0002\u0002\u03a6\u03a7\u0007\u00c0",
    "\u0002\u0002\u03a7\u03f0\u0003\u0002\u0002\u0002\u03a8\u03a9\u0007o",
    "\u0002\u0002\u03a9\u03aa\u0007R\u0002\u0002\u03aa\u03ab\u0005\u0086",
    "D\u0002\u03ab\u03ac\u0007u\u0002\u0002\u03ac\u03ad\u0007\u00be\u0002",
    "\u0002\u03ad\u03ae\u0007\u00c1\u0002\u0002\u03ae\u03f0\u0003\u0002\u0002",
    "\u0002\u03af\u03b0\u0007o\u0002\u0002\u03b0\u03b1\u0007R\u0002\u0002",
    "\u03b1\u03b2\u0005\u0086D\u0002\u03b2\u03b3\u0007\u00c2\u0002\u0002",
    "\u03b3\u03b4\u0007D\u0002\u0002\u03b4\u03f0\u0003\u0002\u0002\u0002",
    "\u03b5\u03b6\u0007o\u0002\u0002\u03b6\u03b7\u0007R\u0002\u0002\u03b7",
    "\u03b8\u0005\u0086D\u0002\u03b8\u03b9\u0007\u00c3\u0002\u0002\u03b9",
    "\u03ba\u0007D\u0002\u0002\u03ba\u03f0\u0003\u0002\u0002\u0002\u03bb",
    "\u03bc\u0007o\u0002\u0002\u03bc\u03bd\u0007R\u0002\u0002\u03bd\u03be",
    "\u0005\u0086D\u0002\u03be\u03bf\u0007\u00c4\u0002\u0002\u03bf\u03c0",
    "\u0007D\u0002\u0002\u03c0\u03f0\u0003\u0002\u0002\u0002\u03c1\u03c2",
    "\u0007o\u0002\u0002\u03c2\u03c3\u0007R\u0002\u0002\u03c3\u03c4\u0005",
    "\u0086D\u0002\u03c4\u03c5\u0007\u00c6\u0002\u0002\u03c5\u03f0\u0003",
    "\u0002\u0002\u0002\u03c6\u03c7\u0007o\u0002\u0002\u03c7\u03c8\u0007",
    "R\u0002\u0002\u03c8\u03ca\u0005\u0086D\u0002\u03c9\u03cb\u0005 \u0011",
    "\u0002\u03ca\u03c9\u0003\u0002\u0002\u0002\u03ca\u03cb\u0003\u0002\u0002",
    "\u0002\u03cb\u03cc\u0003\u0002\u0002\u0002\u03cc\u03cd\u0007\u00c7\u0002",
    "\u0002\u03cd\u03f0\u0003\u0002\u0002\u0002\u03ce\u03cf\u0007o\u0002",
    "\u0002\u03cf\u03d0\u0007R\u0002\u0002\u03d0\u03d2\u0005\u0086D\u0002",
    "\u03d1\u03d3\u0005 \u0011\u0002\u03d2\u03d1\u0003\u0002\u0002\u0002",
    "\u03d2\u03d3\u0003\u0002\u0002\u0002\u03d3\u03d4\u0003\u0002\u0002\u0002",
    "\u03d4\u03d5\u0007\u00c8\u0002\u0002\u03d5\u03f0\u0003\u0002\u0002\u0002",
    "\u03d6\u03d7\u0007o\u0002\u0002\u03d7\u03d8\u0007R\u0002\u0002\u03d8",
    "\u03da\u0005\u0086D\u0002\u03d9\u03db\u0005 \u0011\u0002\u03da\u03d9",
    "\u0003\u0002\u0002\u0002\u03da\u03db\u0003\u0002\u0002\u0002\u03db\u03dc",
    "\u0003\u0002\u0002\u0002\u03dc\u03dd\u0007u\u0002\u0002\u03dd\u03de",
    "\u0007\u00c5\u0002\u0002\u03de\u03f0\u0003\u0002\u0002\u0002\u03df\u03e0",
    "\u0007o\u0002\u0002\u03e0\u03e1\u0007R\u0002\u0002\u03e1\u03e3\u0005",
    "\u0086D\u0002\u03e2\u03e4\u0005 \u0011\u0002\u03e3\u03e2\u0003\u0002",
    "\u0002\u0002\u03e3\u03e4\u0003\u0002\u0002\u0002\u03e4\u03e5\u0003\u0002",
    "\u0002\u0002\u03e5\u03e6\u0007U\u0002\u0002\u03e6\u03e7\u0007b\u0002",
    "\u0002\u03e7\u03f0\u0003\u0002\u0002\u0002\u03e8\u03e9\u0007x\u0002",
    "\u0002\u03e9\u03f0\u0007y\u0002\u0002\u03ea\u03f0\u0007z\u0002\u0002",
    "\u03eb\u03f0\u0007{\u0002\u0002\u03ec\u03f0\u0007\u00d3\u0002\u0002",
    "\u03ed\u03ee\u0007W\u0002\u0002\u03ee\u03f0\u0007\u000e\u0002\u0002",
    "\u03ef\u0345\u0003\u0002\u0002\u0002\u03ef\u0347\u0003\u0002\u0002\u0002",
    "\u03ef\u0349\u0003\u0002\u0002\u0002\u03ef\u034d\u0003\u0002\u0002\u0002",
    "\u03ef\u0351\u0003\u0002\u0002\u0002\u03ef\u0353\u0003\u0002\u0002\u0002",
    "\u03ef\u0358\u0003\u0002\u0002\u0002\u03ef\u035a\u0003\u0002\u0002\u0002",
    "\u03ef\u035c\u0003\u0002\u0002\u0002\u03ef\u035f\u0003\u0002\u0002\u0002",
    "\u03ef\u0361\u0003\u0002\u0002\u0002\u03ef\u0363\u0003\u0002\u0002\u0002",
    "\u03ef\u0365\u0003\u0002\u0002\u0002\u03ef\u0368\u0003\u0002\u0002\u0002",
    "\u03ef\u036a\u0003\u0002\u0002\u0002\u03ef\u036c\u0003\u0002\u0002\u0002",
    "\u03ef\u036e\u0003\u0002\u0002\u0002\u03ef\u0370\u0003\u0002\u0002\u0002",
    "\u03ef\u0372\u0003\u0002\u0002\u0002\u03ef\u0374\u0003\u0002\u0002\u0002",
    "\u03ef\u0376\u0003\u0002\u0002\u0002\u03ef\u0378\u0003\u0002\u0002\u0002",
    "\u03ef\u037a\u0003\u0002\u0002\u0002\u03ef\u037c\u0003\u0002\u0002\u0002",
    "\u03ef\u037f\u0003\u0002\u0002\u0002\u03ef\u0382\u0003\u0002\u0002\u0002",
    "\u03ef\u0388\u0003\u0002\u0002\u0002\u03ef\u038e\u0003\u0002\u0002\u0002",
    "\u03ef\u0394\u0003\u0002\u0002\u0002\u03ef\u039a\u0003\u0002\u0002\u0002",
    "\u03ef\u03a0\u0003\u0002\u0002\u0002\u03ef\u03a8\u0003\u0002\u0002\u0002",
    "\u03ef\u03af\u0003\u0002\u0002\u0002\u03ef\u03b5\u0003\u0002\u0002\u0002",
    "\u03ef\u03bb\u0003\u0002\u0002\u0002\u03ef\u03c1\u0003\u0002\u0002\u0002",
    "\u03ef\u03c6\u0003\u0002\u0002\u0002\u03ef\u03ce\u0003\u0002\u0002\u0002",
    "\u03ef\u03d6\u0003\u0002\u0002\u0002\u03ef\u03df\u0003\u0002\u0002\u0002",
    "\u03ef\u03e8\u0003\u0002\u0002\u0002\u03ef\u03ea\u0003\u0002\u0002\u0002",
    "\u03ef\u03eb\u0003\u0002\u0002\u0002\u03ef\u03ec\u0003\u0002\u0002\u0002",
    "\u03ef\u03ed\u0003\u0002\u0002\u0002\u03f0\u0011\u0003\u0002\u0002\u0002",
    "\u03f1\u03f3\u0007Q\u0002\u0002\u03f2\u03f4\u0007\u00b8\u0002\u0002",
    "\u03f3\u03f2\u0003\u0002\u0002\u0002\u03f3\u03f4\u0003\u0002\u0002\u0002",
    "\u03f4\u03f6\u0003\u0002\u0002\u0002\u03f5\u03f7\u0007\u00da\u0002\u0002",
    "\u03f6\u03f5\u0003\u0002\u0002\u0002\u03f6\u03f7\u0003\u0002\u0002\u0002",
    "\u03f7\u03f8\u0003\u0002\u0002\u0002\u03f8\u03fc\u0007R\u0002\u0002",
    "\u03f9\u03fa\u0007\u0081\u0002\u0002\u03fa\u03fb\u0007\"\u0002\u0002",
    "\u03fb\u03fd\u0007$\u0002\u0002\u03fc\u03f9\u0003\u0002\u0002\u0002",
    "\u03fc\u03fd\u0003\u0002\u0002\u0002\u03fd\u03fe\u0003\u0002\u0002\u0002",
    "\u03fe\u03ff\u0005\u0086D\u0002\u03ff\u0013\u0003\u0002\u0002\u0002",
    "\u0400\u0401\u0007\u00cc\u0002\u0002\u0401\u0402\u0007\u0016\u0002\u0002",
    "\u0402\u0406\u0005p9\u0002\u0403\u0404\u0007\u00cd\u0002\u0002\u0404",
    "\u0405\u0007\u0016\u0002\u0002\u0405\u0407\u0005t;\u0002\u0406\u0403",
    "\u0003\u0002\u0002\u0002\u0406\u0407\u0003\u0002\u0002\u0002\u0407\u0408",
    "\u0003\u0002\u0002\u0002\u0408\u0409\u0007X\u0002\u0002\u0409\u040a",
    "\u0007\u00f6\u0002\u0002\u040a\u040b\u0007\u00bd\u0002\u0002\u040b\u0015",
    "\u0003\u0002\u0002\u0002\u040c\u040d\u0007\u00be\u0002\u0002\u040d\u040e",
    "\u0007\u0016\u0002\u0002\u040e\u040f\u0005p9\u0002\u040f\u0412\u0007",
    "?\u0002\u0002\u0410\u0413\u00056\u001c\u0002\u0411\u0413\u00058\u001d",
    "\u0002\u0412\u0410\u0003\u0002\u0002\u0002\u0412\u0411\u0003\u0002\u0002",
    "\u0002\u0413\u0417\u0003\u0002\u0002\u0002\u0414\u0415\u0007\u00bf\u0002",
    "\u0002\u0415\u0416\u0007\u0010\u0002\u0002\u0416\u0418\u0007\u00c0\u0002",
    "\u0002\u0417\u0414\u0003\u0002\u0002\u0002\u0417\u0418\u0003\u0002\u0002",
    "\u0002\u0418\u0017\u0003\u0002\u0002\u0002\u0419\u041a\u0007\u00c1\u0002",
    "\u0002\u041a\u041b\u0007\u00f2\u0002\u0002\u041b\u0019\u0003\u0002\u0002",
    "\u0002\u041c\u041e\u0005(\u0015\u0002\u041d\u041c\u0003\u0002\u0002",
    "\u0002\u041d\u041e\u0003\u0002\u0002\u0002\u041e\u041f\u0003\u0002\u0002",
    "\u0002\u041f\u0420\u0005B\"\u0002\u0420\u001b\u0003\u0002\u0002\u0002",
    "\u0421\u0422\u0007V\u0002\u0002\u0422\u0423\u0007\u009e\u0002\u0002",
    "\u0423\u0424\u0007R\u0002\u0002\u0424\u042b\u0005\u0086D\u0002\u0425",
    "\u0429\u0005 \u0011\u0002\u0426\u0427\u0007\u0081\u0002\u0002\u0427",
    "\u0428\u0007\"\u0002\u0002\u0428\u042a\u0007$\u0002\u0002\u0429\u0426",
    "\u0003\u0002\u0002\u0002\u0429\u042a\u0003\u0002\u0002\u0002\u042a\u042c",
    "\u0003\u0002\u0002\u0002\u042b\u0425\u0003\u0002\u0002\u0002\u042b\u042c",
    "\u0003\u0002\u0002\u0002\u042c\u0452\u0003\u0002\u0002\u0002\u042d\u042e",
    "\u0007V\u0002\u0002\u042e\u0430\u0007X\u0002\u0002\u042f\u0431\u0007",
    "R\u0002\u0002\u0430\u042f\u0003\u0002\u0002\u0002\u0430\u0431\u0003",
    "\u0002\u0002\u0002\u0431\u0432\u0003\u0002\u0002\u0002\u0432\u0434\u0005",
    "\u0086D\u0002\u0433\u0435\u0005 \u0011\u0002\u0434\u0433\u0003\u0002",
    "\u0002\u0002\u0434\u0435\u0003\u0002\u0002\u0002\u0435\u0452\u0003\u0002",
    "\u0002\u0002\u0436\u0437\u0007V\u0002\u0002\u0437\u0439\u0007\u009e",
    "\u0002\u0002\u0438\u043a\u0007\u00f0\u0002\u0002\u0439\u0438\u0003\u0002",
    "\u0002\u0002\u0439\u043a\u0003\u0002\u0002\u0002\u043a\u043b\u0003\u0002",
    "\u0002\u0002\u043b\u043c\u0007S\u0002\u0002\u043c\u043e\u0007\u00f2",
    "\u0002\u0002\u043d\u043f\u0005\u0084C\u0002\u043e\u043d\u0003\u0002",
    "\u0002\u0002\u043e\u043f\u0003\u0002\u0002\u0002\u043f\u0441\u0003\u0002",
    "\u0002\u0002\u0440\u0442\u0005:\u001e\u0002\u0441\u0440\u0003\u0002",
    "\u0002\u0002\u0441\u0442\u0003\u0002\u0002\u0002\u0442\u0452\u0003\u0002",
    "\u0002\u0002\u0443\u0444\u0007V\u0002\u0002\u0444\u0446\u0007\u009e",
    "\u0002\u0002\u0445\u0447\u0007\u00f0\u0002\u0002\u0446\u0445\u0003\u0002",
    "\u0002\u0002\u0446\u0447\u0003\u0002\u0002\u0002\u0447\u0448\u0003\u0002",
    "\u0002\u0002\u0448\u044a\u0007S\u0002\u0002\u0449\u044b\u0007\u00f2",
    "\u0002\u0002\u044a\u0449\u0003\u0002\u0002\u0002\u044a\u044b\u0003\u0002",
    "\u0002\u0002\u044b\u044c\u0003\u0002\u0002\u0002\u044c\u044f\u0005,",
    "\u0017\u0002\u044d\u044e\u0007\u00b9\u0002\u0002\u044e\u0450\u0005.",
    "\u0018\u0002\u044f\u044d\u0003\u0002\u0002\u0002\u044f\u0450\u0003\u0002",
    "\u0002\u0002\u0450\u0452\u0003\u0002\u0002\u0002\u0451\u0421\u0003\u0002",
    "\u0002\u0002\u0451\u042d\u0003\u0002\u0002\u0002\u0451\u0436\u0003\u0002",
    "\u0002\u0002\u0451\u0443\u0003\u0002\u0002\u0002\u0452\u001d\u0003\u0002",
    "\u0002\u0002\u0453\u0455\u0005 \u0011\u0002\u0454\u0456\u0005\u0018",
    "\r\u0002\u0455\u0454\u0003\u0002\u0002\u0002\u0455\u0456\u0003\u0002",
    "\u0002\u0002\u0456\u001f\u0003\u0002\u0002\u0002\u0457\u0458\u0007D",
    "\u0002\u0002\u0458\u0459\u0007\u0003\u0002\u0002\u0459\u045e\u0005\"",
    "\u0012\u0002\u045a\u045b\u0007\u0005\u0002\u0002\u045b\u045d\u0005\"",
    "\u0012\u0002\u045c\u045a\u0003\u0002\u0002\u0002\u045d\u0460\u0003\u0002",
    "\u0002\u0002\u045e\u045c\u0003\u0002\u0002\u0002\u045e\u045f\u0003\u0002",
    "\u0002\u0002\u045f\u0461\u0003\u0002\u0002\u0002\u0460\u045e\u0003\u0002",
    "\u0002\u0002\u0461\u0462\u0007\u0004\u0002\u0002\u0462!\u0003\u0002",
    "\u0002\u0002\u0463\u0466\u0005\u00c2b\u0002\u0464\u0465\u0007\u0084",
    "\u0002\u0002\u0465\u0467\u0005\u0098M\u0002\u0466\u0464\u0003\u0002",
    "\u0002\u0002\u0466\u0467\u0003\u0002\u0002\u0002\u0467#\u0003\u0002",
    "\u0002\u0002\u0468\u046e\u0005\u00c0a\u0002\u0469\u046e\u0007\u00f2",
    "\u0002\u0002\u046a\u046e\u0005\u009aN\u0002\u046b\u046e\u0005\u009c",
    "O\u0002\u046c\u046e\u0005\u009eP\u0002\u046d\u0468\u0003\u0002\u0002",
    "\u0002\u046d\u0469\u0003\u0002\u0002\u0002\u046d\u046a\u0003\u0002\u0002",
    "\u0002\u046d\u046b\u0003\u0002\u0002\u0002\u046d\u046c\u0003\u0002\u0002",
    "\u0002\u046e%\u0003\u0002\u0002\u0002\u046f\u0474\u0005\u00c2b\u0002",
    "\u0470\u0471\u0007\u0006\u0002\u0002\u0471\u0473\u0005\u00c2b\u0002",
    "\u0472\u0470\u0003\u0002\u0002\u0002\u0473\u0476\u0003\u0002\u0002\u0002",
    "\u0474\u0472\u0003\u0002\u0002\u0002\u0474\u0475\u0003\u0002\u0002\u0002",
    "\u0475\'\u0003\u0002\u0002\u0002\u0476\u0474\u0003\u0002\u0002\u0002",
    "\u0477\u0478\u0007O\u0002\u0002\u0478\u047d\u0005*\u0016\u0002\u0479",
    "\u047a\u0007\u0005\u0002\u0002\u047a\u047c\u0005*\u0016\u0002\u047b",
    "\u0479\u0003\u0002\u0002\u0002\u047c\u047f\u0003\u0002\u0002\u0002\u047d",
    "\u047b\u0003\u0002\u0002\u0002\u047d\u047e\u0003\u0002\u0002\u0002\u047e",
    ")\u0003\u0002\u0002\u0002\u047f\u047d\u0003\u0002\u0002\u0002\u0480",
    "\u0482\u0005\u00c2b\u0002\u0481\u0483\u0007\u0010\u0002\u0002\u0482",
    "\u0481\u0003\u0002\u0002\u0002\u0482\u0483\u0003\u0002\u0002\u0002\u0483",
    "\u0484\u0003\u0002\u0002\u0002\u0484\u0485\u0007\u0003\u0002\u0002\u0485",
    "\u0486\u0005\u001a\u000e\u0002\u0486\u0487\u0007\u0004\u0002\u0002\u0487",
    "+\u0003\u0002\u0002\u0002\u0488\u0489\u0007\u00a1\u0002\u0002\u0489",
    "\u048a\u0005\u00c0a\u0002\u048a-\u0003\u0002\u0002\u0002\u048b\u048c",
    "\u0007\u0003\u0002\u0002\u048c\u0491\u00050\u0019\u0002\u048d\u048e",
    "\u0007\u0005\u0002\u0002\u048e\u0490\u00050\u0019\u0002\u048f\u048d",
    "\u0003\u0002\u0002\u0002\u0490\u0493\u0003\u0002\u0002\u0002\u0491\u048f",
    "\u0003\u0002\u0002\u0002\u0491\u0492\u0003\u0002\u0002\u0002\u0492\u0494",
    "\u0003\u0002\u0002\u0002\u0493\u0491\u0003\u0002\u0002\u0002\u0494\u0495",
    "\u0007\u0004\u0002\u0002\u0495/\u0003\u0002\u0002\u0002\u0496\u049b",
    "\u00052\u001a\u0002\u0497\u0499\u0007\u0084\u0002\u0002\u0498\u0497",
    "\u0003\u0002\u0002\u0002\u0498\u0499\u0003\u0002\u0002\u0002\u0499\u049a",
    "\u0003\u0002\u0002\u0002\u049a\u049c\u00054\u001b\u0002\u049b\u0498",
    "\u0003\u0002\u0002\u0002\u049b\u049c\u0003\u0002\u0002\u0002\u049c1",
    "\u0003\u0002\u0002\u0002\u049d\u04a2\u0005\u00c2b\u0002\u049e\u049f",
    "\u0007\u0006\u0002\u0002\u049f\u04a1\u0005\u00c2b\u0002\u04a0\u049e",
    "\u0003\u0002\u0002\u0002\u04a1\u04a4\u0003\u0002\u0002\u0002\u04a2\u04a0",
    "\u0003\u0002\u0002\u0002\u04a2\u04a3\u0003\u0002\u0002\u0002\u04a3\u04a7",
    "\u0003\u0002\u0002\u0002\u04a4\u04a2\u0003\u0002\u0002\u0002\u04a5\u04a7",
    "\u0007\u00f2\u0002\u0002\u04a6\u049d\u0003\u0002\u0002\u0002\u04a6\u04a5",
    "\u0003\u0002\u0002\u0002\u04a73\u0003\u0002\u0002\u0002\u04a8\u04ad",
    "\u0007\u00f6\u0002\u0002\u04a9\u04ad\u0007\u00f7\u0002\u0002\u04aa\u04ad",
    "\u0005\u00a0Q\u0002\u04ab\u04ad\u0007\u00f2\u0002\u0002\u04ac\u04a8",
    "\u0003\u0002\u0002\u0002\u04ac\u04a9\u0003\u0002\u0002\u0002\u04ac\u04aa",
    "\u0003\u0002\u0002\u0002\u04ac\u04ab\u0003\u0002\u0002\u0002\u04ad5",
    "\u0003\u0002\u0002\u0002\u04ae\u04af\u0007\u0003\u0002\u0002\u04af\u04b4",
    "\u0005\u0098M\u0002\u04b0\u04b1\u0007\u0005\u0002\u0002\u04b1\u04b3",
    "\u0005\u0098M\u0002\u04b2\u04b0\u0003\u0002\u0002\u0002\u04b3\u04b6",
    "\u0003\u0002\u0002\u0002\u04b4\u04b2\u0003\u0002\u0002\u0002\u04b4\u04b5",
    "\u0003\u0002\u0002\u0002\u04b5\u04b7\u0003\u0002\u0002\u0002\u04b6\u04b4",
    "\u0003\u0002\u0002\u0002\u04b7\u04b8\u0007\u0004\u0002\u0002\u04b87",
    "\u0003\u0002\u0002\u0002\u04b9\u04ba\u0007\u0003\u0002\u0002\u04ba\u04bf",
    "\u00056\u001c\u0002\u04bb\u04bc\u0007\u0005\u0002\u0002\u04bc\u04be",
    "\u00056\u001c\u0002\u04bd\u04bb\u0003\u0002\u0002\u0002\u04be\u04c1",
    "\u0003\u0002\u0002\u0002\u04bf\u04bd\u0003\u0002\u0002\u0002\u04bf\u04c0",
    "\u0003\u0002\u0002\u0002\u04c0\u04c2\u0003\u0002\u0002\u0002\u04c1\u04bf",
    "\u0003\u0002\u0002\u0002\u04c2\u04c3\u0007\u0004\u0002\u0002\u04c39",
    "\u0003\u0002\u0002\u0002\u04c4\u04c5\u0007\u00bf\u0002\u0002\u04c5\u04c6",
    "\u0007\u0010\u0002\u0002\u04c6\u04cb\u0005<\u001f\u0002\u04c7\u04c8",
    "\u0007\u00bf\u0002\u0002\u04c8\u04c9\u0007\u0016\u0002\u0002\u04c9\u04cb",
    "\u0005> \u0002\u04ca\u04c4\u0003\u0002\u0002\u0002\u04ca\u04c7\u0003",
    "\u0002\u0002\u0002\u04cb;\u0003\u0002\u0002\u0002\u04cc\u04cd\u0007",
    "\u00cf\u0002\u0002\u04cd\u04ce\u0007\u00f2\u0002\u0002\u04ce\u04cf\u0007",
    "\u00d0\u0002\u0002\u04cf\u04d2\u0007\u00f2\u0002\u0002\u04d0\u04d2\u0005",
    "\u00c2b\u0002\u04d1\u04cc\u0003\u0002\u0002\u0002\u04d1\u04d0\u0003",
    "\u0002\u0002\u0002\u04d2=\u0003\u0002\u0002\u0002\u04d3\u04d7\u0007",
    "\u00f2\u0002\u0002\u04d4\u04d5\u0007O\u0002\u0002\u04d5\u04d6\u0007",
    "\u00a3\u0002\u0002\u04d6\u04d8\u0005.\u0018\u0002\u04d7\u04d4\u0003",
    "\u0002\u0002\u0002\u04d7\u04d8\u0003\u0002\u0002\u0002\u04d8?\u0003",
    "\u0002\u0002\u0002\u04d9\u04da\u0005\u00c2b\u0002\u04da\u04db\u0007",
    "\u00f2\u0002\u0002\u04dbA\u0003\u0002\u0002\u0002\u04dc\u04de\u0005",
    "\u001c\u000f\u0002\u04dd\u04dc\u0003\u0002\u0002\u0002\u04dd\u04de\u0003",
    "\u0002\u0002\u0002\u04de\u04df\u0003\u0002\u0002\u0002\u04df\u04e0\u0005",
    "H%\u0002\u04e0\u04e1\u0005D#\u0002\u04e1\u04e9\u0003\u0002\u0002\u0002",
    "\u04e2\u04e4\u0005T+\u0002\u04e3\u04e5\u0005F$\u0002\u04e4\u04e3\u0003",
    "\u0002\u0002\u0002\u04e5\u04e6\u0003\u0002\u0002\u0002\u04e6\u04e4\u0003",
    "\u0002\u0002\u0002\u04e6\u04e7\u0003\u0002\u0002\u0002\u04e7\u04e9\u0003",
    "\u0002\u0002\u0002\u04e8\u04dd\u0003\u0002\u0002\u0002\u04e8\u04e2\u0003",
    "\u0002\u0002\u0002\u04e9C\u0003\u0002\u0002\u0002\u04ea\u04eb\u0007",
    "\u001b\u0002\u0002\u04eb\u04ec\u0007\u0016\u0002\u0002\u04ec\u04f1\u0005",
    "L\'\u0002\u04ed\u04ee\u0007\u0005\u0002\u0002\u04ee\u04f0\u0005L\'\u0002",
    "\u04ef\u04ed\u0003\u0002\u0002\u0002\u04f0\u04f3\u0003\u0002\u0002\u0002",
    "\u04f1\u04ef\u0003\u0002\u0002\u0002\u04f1\u04f2\u0003\u0002\u0002\u0002",
    "\u04f2\u04f5\u0003\u0002\u0002\u0002\u04f3\u04f1\u0003\u0002\u0002\u0002",
    "\u04f4\u04ea\u0003\u0002\u0002\u0002\u04f4\u04f5\u0003\u0002\u0002\u0002",
    "\u04f5\u0500\u0003\u0002\u0002\u0002\u04f6\u04f7\u0007\u009c\u0002\u0002",
    "\u04f7\u04f8\u0007\u0016\u0002\u0002\u04f8\u04fd\u0005\u008eH\u0002",
    "\u04f9\u04fa\u0007\u0005\u0002\u0002\u04fa\u04fc\u0005\u008eH\u0002",
    "\u04fb\u04f9\u0003\u0002\u0002\u0002\u04fc\u04ff\u0003\u0002\u0002\u0002",
    "\u04fd\u04fb\u0003\u0002\u0002\u0002\u04fd\u04fe\u0003\u0002\u0002\u0002",
    "\u04fe\u0501\u0003\u0002\u0002\u0002\u04ff\u04fd\u0003\u0002\u0002\u0002",
    "\u0500\u04f6\u0003\u0002\u0002\u0002\u0500\u0501\u0003\u0002\u0002\u0002",
    "\u0501\u050c\u0003\u0002\u0002\u0002\u0502\u0503\u0007\u009d\u0002\u0002",
    "\u0503\u0504\u0007\u0016\u0002\u0002\u0504\u0509\u0005\u008eH\u0002",
    "\u0505\u0506\u0007\u0005\u0002\u0002\u0506\u0508\u0005\u008eH\u0002",
    "\u0507\u0505\u0003\u0002\u0002\u0002\u0508\u050b\u0003\u0002\u0002\u0002",
    "\u0509\u0507\u0003\u0002\u0002\u0002\u0509\u050a\u0003\u0002\u0002\u0002",
    "\u050a\u050d\u0003\u0002\u0002\u0002\u050b\u0509\u0003\u0002\u0002\u0002",
    "\u050c\u0502\u0003\u0002\u0002\u0002\u050c\u050d\u0003\u0002\u0002\u0002",
    "\u050d\u0518\u0003\u0002\u0002\u0002\u050e\u050f\u0007\u009b\u0002\u0002",
    "\u050f\u0510\u0007\u0016\u0002\u0002\u0510\u0515\u0005L\'\u0002\u0511",
    "\u0512\u0007\u0005\u0002\u0002\u0512\u0514\u0005L\'\u0002\u0513\u0511",
    "\u0003\u0002\u0002\u0002\u0514\u0517\u0003\u0002\u0002\u0002\u0515\u0513",
    "\u0003\u0002\u0002\u0002\u0515\u0516\u0003\u0002\u0002\u0002\u0516\u0519",
    "\u0003\u0002\u0002\u0002\u0517\u0515\u0003\u0002\u0002\u0002\u0518\u050e",
    "\u0003\u0002\u0002\u0002\u0518\u0519\u0003\u0002\u0002\u0002\u0519\u051b",
    "\u0003\u0002\u0002\u0002\u051a\u051c\u0005\u00b6\\\u0002\u051b\u051a",
    "\u0003\u0002\u0002\u0002\u051b\u051c\u0003\u0002\u0002\u0002\u051c\u0522",
    "\u0003\u0002\u0002\u0002\u051d\u0520\u0007\u001d\u0002\u0002\u051e\u0521",
    "\u0007\u0011\u0002\u0002\u051f\u0521\u0005\u008eH\u0002\u0520\u051e",
    "\u0003\u0002\u0002\u0002\u0520\u051f\u0003\u0002\u0002\u0002\u0521\u0523",
    "\u0003\u0002\u0002\u0002\u0522\u051d\u0003\u0002\u0002\u0002\u0522\u0523",
    "\u0003\u0002\u0002\u0002\u0523E\u0003\u0002\u0002\u0002\u0524\u0526",
    "\u0005\u001c\u000f\u0002\u0525\u0524\u0003\u0002\u0002\u0002\u0525\u0526",
    "\u0003\u0002\u0002\u0002\u0526\u0527\u0003\u0002\u0002\u0002\u0527\u0528",
    "\u0005N(\u0002\u0528\u0529\u0005D#\u0002\u0529G\u0003\u0002\u0002\u0002",
    "\u052a\u052b\b%\u0001\u0002\u052b\u052c\u0005J&\u0002\u052c\u0544\u0003",
    "\u0002\u0002\u0002\u052d\u052e\f\u0005\u0002\u0002\u052e\u052f\u0006",
    "%\u0003\u0002\u052f\u0531\t\t\u0002\u0002\u0530\u0532\u0005b2\u0002",
    "\u0531\u0530\u0003\u0002\u0002\u0002\u0531\u0532\u0003\u0002\u0002\u0002",
    "\u0532\u0533\u0003\u0002\u0002\u0002\u0533\u0543\u0005H%\u0006\u0534",
    "\u0535\f\u0004\u0002\u0002\u0535\u0536\u0006%\u0005\u0002\u0536\u0538",
    "\u0007k\u0002\u0002\u0537\u0539\u0005b2\u0002\u0538\u0537\u0003\u0002",
    "\u0002\u0002\u0538\u0539\u0003\u0002\u0002\u0002\u0539\u053a\u0003\u0002",
    "\u0002\u0002\u053a\u0543\u0005H%\u0005\u053b\u053c\f\u0003\u0002\u0002",
    "\u053c\u053d\u0006%\u0007\u0002\u053d\u053f\t\n\u0002\u0002\u053e\u0540",
    "\u0005b2\u0002\u053f\u053e\u0003\u0002\u0002\u0002\u053f\u0540\u0003",
    "\u0002\u0002\u0002\u0540\u0541\u0003\u0002\u0002\u0002\u0541\u0543\u0005",
    "H%\u0004\u0542\u052d\u0003\u0002\u0002\u0002\u0542\u0534\u0003\u0002",
    "\u0002\u0002\u0542\u053b\u0003\u0002\u0002\u0002\u0543\u0546\u0003\u0002",
    "\u0002\u0002\u0544\u0542\u0003\u0002\u0002\u0002\u0544\u0545\u0003\u0002",
    "\u0002\u0002\u0545I\u0003\u0002\u0002\u0002\u0546\u0544\u0003\u0002",
    "\u0002\u0002\u0547\u0550\u0005N(\u0002\u0548\u0549\u0007R\u0002\u0002",
    "\u0549\u0550\u0005\u0086D\u0002\u054a\u0550\u0005~@\u0002\u054b\u054c",
    "\u0007\u0003\u0002\u0002\u054c\u054d\u0005B\"\u0002\u054d\u054e\u0007",
    "\u0004\u0002\u0002\u054e\u0550\u0003\u0002\u0002\u0002\u054f\u0547\u0003",
    "\u0002\u0002\u0002\u054f\u0548\u0003\u0002\u0002\u0002\u054f\u054a\u0003",
    "\u0002\u0002\u0002\u054f\u054b\u0003\u0002\u0002\u0002\u0550K\u0003",
    "\u0002\u0002\u0002\u0551\u0553\u0005\u008eH\u0002\u0552\u0554\t\u000b",
    "\u0002\u0002\u0553\u0552\u0003\u0002\u0002\u0002\u0553\u0554\u0003\u0002",
    "\u0002\u0002\u0554\u0557\u0003\u0002\u0002\u0002\u0555\u0556\u0007,",
    "\u0002\u0002\u0556\u0558\t\f\u0002\u0002\u0557\u0555\u0003\u0002\u0002",
    "\u0002\u0557\u0558\u0003\u0002\u0002\u0002\u0558M\u0003\u0002\u0002",
    "\u0002\u0559\u055a\u0007\r\u0002\u0002\u055a\u055b\u0007\u009f\u0002",
    "\u0002\u055b\u055c\u0007\u0003\u0002\u0002\u055c\u055d\u0005\u008cG",
    "\u0002\u055d\u055e\u0007\u0004\u0002\u0002\u055e\u0564\u0003\u0002\u0002",
    "\u0002\u055f\u0560\u0007r\u0002\u0002\u0560\u0564\u0005\u008cG\u0002",
    "\u0561\u0562\u0007\u00a0\u0002\u0002\u0562\u0564\u0005\u008cG\u0002",
    "\u0563\u0559\u0003\u0002\u0002\u0002\u0563\u055f\u0003\u0002\u0002\u0002",
    "\u0563\u0561\u0003\u0002\u0002\u0002\u0564\u0566\u0003\u0002\u0002\u0002",
    "\u0565\u0567\u0005\u0084C\u0002\u0566\u0565\u0003\u0002\u0002\u0002",
    "\u0566\u0567\u0003\u0002\u0002\u0002\u0567\u056a\u0003\u0002\u0002\u0002",
    "\u0568\u0569\u0007\u00a5\u0002\u0002\u0569\u056b\u0007\u00f2\u0002\u0002",
    "\u056a\u0568\u0003\u0002\u0002\u0002\u056a\u056b\u0003\u0002\u0002\u0002",
    "\u056b\u056c\u0003\u0002\u0002\u0002\u056c\u056d\u0007\u00a1\u0002\u0002",
    "\u056d\u057a\u0007\u00f2\u0002\u0002\u056e\u0578\u0007\u0010\u0002\u0002",
    "\u056f\u0579\u0005r:\u0002\u0570\u0579\u0005\u00acW\u0002\u0571\u0574",
    "\u0007\u0003\u0002\u0002\u0572\u0575\u0005r:\u0002\u0573\u0575\u0005",
    "\u00acW\u0002\u0574\u0572\u0003\u0002\u0002\u0002\u0574\u0573\u0003",
    "\u0002\u0002\u0002\u0575\u0576\u0003\u0002\u0002\u0002\u0576\u0577\u0007",
    "\u0004\u0002\u0002\u0577\u0579\u0003\u0002\u0002\u0002\u0578\u056f\u0003",
    "\u0002\u0002\u0002\u0578\u0570\u0003\u0002\u0002\u0002\u0578\u0571\u0003",
    "\u0002\u0002\u0002\u0579\u057b\u0003\u0002\u0002\u0002\u057a\u056e\u0003",
    "\u0002\u0002\u0002\u057a\u057b\u0003\u0002\u0002\u0002\u057b\u057d\u0003",
    "\u0002\u0002\u0002\u057c\u057e\u0005\u0084C\u0002\u057d\u057c\u0003",
    "\u0002\u0002\u0002\u057d\u057e\u0003\u0002\u0002\u0002\u057e\u0581\u0003",
    "\u0002\u0002\u0002\u057f\u0580\u0007\u00a4\u0002\u0002\u0580\u0582\u0007",
    "\u00f2\u0002\u0002\u0581\u057f\u0003\u0002\u0002\u0002\u0581\u0582\u0003",
    "\u0002\u0002\u0002\u0582\u0584\u0003\u0002\u0002\u0002\u0583\u0585\u0005",
    "T+\u0002\u0584\u0583\u0003\u0002\u0002\u0002\u0584\u0585\u0003\u0002",
    "\u0002\u0002\u0585\u0588\u0003\u0002\u0002\u0002\u0586\u0587\u0007\u0014",
    "\u0002\u0002\u0587\u0589\u0005\u0090I\u0002\u0588\u0586\u0003\u0002",
    "\u0002\u0002\u0588\u0589\u0003\u0002\u0002\u0002\u0589\u05b7\u0003\u0002",
    "\u0002\u0002\u058a\u058e\u0007\r\u0002\u0002\u058b\u058d\u0005P)\u0002",
    "\u058c\u058b\u0003\u0002\u0002\u0002\u058d\u0590\u0003\u0002\u0002\u0002",
    "\u058e\u058c\u0003\u0002\u0002\u0002\u058e\u058f\u0003\u0002\u0002\u0002",
    "\u058f\u0592\u0003\u0002\u0002\u0002\u0590\u058e\u0003\u0002\u0002\u0002",
    "\u0591\u0593\u0005b2\u0002\u0592\u0591\u0003\u0002\u0002\u0002\u0592",
    "\u0593\u0003\u0002\u0002\u0002\u0593\u0594\u0003\u0002\u0002\u0002\u0594",
    "\u0596\u0005\u008cG\u0002\u0595\u0597\u0005T+\u0002\u0596\u0595\u0003",
    "\u0002\u0002\u0002\u0596\u0597\u0003\u0002\u0002\u0002\u0597\u05a1\u0003",
    "\u0002\u0002\u0002\u0598\u059e\u0005T+\u0002\u0599\u059b\u0007\r\u0002",
    "\u0002\u059a\u059c\u0005b2\u0002\u059b\u059a\u0003\u0002\u0002\u0002",
    "\u059b\u059c\u0003\u0002\u0002\u0002\u059c\u059d\u0003\u0002\u0002\u0002",
    "\u059d\u059f\u0005\u008cG\u0002\u059e\u0599\u0003\u0002\u0002\u0002",
    "\u059e\u059f\u0003\u0002\u0002\u0002\u059f\u05a1\u0003\u0002\u0002\u0002",
    "\u05a0\u058a\u0003\u0002\u0002\u0002\u05a0\u0598\u0003\u0002\u0002\u0002",
    "\u05a1\u05a5\u0003\u0002\u0002\u0002\u05a2\u05a4\u0005`1\u0002\u05a3",
    "\u05a2\u0003\u0002\u0002\u0002\u05a4\u05a7\u0003\u0002\u0002\u0002\u05a5",
    "\u05a3\u0003\u0002\u0002\u0002\u05a5\u05a6\u0003\u0002\u0002\u0002\u05a6",
    "\u05aa\u0003\u0002\u0002\u0002\u05a7\u05a5\u0003\u0002\u0002\u0002\u05a8",
    "\u05a9\u0007\u0014\u0002\u0002\u05a9\u05ab\u0005\u0090I\u0002\u05aa",
    "\u05a8\u0003\u0002\u0002\u0002\u05aa\u05ab\u0003\u0002\u0002\u0002\u05ab",
    "\u05ad\u0003\u0002\u0002\u0002\u05ac\u05ae\u0005V,\u0002\u05ad\u05ac",
    "\u0003\u0002\u0002\u0002\u05ad\u05ae\u0003\u0002\u0002\u0002\u05ae\u05b1",
    "\u0003\u0002\u0002\u0002\u05af\u05b0\u0007\u001c\u0002\u0002\u05b0\u05b2",
    "\u0005\u0090I\u0002\u05b1\u05af\u0003\u0002\u0002\u0002\u05b1\u05b2",
    "\u0003\u0002\u0002\u0002\u05b2\u05b4\u0003\u0002\u0002\u0002\u05b3\u05b5",
    "\u0005\u00b6\\\u0002\u05b4\u05b3\u0003\u0002\u0002\u0002\u05b4\u05b5",
    "\u0003\u0002\u0002\u0002\u05b5\u05b7\u0003\u0002\u0002\u0002\u05b6\u0563",
    "\u0003\u0002\u0002\u0002\u05b6\u05a0\u0003\u0002\u0002\u0002\u05b7O",
    "\u0003\u0002\u0002\u0002\u05b8\u05b9\u0007\u0007\u0002\u0002\u05b9\u05c0",
    "\u0005R*\u0002\u05ba\u05bc\u0007\u0005\u0002\u0002\u05bb\u05ba\u0003",
    "\u0002\u0002\u0002\u05bb\u05bc\u0003\u0002\u0002\u0002\u05bc\u05bd\u0003",
    "\u0002\u0002\u0002\u05bd\u05bf\u0005R*\u0002\u05be\u05bb\u0003\u0002",
    "\u0002\u0002\u05bf\u05c2\u0003\u0002\u0002\u0002\u05c0\u05be\u0003\u0002",
    "\u0002\u0002\u05c0\u05c1\u0003\u0002\u0002\u0002\u05c1\u05c3\u0003\u0002",
    "\u0002\u0002\u05c2\u05c0\u0003\u0002\u0002\u0002\u05c3\u05c4\u0007\b",
    "\u0002\u0002\u05c4Q\u0003\u0002\u0002\u0002\u05c5\u05d3\u0005\u00c2",
    "b\u0002\u05c6\u05c7\u0005\u00c2b\u0002\u05c7\u05c8\u0007\u0003\u0002",
    "\u0002\u05c8\u05cd\u0005\u0096L\u0002\u05c9\u05ca\u0007\u0005\u0002",
    "\u0002\u05ca\u05cc\u0005\u0096L\u0002\u05cb\u05c9\u0003\u0002\u0002",
    "\u0002\u05cc\u05cf\u0003\u0002\u0002\u0002\u05cd\u05cb\u0003\u0002\u0002",
    "\u0002\u05cd\u05ce\u0003\u0002\u0002\u0002\u05ce\u05d0\u0003\u0002\u0002",
    "\u0002\u05cf\u05cd\u0003\u0002\u0002\u0002\u05d0\u05d1\u0007\u0004\u0002",
    "\u0002\u05d1\u05d3\u0003\u0002\u0002\u0002\u05d2\u05c5\u0003\u0002\u0002",
    "\u0002\u05d2\u05c6\u0003\u0002\u0002\u0002\u05d3S\u0003\u0002\u0002",
    "\u0002\u05d4\u05d5\u0007\u000e\u0002\u0002\u05d5\u05da\u0005d3\u0002",
    "\u05d6\u05d7\u0007\u0005\u0002\u0002\u05d7\u05d9\u0005d3\u0002\u05d8",
    "\u05d6\u0003\u0002\u0002\u0002\u05d9\u05dc\u0003\u0002\u0002\u0002\u05da",
    "\u05d8\u0003\u0002\u0002\u0002\u05da\u05db\u0003\u0002\u0002\u0002\u05db",
    "\u05e0\u0003\u0002\u0002\u0002\u05dc\u05da\u0003\u0002\u0002\u0002\u05dd",
    "\u05df\u0005`1\u0002\u05de\u05dd\u0003\u0002\u0002\u0002\u05df\u05e2",
    "\u0003\u0002\u0002\u0002\u05e0\u05de\u0003\u0002\u0002\u0002\u05e0\u05e1",
    "\u0003\u0002\u0002\u0002\u05e1\u05e4\u0003\u0002\u0002\u0002\u05e2\u05e0",
    "\u0003\u0002\u0002\u0002\u05e3\u05e5\u0005Z.\u0002\u05e4\u05e3\u0003",
    "\u0002\u0002\u0002\u05e4\u05e5\u0003\u0002\u0002\u0002\u05e5U\u0003",
    "\u0002\u0002\u0002\u05e6\u05e7\u0007\u0015\u0002\u0002\u05e7\u05e8\u0007",
    "\u0016\u0002\u0002\u05e8\u05ed\u0005\u008eH\u0002\u05e9\u05ea\u0007",
    "\u0005\u0002\u0002\u05ea\u05ec\u0005\u008eH\u0002\u05eb\u05e9\u0003",
    "\u0002\u0002\u0002\u05ec\u05ef\u0003\u0002\u0002\u0002\u05ed\u05eb\u0003",
    "\u0002\u0002\u0002\u05ed\u05ee\u0003\u0002\u0002\u0002\u05ee\u0601\u0003",
    "\u0002\u0002\u0002\u05ef\u05ed\u0003\u0002\u0002\u0002\u05f0\u05f1\u0007",
    "O\u0002\u0002\u05f1\u0602\u0007\u001a\u0002\u0002\u05f2\u05f3\u0007",
    "O\u0002\u0002\u05f3\u0602\u0007\u0019\u0002\u0002\u05f4\u05f5\u0007",
    "\u0017\u0002\u0002\u05f5\u05f6\u0007\u0018\u0002\u0002\u05f6\u05f7\u0007",
    "\u0003\u0002\u0002\u05f7\u05fc\u0005X-\u0002\u05f8\u05f9\u0007\u0005",
    "\u0002\u0002\u05f9\u05fb\u0005X-\u0002\u05fa\u05f8\u0003\u0002\u0002",
    "\u0002\u05fb\u05fe\u0003\u0002\u0002\u0002\u05fc\u05fa\u0003\u0002\u0002",
    "\u0002\u05fc\u05fd\u0003\u0002\u0002\u0002\u05fd\u05ff\u0003\u0002\u0002",
    "\u0002\u05fe\u05fc\u0003\u0002\u0002\u0002\u05ff\u0600\u0007\u0004\u0002",
    "\u0002\u0600\u0602\u0003\u0002\u0002\u0002\u0601\u05f0\u0003\u0002\u0002",
    "\u0002\u0601\u05f2\u0003\u0002\u0002\u0002\u0601\u05f4\u0003\u0002\u0002",
    "\u0002\u0601\u0602\u0003\u0002\u0002\u0002\u0602\u0613\u0003\u0002\u0002",
    "\u0002\u0603\u0604\u0007\u0015\u0002\u0002\u0604\u0605\u0007\u0016\u0002",
    "\u0002\u0605\u0606\u0007\u0017\u0002\u0002\u0606\u0607\u0007\u0018\u0002",
    "\u0002\u0607\u0608\u0007\u0003\u0002\u0002\u0608\u060d\u0005X-\u0002",
    "\u0609\u060a\u0007\u0005\u0002\u0002\u060a\u060c\u0005X-\u0002\u060b",
    "\u0609\u0003\u0002\u0002\u0002\u060c\u060f\u0003\u0002\u0002\u0002\u060d",
    "\u060b\u0003\u0002\u0002\u0002\u060d\u060e\u0003\u0002\u0002\u0002\u060e",
    "\u0610\u0003\u0002\u0002\u0002\u060f\u060d\u0003\u0002\u0002\u0002\u0610",
    "\u0611\u0007\u0004\u0002\u0002\u0611\u0613\u0003\u0002\u0002\u0002\u0612",
    "\u05e6\u0003\u0002\u0002\u0002\u0612\u0603\u0003\u0002\u0002\u0002\u0613",
    "W\u0003\u0002\u0002\u0002\u0614\u061d\u0007\u0003\u0002\u0002\u0615",
    "\u061a\u0005\u008eH\u0002\u0616\u0617\u0007\u0005\u0002\u0002\u0617",
    "\u0619\u0005\u008eH\u0002\u0618\u0616\u0003\u0002\u0002\u0002\u0619",
    "\u061c\u0003\u0002\u0002\u0002\u061a\u0618\u0003\u0002\u0002\u0002\u061a",
    "\u061b\u0003\u0002\u0002\u0002\u061b\u061e\u0003\u0002\u0002\u0002\u061c",
    "\u061a\u0003\u0002\u0002\u0002\u061d\u0615\u0003\u0002\u0002\u0002\u061d",
    "\u061e\u0003\u0002\u0002\u0002\u061e\u061f\u0003\u0002\u0002\u0002\u061f",
    "\u0622\u0007\u0004\u0002\u0002\u0620\u0622\u0005\u008eH\u0002\u0621",
    "\u0614\u0003\u0002\u0002\u0002\u0621\u0620\u0003\u0002\u0002\u0002\u0622",
    "Y\u0003\u0002\u0002\u0002\u0623\u0624\u0007@\u0002\u0002\u0624\u0625",
    "\u0007\u0003\u0002\u0002\u0625\u0626\u0005\u008cG\u0002\u0626\u0627",
    "\u0007/\u0002\u0002\u0627\u0628\u0005\\/\u0002\u0628\u0629\u0007!\u0002",
    "\u0002\u0629\u062a\u0007\u0003\u0002\u0002\u062a\u062f\u0005^0\u0002",
    "\u062b\u062c\u0007\u0005\u0002\u0002\u062c\u062e\u0005^0\u0002\u062d",
    "\u062b\u0003\u0002\u0002\u0002\u062e\u0631\u0003\u0002\u0002\u0002\u062f",
    "\u062d\u0003\u0002\u0002\u0002\u062f\u0630\u0003\u0002\u0002\u0002\u0630",
    "\u0632\u0003\u0002\u0002\u0002\u0631\u062f\u0003\u0002\u0002\u0002\u0632",
    "\u0633\u0007\u0004\u0002\u0002\u0633\u0634\u0007\u0004\u0002\u0002\u0634",
    "[\u0003\u0002\u0002\u0002\u0635\u0642\u0005\u00c2b\u0002\u0636\u0637",
    "\u0007\u0003\u0002\u0002\u0637\u063c\u0005\u00c2b\u0002\u0638\u0639",
    "\u0007\u0005\u0002\u0002\u0639\u063b\u0005\u00c2b\u0002\u063a\u0638",
    "\u0003\u0002\u0002\u0002\u063b\u063e\u0003\u0002\u0002\u0002\u063c\u063a",
    "\u0003\u0002\u0002\u0002\u063c\u063d\u0003\u0002\u0002\u0002\u063d\u063f",
    "\u0003\u0002\u0002\u0002\u063e\u063c\u0003\u0002\u0002\u0002\u063f\u0640",
    "\u0007\u0004\u0002\u0002\u0640\u0642\u0003\u0002\u0002\u0002\u0641\u0635",
    "\u0003\u0002\u0002\u0002\u0641\u0636\u0003\u0002\u0002\u0002\u0642]",
    "\u0003\u0002\u0002\u0002\u0643\u0648\u0005\u008eH\u0002\u0644\u0646",
    "\u0007\u0010\u0002\u0002\u0645\u0644\u0003\u0002\u0002\u0002\u0645\u0646",
    "\u0003\u0002\u0002\u0002\u0646\u0647\u0003\u0002\u0002\u0002\u0647\u0649",
    "\u0005\u00c2b\u0002\u0648\u0645\u0003\u0002\u0002\u0002\u0648\u0649",
    "\u0003\u0002\u0002\u0002\u0649_\u0003\u0002\u0002\u0002\u064a\u064b",
    "\u0007A\u0002\u0002\u064b\u064d\u0007T\u0002\u0002\u064c\u064e\u0007",
    "8\u0002\u0002\u064d\u064c\u0003\u0002\u0002\u0002\u064d\u064e\u0003",
    "\u0002\u0002\u0002\u064e\u064f\u0003\u0002\u0002\u0002\u064f\u0650\u0005",
    "\u00c0a\u0002\u0650\u0659\u0007\u0003\u0002\u0002\u0651\u0656\u0005",
    "\u008eH\u0002\u0652\u0653\u0007\u0005\u0002\u0002\u0653\u0655\u0005",
    "\u008eH\u0002\u0654\u0652\u0003\u0002\u0002\u0002\u0655\u0658\u0003",
    "\u0002\u0002\u0002\u0656\u0654\u0003\u0002\u0002\u0002\u0656\u0657\u0003",
    "\u0002\u0002\u0002\u0657\u065a\u0003\u0002\u0002\u0002\u0658\u0656\u0003",
    "\u0002\u0002\u0002\u0659\u0651\u0003\u0002\u0002\u0002\u0659\u065a\u0003",
    "\u0002\u0002\u0002\u065a\u065b\u0003\u0002\u0002\u0002\u065b\u065c\u0007",
    "\u0004\u0002\u0002\u065c\u0668\u0005\u00c2b\u0002\u065d\u065f\u0007",
    "\u0010\u0002\u0002\u065e\u065d\u0003\u0002\u0002\u0002\u065e\u065f\u0003",
    "\u0002\u0002\u0002\u065f\u0660\u0003\u0002\u0002\u0002\u0660\u0665\u0005",
    "\u00c2b\u0002\u0661\u0662\u0007\u0005\u0002\u0002\u0662\u0664\u0005",
    "\u00c2b\u0002\u0663\u0661\u0003\u0002\u0002\u0002\u0664\u0667\u0003",
    "\u0002\u0002\u0002\u0665\u0663\u0003\u0002\u0002\u0002\u0665\u0666\u0003",
    "\u0002\u0002\u0002\u0666\u0669\u0003\u0002\u0002\u0002\u0667\u0665\u0003",
    "\u0002\u0002\u0002\u0668\u065e\u0003\u0002\u0002\u0002\u0668\u0669\u0003",
    "\u0002\u0002\u0002\u0669a\u0003\u0002\u0002\u0002\u066a\u066b\t\r\u0002",
    "\u0002\u066bc\u0003\u0002\u0002\u0002\u066c\u0670\u0005|?\u0002\u066d",
    "\u066f\u0005f4\u0002\u066e\u066d\u0003\u0002\u0002\u0002\u066f\u0672",
    "\u0003\u0002\u0002\u0002\u0670\u066e\u0003\u0002\u0002\u0002\u0670\u0671",
    "\u0003\u0002\u0002\u0002\u0671e\u0003\u0002\u0002\u0002\u0672\u0670",
    "\u0003\u0002\u0002\u0002\u0673\u0674\u0005h5\u0002\u0674\u0675\u0007",
    "6\u0002\u0002\u0675\u0677\u0005|?\u0002\u0676\u0678\u0005j6\u0002\u0677",
    "\u0676\u0003\u0002\u0002\u0002\u0677\u0678\u0003\u0002\u0002\u0002\u0678",
    "\u067f\u0003\u0002\u0002\u0002\u0679\u067a\u0007>\u0002\u0002\u067a",
    "\u067b\u0005h5\u0002\u067b\u067c\u00076\u0002\u0002\u067c\u067d\u0005",
    "|?\u0002\u067d\u067f\u0003\u0002\u0002\u0002\u067e\u0673\u0003\u0002",
    "\u0002\u0002\u067e\u0679\u0003\u0002\u0002\u0002\u067fg\u0003\u0002",
    "\u0002\u0002\u0680\u0682\u00079\u0002\u0002\u0681\u0680\u0003\u0002",
    "\u0002\u0002\u0681\u0682\u0003\u0002\u0002\u0002\u0682\u0697\u0003\u0002",
    "\u0002\u0002\u0683\u0697\u00077\u0002\u0002\u0684\u0686\u0007:\u0002",
    "\u0002\u0685\u0687\u00078\u0002\u0002\u0686\u0685\u0003\u0002\u0002",
    "\u0002\u0686\u0687\u0003\u0002\u0002\u0002\u0687\u0697\u0003\u0002\u0002",
    "\u0002\u0688\u0689\u0007:\u0002\u0002\u0689\u0697\u0007;\u0002\u0002",
    "\u068a\u068c\u0007<\u0002\u0002\u068b\u068d\u00078\u0002\u0002\u068c",
    "\u068b\u0003\u0002\u0002\u0002\u068c\u068d\u0003\u0002\u0002\u0002\u068d",
    "\u0697\u0003\u0002\u0002\u0002\u068e\u0690\u0007=\u0002\u0002\u068f",
    "\u0691\u00078\u0002\u0002\u0690\u068f\u0003\u0002\u0002\u0002\u0690",
    "\u0691\u0003\u0002\u0002\u0002\u0691\u0697\u0003\u0002\u0002\u0002\u0692",
    "\u0694\u0007:\u0002\u0002\u0693\u0692\u0003\u0002\u0002\u0002\u0693",
    "\u0694\u0003\u0002\u0002\u0002\u0694\u0695\u0003\u0002\u0002\u0002\u0695",
    "\u0697\u0007\u00ef\u0002\u0002\u0696\u0681\u0003\u0002\u0002\u0002\u0696",
    "\u0683\u0003\u0002\u0002\u0002\u0696\u0684\u0003\u0002\u0002\u0002\u0696",
    "\u0688\u0003\u0002\u0002\u0002\u0696\u068a\u0003\u0002\u0002\u0002\u0696",
    "\u068e\u0003\u0002\u0002\u0002\u0696\u0693\u0003\u0002\u0002\u0002\u0697",
    "i\u0003\u0002\u0002\u0002\u0698\u0699\u0007?\u0002\u0002\u0699\u069d",
    "\u0005\u0090I\u0002\u069a\u069b\u0007\u00a1\u0002\u0002\u069b\u069d",
    "\u0005p9\u0002\u069c\u0698\u0003\u0002\u0002\u0002\u069c\u069a\u0003",
    "\u0002\u0002\u0002\u069dk\u0003\u0002\u0002\u0002\u069e\u069f\u0007",
    "m\u0002\u0002\u069f\u06a1\u0007\u0003\u0002\u0002\u06a0\u06a2\u0005",
    "n8\u0002\u06a1\u06a0\u0003\u0002\u0002\u0002\u06a1\u06a2\u0003\u0002",
    "\u0002\u0002\u06a2\u06a3\u0003\u0002\u0002\u0002\u06a3\u06a4\u0007\u0004",
    "\u0002\u0002\u06a4m\u0003\u0002\u0002\u0002\u06a5\u06a7\u0007\u008d",
    "\u0002\u0002\u06a6\u06a5\u0003\u0002\u0002\u0002\u06a6\u06a7\u0003\u0002",
    "\u0002\u0002\u06a7\u06a8\u0003\u0002\u0002\u0002\u06a8\u06a9\t\u000e",
    "\u0002\u0002\u06a9\u06be\u0007\u0097\u0002\u0002\u06aa\u06ab\u0005\u008e",
    "H\u0002\u06ab\u06ac\u0007F\u0002\u0002\u06ac\u06be\u0003\u0002\u0002",
    "\u0002\u06ad\u06ae\u0007\u0098\u0002\u0002\u06ae\u06af\u0007\u00f6\u0002",
    "\u0002\u06af\u06b0\u0007\u0099\u0002\u0002\u06b0\u06b1\u0007\u009a\u0002",
    "\u0002\u06b1\u06ba\u0007\u00f6\u0002\u0002\u06b2\u06b8\u0007?\u0002",
    "\u0002\u06b3\u06b9\u0005\u00c2b\u0002\u06b4\u06b5\u0005\u00c0a\u0002",
    "\u06b5\u06b6\u0007\u0003\u0002\u0002\u06b6\u06b7\u0007\u0004\u0002\u0002",
    "\u06b7\u06b9\u0003\u0002\u0002\u0002\u06b8\u06b3\u0003\u0002\u0002\u0002",
    "\u06b8\u06b4\u0003\u0002\u0002\u0002\u06b9\u06bb\u0003\u0002\u0002\u0002",
    "\u06ba\u06b2\u0003\u0002\u0002\u0002\u06ba\u06bb\u0003\u0002\u0002\u0002",
    "\u06bb\u06be\u0003\u0002\u0002\u0002\u06bc\u06be\u0005\u008eH\u0002",
    "\u06bd\u06a6\u0003\u0002\u0002\u0002\u06bd\u06aa\u0003\u0002\u0002\u0002",
    "\u06bd\u06ad\u0003\u0002\u0002\u0002\u06bd\u06bc\u0003\u0002\u0002\u0002",
    "\u06beo\u0003\u0002\u0002\u0002\u06bf\u06c0\u0007\u0003\u0002\u0002",
    "\u06c0\u06c1\u0005r:\u0002\u06c1\u06c2\u0007\u0004\u0002\u0002\u06c2",
    "q\u0003\u0002\u0002\u0002\u06c3\u06c8\u0005\u00c2b\u0002\u06c4\u06c5",
    "\u0007\u0005\u0002\u0002\u06c5\u06c7\u0005\u00c2b\u0002\u06c6\u06c4",
    "\u0003\u0002\u0002\u0002\u06c7\u06ca\u0003\u0002\u0002\u0002\u06c8\u06c6",
    "\u0003\u0002\u0002\u0002\u06c8\u06c9\u0003\u0002\u0002\u0002\u06c9s",
    "\u0003\u0002\u0002\u0002\u06ca\u06c8\u0003\u0002\u0002\u0002\u06cb\u06cc",
    "\u0007\u0003\u0002\u0002\u06cc\u06d1\u0005v<\u0002\u06cd\u06ce\u0007",
    "\u0005\u0002\u0002\u06ce\u06d0\u0005v<\u0002\u06cf\u06cd\u0003\u0002",
    "\u0002\u0002\u06d0\u06d3\u0003\u0002\u0002\u0002\u06d1\u06cf\u0003\u0002",
    "\u0002\u0002\u06d1\u06d2\u0003\u0002\u0002\u0002\u06d2\u06d4\u0003\u0002",
    "\u0002\u0002\u06d3\u06d1\u0003\u0002\u0002\u0002\u06d4\u06d5\u0007\u0004",
    "\u0002\u0002\u06d5u\u0003\u0002\u0002\u0002\u06d6\u06d8\u0005\u00c2",
    "b\u0002\u06d7\u06d9\t\u000b\u0002\u0002\u06d8\u06d7\u0003\u0002\u0002",
    "\u0002\u06d8\u06d9\u0003\u0002\u0002\u0002\u06d9w\u0003\u0002\u0002",
    "\u0002\u06da\u06db\u0007\u0003\u0002\u0002\u06db\u06e0\u0005z>\u0002",
    "\u06dc\u06dd\u0007\u0005\u0002\u0002\u06dd\u06df\u0005z>\u0002\u06de",
    "\u06dc\u0003\u0002\u0002\u0002\u06df\u06e2\u0003\u0002\u0002\u0002\u06e0",
    "\u06de\u0003\u0002\u0002\u0002\u06e0\u06e1\u0003\u0002\u0002\u0002\u06e1",
    "\u06e3\u0003\u0002\u0002\u0002\u06e2\u06e0\u0003\u0002\u0002\u0002\u06e3",
    "\u06e4\u0007\u0004\u0002\u0002\u06e4y\u0003\u0002\u0002\u0002\u06e5",
    "\u06e8\u0005\u00c2b\u0002\u06e6\u06e7\u0007t\u0002\u0002\u06e7\u06e9",
    "\u0007\u00f2\u0002\u0002\u06e8\u06e6\u0003\u0002\u0002\u0002\u06e8\u06e9",
    "\u0003\u0002\u0002\u0002\u06e9{\u0003\u0002\u0002\u0002\u06ea\u06ec",
    "\u0005\u0086D\u0002\u06eb\u06ed\u0005l7\u0002\u06ec\u06eb\u0003\u0002",
    "\u0002\u0002\u06ec\u06ed\u0003\u0002\u0002\u0002\u06ed\u06ee\u0003\u0002",
    "\u0002\u0002\u06ee\u06ef\u0005\u0082B\u0002\u06ef\u0703\u0003\u0002",
    "\u0002\u0002\u06f0\u06f1\u0007\u0003\u0002\u0002\u06f1\u06f2\u0005B",
    "\"\u0002\u06f2\u06f4\u0007\u0004\u0002\u0002\u06f3\u06f5\u0005l7\u0002",
    "\u06f4\u06f3\u0003\u0002\u0002\u0002\u06f4\u06f5\u0003\u0002\u0002\u0002",
    "\u06f5\u06f6\u0003\u0002\u0002\u0002\u06f6\u06f7\u0005\u0082B\u0002",
    "\u06f7\u0703\u0003\u0002\u0002\u0002\u06f8\u06f9\u0007\u0003\u0002\u0002",
    "\u06f9\u06fa\u0005d3\u0002\u06fa\u06fc\u0007\u0004\u0002\u0002\u06fb",
    "\u06fd\u0005l7\u0002\u06fc\u06fb\u0003\u0002\u0002\u0002\u06fc\u06fd",
    "\u0003\u0002\u0002\u0002\u06fd\u06fe\u0003\u0002\u0002\u0002\u06fe\u06ff",
    "\u0005\u0082B\u0002\u06ff\u0703\u0003\u0002\u0002\u0002\u0700\u0703",
    "\u0005~@\u0002\u0701\u0703\u0005\u0080A\u0002\u0702\u06ea\u0003\u0002",
    "\u0002\u0002\u0702\u06f0\u0003\u0002\u0002\u0002\u0702\u06f8\u0003\u0002",
    "\u0002\u0002\u0702\u0700\u0003\u0002\u0002\u0002\u0702\u0701\u0003\u0002",
    "\u0002\u0002\u0703}\u0003\u0002\u0002\u0002\u0704\u0705\u0007P\u0002",
    "\u0002\u0705\u070a\u0005\u008eH\u0002\u0706\u0707\u0007\u0005\u0002",
    "\u0002\u0707\u0709\u0005\u008eH\u0002\u0708\u0706\u0003\u0002\u0002",
    "\u0002\u0709\u070c\u0003\u0002\u0002\u0002\u070a\u0708\u0003\u0002\u0002",
    "\u0002\u070a\u070b\u0003\u0002\u0002\u0002\u070b\u070d\u0003\u0002\u0002",
    "\u0002\u070c\u070a\u0003\u0002\u0002\u0002\u070d\u070e\u0005\u0082B",
    "\u0002\u070e\u007f\u0003\u0002\u0002\u0002\u070f\u0710\u0005\u00c2b",
    "\u0002\u0710\u0719\u0007\u0003\u0002\u0002\u0711\u0716\u0005\u008eH",
    "\u0002\u0712\u0713\u0007\u0005\u0002\u0002\u0713\u0715\u0005\u008eH",
    "\u0002\u0714\u0712\u0003\u0002\u0002\u0002\u0715\u0718\u0003\u0002\u0002",
    "\u0002\u0716\u0714\u0003\u0002\u0002\u0002\u0716\u0717\u0003\u0002\u0002",
    "\u0002\u0717\u071a\u0003\u0002\u0002\u0002\u0718\u0716\u0003\u0002\u0002",
    "\u0002\u0719\u0711\u0003\u0002\u0002\u0002\u0719\u071a\u0003\u0002\u0002",
    "\u0002\u071a\u071b\u0003\u0002\u0002\u0002\u071b\u071c\u0007\u0004\u0002",
    "\u0002\u071c\u071d\u0005\u0082B\u0002\u071d\u0081\u0003\u0002\u0002",
    "\u0002\u071e\u0720\u0007\u0010\u0002\u0002\u071f\u071e\u0003\u0002\u0002",
    "\u0002\u071f\u0720\u0003\u0002\u0002\u0002\u0720\u0721\u0003\u0002\u0002",
    "\u0002\u0721\u0723\u0005\u00c4c\u0002\u0722\u0724\u0005p9\u0002\u0723",
    "\u0722\u0003\u0002\u0002\u0002\u0723\u0724\u0003\u0002\u0002\u0002\u0724",
    "\u0726\u0003\u0002\u0002\u0002\u0725\u071f\u0003\u0002\u0002\u0002\u0725",
    "\u0726\u0003\u0002\u0002\u0002\u0726\u0083\u0003\u0002\u0002\u0002\u0727",
    "\u0728\u0007N\u0002\u0002\u0728\u0729\u0007[\u0002\u0002\u0729\u072a",
    "\u0007\u00a2\u0002\u0002\u072a\u072e\u0007\u00f2\u0002\u0002\u072b\u072c",
    "\u0007O\u0002\u0002\u072c\u072d\u0007\u00a3\u0002\u0002\u072d\u072f",
    "\u0005.\u0018\u0002\u072e\u072b\u0003\u0002\u0002\u0002\u072e\u072f",
    "\u0003\u0002\u0002\u0002\u072f\u0759\u0003\u0002\u0002\u0002\u0730\u0731",
    "\u0007N\u0002\u0002\u0731\u0732\u0007[\u0002\u0002\u0732\u073c\u0007",
    "\u00a6\u0002\u0002\u0733\u0734\u0007\u00a7\u0002\u0002\u0734\u0735\u0007",
    "\u00a8\u0002\u0002\u0735\u0736\u0007\u0016\u0002\u0002\u0736\u073a\u0007",
    "\u00f2\u0002\u0002\u0737\u0738\u0007\u00ac\u0002\u0002\u0738\u0739\u0007",
    "\u0016\u0002\u0002\u0739\u073b\u0007\u00f2\u0002\u0002\u073a\u0737\u0003",
    "\u0002\u0002\u0002\u073a\u073b\u0003\u0002\u0002\u0002\u073b\u073d\u0003",
    "\u0002\u0002\u0002\u073c\u0733\u0003\u0002\u0002\u0002\u073c\u073d\u0003",
    "\u0002\u0002\u0002\u073d\u0743\u0003\u0002\u0002\u0002\u073e\u073f\u0007",
    "\u00a9\u0002\u0002\u073f\u0740\u0007\u00aa\u0002\u0002\u0740\u0741\u0007",
    "\u00a8\u0002\u0002\u0741\u0742\u0007\u0016\u0002\u0002\u0742\u0744\u0007",
    "\u00f2\u0002\u0002\u0743\u073e\u0003\u0002\u0002\u0002\u0743\u0744\u0003",
    "\u0002\u0002\u0002\u0744\u074a\u0003\u0002\u0002\u0002\u0745\u0746\u0007",
    "r\u0002\u0002\u0746\u0747\u0007\u00ab\u0002\u0002\u0747\u0748\u0007",
    "\u00a8\u0002\u0002\u0748\u0749\u0007\u0016\u0002\u0002\u0749\u074b\u0007",
    "\u00f2\u0002\u0002\u074a\u0745\u0003\u0002\u0002\u0002\u074a\u074b\u0003",
    "\u0002\u0002\u0002\u074b\u0750\u0003\u0002\u0002\u0002\u074c\u074d\u0007",
    "\u00ad\u0002\u0002\u074d\u074e\u0007\u00a8\u0002\u0002\u074e\u074f\u0007",
    "\u0016\u0002\u0002\u074f\u0751\u0007\u00f2\u0002\u0002\u0750\u074c\u0003",
    "\u0002\u0002\u0002\u0750\u0751\u0003\u0002\u0002\u0002\u0751\u0756\u0003",
    "\u0002\u0002\u0002\u0752\u0753\u0007)\u0002\u0002\u0753\u0754\u0007",
    "\u00db\u0002\u0002\u0754\u0755\u0007\u0010\u0002\u0002\u0755\u0757\u0007",
    "\u00f2\u0002\u0002\u0756\u0752\u0003\u0002\u0002\u0002\u0756\u0757\u0003",
    "\u0002\u0002\u0002\u0757\u0759\u0003\u0002\u0002\u0002\u0758\u0727\u0003",
    "\u0002\u0002\u0002\u0758\u0730\u0003\u0002\u0002\u0002\u0759\u0085\u0003",
    "\u0002\u0002\u0002\u075a\u075b\u0005\u00c2b\u0002\u075b\u075c\u0007",
    "\u0006\u0002\u0002\u075c\u075e\u0003\u0002\u0002\u0002\u075d\u075a\u0003",
    "\u0002\u0002\u0002\u075d\u075e\u0003\u0002\u0002\u0002\u075e\u075f\u0003",
    "\u0002\u0002\u0002\u075f\u0760\u0005\u00c2b\u0002\u0760\u0087\u0003",
    "\u0002\u0002\u0002\u0761\u0762\u0005\u00c2b\u0002\u0762\u0763\u0007",
    "\u0006\u0002\u0002\u0763\u0765\u0003\u0002\u0002\u0002\u0764\u0761\u0003",
    "\u0002\u0002\u0002\u0764\u0765\u0003\u0002\u0002\u0002\u0765\u0766\u0003",
    "\u0002\u0002\u0002\u0766\u0767\u0005\u00c2b\u0002\u0767\u0089\u0003",
    "\u0002\u0002\u0002\u0768\u0770\u0005\u008eH\u0002\u0769\u076b\u0007",
    "\u0010\u0002\u0002\u076a\u0769\u0003\u0002\u0002\u0002\u076a\u076b\u0003",
    "\u0002\u0002\u0002\u076b\u076e\u0003\u0002\u0002\u0002\u076c\u076f\u0005",
    "\u00c2b\u0002\u076d\u076f\u0005p9\u0002\u076e\u076c\u0003\u0002\u0002",
    "\u0002\u076e\u076d\u0003\u0002\u0002\u0002\u076f\u0771\u0003\u0002\u0002",
    "\u0002\u0770\u076a\u0003\u0002\u0002\u0002\u0770\u0771\u0003\u0002\u0002",
    "\u0002\u0771\u008b\u0003\u0002\u0002\u0002\u0772\u0777\u0005\u008aF",
    "\u0002\u0773\u0774\u0007\u0005\u0002\u0002\u0774\u0776\u0005\u008aF",
    "\u0002\u0775\u0773\u0003\u0002\u0002\u0002\u0776\u0779\u0003\u0002\u0002",
    "\u0002\u0777\u0775\u0003\u0002\u0002\u0002\u0777\u0778\u0003\u0002\u0002",
    "\u0002\u0778\u008d\u0003\u0002\u0002\u0002\u0779\u0777\u0003\u0002\u0002",
    "\u0002\u077a\u077b\u0005\u0090I\u0002\u077b\u008f\u0003\u0002\u0002",
    "\u0002\u077c\u077d\bI\u0001\u0002\u077d\u077e\u0007\"\u0002\u0002\u077e",
    "\u0789\u0005\u0090I\u0007\u077f\u0780\u0007$\u0002\u0002\u0780\u0781",
    "\u0007\u0003\u0002\u0002\u0781\u0782\u0005\u001a\u000e\u0002\u0782\u0783",
    "\u0007\u0004\u0002\u0002\u0783\u0789\u0003\u0002\u0002\u0002\u0784\u0786",
    "\u0005\u0094K\u0002\u0785\u0787\u0005\u0092J\u0002\u0786\u0785\u0003",
    "\u0002\u0002\u0002\u0786\u0787\u0003\u0002\u0002\u0002\u0787\u0789\u0003",
    "\u0002\u0002\u0002\u0788\u077c\u0003\u0002\u0002\u0002\u0788\u077f\u0003",
    "\u0002\u0002\u0002\u0788\u0784\u0003\u0002\u0002\u0002\u0789\u0792\u0003",
    "\u0002\u0002\u0002\u078a\u078b\f\u0004\u0002\u0002\u078b\u078c\u0007",
    " \u0002\u0002\u078c\u0791\u0005\u0090I\u0005\u078d\u078e\f\u0003\u0002",
    "\u0002\u078e\u078f\u0007\u001f\u0002\u0002\u078f\u0791\u0005\u0090I",
    "\u0004\u0790\u078a\u0003\u0002\u0002\u0002\u0790\u078d\u0003\u0002\u0002",
    "\u0002\u0791\u0794\u0003\u0002\u0002\u0002\u0792\u0790\u0003\u0002\u0002",
    "\u0002\u0792\u0793\u0003\u0002\u0002\u0002\u0793\u0091\u0003\u0002\u0002",
    "\u0002\u0794\u0792\u0003\u0002\u0002\u0002\u0795\u0797\u0007\"\u0002",
    "\u0002\u0796\u0795\u0003\u0002\u0002\u0002\u0796\u0797\u0003\u0002\u0002",
    "\u0002\u0797\u0798\u0003\u0002\u0002\u0002\u0798\u0799\u0007%\u0002",
    "\u0002\u0799\u079a\u0005\u0094K\u0002\u079a\u079b\u0007 \u0002\u0002",
    "\u079b\u079c\u0005\u0094K\u0002\u079c\u07c6\u0003\u0002\u0002\u0002",
    "\u079d\u079f\u0007\"\u0002\u0002\u079e\u079d\u0003\u0002\u0002\u0002",
    "\u079e\u079f\u0003\u0002\u0002\u0002\u079f\u07a0\u0003\u0002\u0002\u0002",
    "\u07a0\u07a1\u0007!\u0002\u0002\u07a1\u07a2\u0007\u0003\u0002\u0002",
    "\u07a2\u07a7\u0005\u008eH\u0002\u07a3\u07a4\u0007\u0005\u0002\u0002",
    "\u07a4\u07a6\u0005\u008eH\u0002\u07a5\u07a3\u0003\u0002\u0002\u0002",
    "\u07a6\u07a9\u0003\u0002\u0002\u0002\u07a7\u07a5\u0003\u0002\u0002\u0002",
    "\u07a7\u07a8\u0003\u0002\u0002\u0002\u07a8\u07aa\u0003\u0002\u0002\u0002",
    "\u07a9\u07a7\u0003\u0002\u0002\u0002\u07aa\u07ab\u0007\u0004\u0002\u0002",
    "\u07ab\u07c6\u0003\u0002\u0002\u0002\u07ac\u07ae\u0007\"\u0002\u0002",
    "\u07ad\u07ac\u0003\u0002\u0002\u0002\u07ad\u07ae\u0003\u0002\u0002\u0002",
    "\u07ae\u07af\u0003\u0002\u0002\u0002\u07af\u07b0\u0007!\u0002\u0002",
    "\u07b0\u07b1\u0007\u0003\u0002\u0002\u07b1\u07b2\u0005\u001a\u000e\u0002",
    "\u07b2\u07b3\u0007\u0004\u0002\u0002\u07b3\u07c6\u0003\u0002\u0002\u0002",
    "\u07b4\u07b6\u0007\"\u0002\u0002\u07b5\u07b4\u0003\u0002\u0002\u0002",
    "\u07b5\u07b6\u0003\u0002\u0002\u0002\u07b6\u07b7\u0003\u0002\u0002\u0002",
    "\u07b7\u07b8\t\u000f\u0002\u0002\u07b8\u07c6\u0005\u0094K\u0002\u07b9",
    "\u07bb\u0007(\u0002\u0002\u07ba\u07bc\u0007\"\u0002\u0002\u07bb\u07ba",
    "\u0003\u0002\u0002\u0002\u07bb\u07bc\u0003\u0002\u0002\u0002\u07bc\u07bd",
    "\u0003\u0002\u0002\u0002\u07bd\u07c6\u0007)\u0002\u0002\u07be\u07c0",
    "\u0007(\u0002\u0002\u07bf\u07c1\u0007\"\u0002\u0002\u07c0\u07bf\u0003",
    "\u0002\u0002\u0002\u07c0\u07c1\u0003\u0002\u0002\u0002\u07c1\u07c2\u0003",
    "\u0002\u0002\u0002\u07c2\u07c3\u0007\u0013\u0002\u0002\u07c3\u07c4\u0007",
    "\u000e\u0002\u0002\u07c4\u07c6\u0005\u0094K\u0002\u07c5\u0796\u0003",
    "\u0002\u0002\u0002\u07c5\u079e\u0003\u0002\u0002\u0002\u07c5\u07ad\u0003",
    "\u0002\u0002\u0002\u07c5\u07b5\u0003\u0002\u0002\u0002\u07c5\u07b9\u0003",
    "\u0002\u0002\u0002\u07c5\u07be\u0003\u0002\u0002\u0002\u07c6\u0093\u0003",
    "\u0002\u0002\u0002\u07c7\u07c8\bK\u0001\u0002\u07c8\u07cc\u0005\u0096",
    "L\u0002\u07c9\u07ca\t\u0010\u0002\u0002\u07ca\u07cc\u0005\u0094K\t\u07cb",
    "\u07c7\u0003\u0002\u0002\u0002\u07cb\u07c9\u0003\u0002\u0002\u0002\u07cc",
    "\u07e2\u0003\u0002\u0002\u0002\u07cd\u07ce\f\b\u0002\u0002\u07ce\u07cf",
    "\t\u0011\u0002\u0002\u07cf\u07e1\u0005\u0094K\t\u07d0\u07d1\f\u0007",
    "\u0002\u0002\u07d1\u07d2\t\u0012\u0002\u0002\u07d2\u07e1\u0005\u0094",
    "K\b\u07d3\u07d4\f\u0006\u0002\u0002\u07d4\u07d5\u0007\u0093\u0002\u0002",
    "\u07d5\u07e1\u0005\u0094K\u0007\u07d6\u07d7\f\u0005\u0002\u0002\u07d7",
    "\u07d8\u0007\u0096\u0002\u0002\u07d8\u07e1\u0005\u0094K\u0006\u07d9",
    "\u07da\f\u0004\u0002\u0002\u07da\u07db\u0007\u0094\u0002\u0002\u07db",
    "\u07e1\u0005\u0094K\u0005\u07dc\u07dd\f\u0003\u0002\u0002\u07dd\u07de",
    "\u0005\u009aN\u0002\u07de\u07df\u0005\u0094K\u0004\u07df\u07e1\u0003",
    "\u0002\u0002\u0002\u07e0\u07cd\u0003\u0002\u0002\u0002\u07e0\u07d0\u0003",
    "\u0002\u0002\u0002\u07e0\u07d3\u0003\u0002\u0002\u0002\u07e0\u07d6\u0003",
    "\u0002\u0002\u0002\u07e0\u07d9\u0003\u0002\u0002\u0002\u07e0\u07dc\u0003",
    "\u0002\u0002\u0002\u07e1\u07e4\u0003\u0002\u0002\u0002\u07e2\u07e0\u0003",
    "\u0002\u0002\u0002\u07e2\u07e3\u0003\u0002\u0002\u0002\u07e3\u0095\u0003",
    "\u0002\u0002\u0002\u07e4\u07e2\u0003\u0002\u0002\u0002\u07e5\u07e6\b",
    "L\u0001\u0002\u07e6\u07e8\u00071\u0002\u0002\u07e7\u07e9\u0005\u00b4",
    "[\u0002\u07e8\u07e7\u0003\u0002\u0002\u0002\u07e9\u07ea\u0003\u0002",
    "\u0002\u0002\u07ea\u07e8\u0003\u0002\u0002\u0002\u07ea\u07eb\u0003\u0002",
    "\u0002\u0002\u07eb\u07ee\u0003\u0002\u0002\u0002\u07ec\u07ed\u00074",
    "\u0002\u0002\u07ed\u07ef\u0005\u008eH\u0002\u07ee\u07ec\u0003\u0002",
    "\u0002\u0002\u07ee\u07ef\u0003\u0002\u0002\u0002\u07ef\u07f0\u0003\u0002",
    "\u0002\u0002\u07f0\u07f1\u00075\u0002\u0002\u07f1\u0877\u0003\u0002",
    "\u0002\u0002\u07f2\u07f3\u00071\u0002\u0002\u07f3\u07f5\u0005\u008e",
    "H\u0002\u07f4\u07f6\u0005\u00b4[\u0002\u07f5\u07f4\u0003\u0002\u0002",
    "\u0002\u07f6\u07f7\u0003\u0002\u0002\u0002\u07f7\u07f5\u0003\u0002\u0002",
    "\u0002\u07f7\u07f8\u0003\u0002\u0002\u0002\u07f8\u07fb\u0003\u0002\u0002",
    "\u0002\u07f9\u07fa\u00074\u0002\u0002\u07fa\u07fc\u0005\u008eH\u0002",
    "\u07fb\u07f9\u0003\u0002\u0002\u0002\u07fb\u07fc\u0003\u0002\u0002\u0002",
    "\u07fc\u07fd\u0003\u0002\u0002\u0002\u07fd\u07fe\u00075\u0002\u0002",
    "\u07fe\u0877\u0003\u0002\u0002\u0002\u07ff\u0800\u0007_\u0002\u0002",
    "\u0800\u0801\u0007\u0003\u0002\u0002\u0801\u0802\u0005\u008eH\u0002",
    "\u0802\u0803\u0007\u0010\u0002\u0002\u0803\u0804\u0005\u00aaV\u0002",
    "\u0804\u0805\u0007\u0004\u0002\u0002\u0805\u0877\u0003\u0002\u0002\u0002",
    "\u0806\u0807\u0007s\u0002\u0002\u0807\u0810\u0007\u0003\u0002\u0002",
    "\u0808\u080d\u0005\u008aF\u0002\u0809\u080a\u0007\u0005\u0002\u0002",
    "\u080a\u080c\u0005\u008aF\u0002\u080b\u0809\u0003\u0002\u0002\u0002",
    "\u080c\u080f\u0003\u0002\u0002\u0002\u080d\u080b\u0003\u0002\u0002\u0002",
    "\u080d\u080e\u0003\u0002\u0002\u0002\u080e\u0811\u0003\u0002\u0002\u0002",
    "\u080f\u080d\u0003\u0002\u0002\u0002\u0810\u0808\u0003\u0002\u0002\u0002",
    "\u0810\u0811\u0003\u0002\u0002\u0002\u0811\u0812\u0003\u0002\u0002\u0002",
    "\u0812\u0877\u0007\u0004\u0002\u0002\u0813\u0814\u0007K\u0002\u0002",
    "\u0814\u0815\u0007\u0003\u0002\u0002\u0815\u0818\u0005\u008eH\u0002",
    "\u0816\u0817\u0007}\u0002\u0002\u0817\u0819\u0007,\u0002\u0002\u0818",
    "\u0816\u0003\u0002\u0002\u0002\u0818\u0819\u0003\u0002\u0002\u0002\u0819",
    "\u081a\u0003\u0002\u0002\u0002\u081a\u081b\u0007\u0004\u0002\u0002\u081b",
    "\u0877\u0003\u0002\u0002\u0002\u081c\u081d\u0007M\u0002\u0002\u081d",
    "\u081e\u0007\u0003\u0002\u0002\u081e\u0821\u0005\u008eH\u0002\u081f",
    "\u0820\u0007}\u0002\u0002\u0820\u0822\u0007,\u0002\u0002\u0821\u081f",
    "\u0003\u0002\u0002\u0002\u0821\u0822\u0003\u0002\u0002\u0002\u0822\u0823",
    "\u0003\u0002\u0002\u0002\u0823\u0824\u0007\u0004\u0002\u0002\u0824\u0877",
    "\u0003\u0002\u0002\u0002\u0825\u0826\u0007\u0082\u0002\u0002\u0826\u0827",
    "\u0007\u0003\u0002\u0002\u0827\u0828\u0005\u0094K\u0002\u0828\u0829",
    "\u0007!\u0002\u0002\u0829\u082a\u0005\u0094K\u0002\u082a\u082b\u0007",
    "\u0004\u0002\u0002\u082b\u0877\u0003\u0002\u0002\u0002\u082c\u0877\u0005",
    "\u0098M\u0002\u082d\u0877\u0007\u008e\u0002\u0002\u082e\u082f\u0005",
    "\u00c0a\u0002\u082f\u0830\u0007\u0006\u0002\u0002\u0830\u0831\u0007",
    "\u008e\u0002\u0002\u0831\u0877\u0003\u0002\u0002\u0002\u0832\u0833\u0007",
    "\u0003\u0002\u0002\u0833\u0836\u0005\u008aF\u0002\u0834\u0835\u0007",
    "\u0005\u0002\u0002\u0835\u0837\u0005\u008aF\u0002\u0836\u0834\u0003",
    "\u0002\u0002\u0002\u0837\u0838\u0003\u0002\u0002\u0002\u0838\u0836\u0003",
    "\u0002\u0002\u0002\u0838\u0839\u0003\u0002\u0002\u0002\u0839\u083a\u0003",
    "\u0002\u0002\u0002\u083a\u083b\u0007\u0004\u0002\u0002\u083b\u0877\u0003",
    "\u0002\u0002\u0002\u083c\u083d\u0007\u0003\u0002\u0002\u083d\u083e\u0005",
    "\u001a\u000e\u0002\u083e\u083f\u0007\u0004\u0002\u0002\u083f\u0877\u0003",
    "\u0002\u0002\u0002\u0840\u0841\u0005\u00c0a\u0002\u0841\u084d\u0007",
    "\u0003\u0002\u0002\u0842\u0844\u0005b2\u0002\u0843\u0842\u0003\u0002",
    "\u0002\u0002\u0843\u0844\u0003\u0002\u0002\u0002\u0844\u0845\u0003\u0002",
    "\u0002\u0002\u0845\u084a\u0005\u008eH\u0002\u0846\u0847\u0007\u0005",
    "\u0002\u0002\u0847\u0849\u0005\u008eH\u0002\u0848\u0846\u0003\u0002",
    "\u0002\u0002\u0849\u084c\u0003\u0002\u0002\u0002\u084a\u0848\u0003\u0002",
    "\u0002\u0002\u084a\u084b\u0003\u0002\u0002\u0002\u084b\u084e\u0003\u0002",
    "\u0002\u0002\u084c\u084a\u0003\u0002\u0002\u0002\u084d\u0843\u0003\u0002",
    "\u0002\u0002\u084d\u084e\u0003\u0002\u0002\u0002\u084e\u084f\u0003\u0002",
    "\u0002\u0002\u084f\u0852\u0007\u0004\u0002\u0002\u0850\u0851\u0007C",
    "\u0002\u0002\u0851\u0853\u0005\u00ba^\u0002\u0852\u0850\u0003\u0002",
    "\u0002\u0002\u0852\u0853\u0003\u0002\u0002\u0002\u0853\u0877\u0003\u0002",
    "\u0002\u0002\u0854\u0855\u0005\u00c0a\u0002\u0855\u0856\u0007\u0003",
    "\u0002\u0002\u0856\u0857\t\u0013\u0002\u0002\u0857\u0858\u0005\u008e",
    "H\u0002\u0858\u0859\u0007\u000e\u0002\u0002\u0859\u085a\u0005\u008e",
    "H\u0002\u085a\u085b\u0007\u0004\u0002\u0002\u085b\u0877\u0003\u0002",
    "\u0002\u0002\u085c\u085d\u0007\u00fa\u0002\u0002\u085d\u085e\u0007\t",
    "\u0002\u0002\u085e\u0877\u0005\u008eH\u0002\u085f\u0860\u0007\u0003",
    "\u0002\u0002\u0860\u0863\u0007\u00fa\u0002\u0002\u0861\u0862\u0007\u0005",
    "\u0002\u0002\u0862\u0864\u0007\u00fa\u0002\u0002\u0863\u0861\u0003\u0002",
    "\u0002\u0002\u0864\u0865\u0003\u0002\u0002\u0002\u0865\u0863\u0003\u0002",
    "\u0002\u0002\u0865\u0866\u0003\u0002\u0002\u0002\u0866\u0867\u0003\u0002",
    "\u0002\u0002\u0867\u0868\u0007\u0004\u0002\u0002\u0868\u0869\u0007\t",
    "\u0002\u0002\u0869\u0877\u0005\u008eH\u0002\u086a\u0877\u0005\u00c2",
    "b\u0002\u086b\u086c\u0007\u0003\u0002\u0002\u086c\u086d\u0005\u008e",
    "H\u0002\u086d\u086e\u0007\u0004\u0002\u0002\u086e\u0877\u0003\u0002",
    "\u0002\u0002\u086f\u0870\u0007\u0083\u0002\u0002\u0870\u0871\u0007\u0003",
    "\u0002\u0002\u0871\u0872\u0005\u00c2b\u0002\u0872\u0873\u0007\u000e",
    "\u0002\u0002\u0873\u0874\u0005\u0094K\u0002\u0874\u0875\u0007\u0004",
    "\u0002\u0002\u0875\u0877\u0003\u0002\u0002\u0002\u0876\u07e5\u0003\u0002",
    "\u0002\u0002\u0876\u07f2\u0003\u0002\u0002\u0002\u0876\u07ff\u0003\u0002",
    "\u0002\u0002\u0876\u0806\u0003\u0002\u0002\u0002\u0876\u0813\u0003\u0002",
    "\u0002\u0002\u0876\u081c\u0003\u0002\u0002\u0002\u0876\u0825\u0003\u0002",
    "\u0002\u0002\u0876\u082c\u0003\u0002\u0002\u0002\u0876\u082d\u0003\u0002",
    "\u0002\u0002\u0876\u082e\u0003\u0002\u0002\u0002\u0876\u0832\u0003\u0002",
    "\u0002\u0002\u0876\u083c\u0003\u0002\u0002\u0002\u0876\u0840\u0003\u0002",
    "\u0002\u0002\u0876\u0854\u0003\u0002\u0002\u0002\u0876\u085c\u0003\u0002",
    "\u0002\u0002\u0876\u085f\u0003\u0002\u0002\u0002\u0876\u086a\u0003\u0002",
    "\u0002\u0002\u0876\u086b\u0003\u0002\u0002\u0002\u0876\u086f\u0003\u0002",
    "\u0002\u0002\u0877\u0882\u0003\u0002\u0002\u0002\u0878\u0879\f\u0007",
    "\u0002\u0002\u0879\u087a\u0007\n\u0002\u0002\u087a\u087b\u0005\u0094",
    "K\u0002\u087b\u087c\u0007\u000b\u0002\u0002\u087c\u0881\u0003\u0002",
    "\u0002\u0002\u087d\u087e\f\u0005\u0002\u0002\u087e\u087f\u0007\u0006",
    "\u0002\u0002\u087f\u0881\u0005\u00c2b\u0002\u0880\u0878\u0003\u0002",
    "\u0002\u0002\u0880\u087d\u0003\u0002\u0002\u0002\u0881\u0884\u0003\u0002",
    "\u0002\u0002\u0882\u0880\u0003\u0002\u0002\u0002\u0882\u0883\u0003\u0002",
    "\u0002\u0002\u0883\u0097\u0003\u0002\u0002\u0002\u0884\u0882\u0003\u0002",
    "\u0002\u0002\u0885\u0892\u0007)\u0002\u0002\u0886\u0892\u0005\u00a2",
    "R\u0002\u0887\u0888\u0005\u00c2b\u0002\u0888\u0889\u0007\u00f2\u0002",
    "\u0002\u0889\u0892\u0003\u0002\u0002\u0002\u088a\u0892\u0005\u00c8e",
    "\u0002\u088b\u0892\u0005\u00a0Q\u0002\u088c\u088e\u0007\u00f2\u0002",
    "\u0002\u088d\u088c\u0003\u0002\u0002\u0002\u088e\u088f\u0003\u0002\u0002",
    "\u0002\u088f\u088d\u0003\u0002\u0002\u0002\u088f\u0890\u0003\u0002\u0002",
    "\u0002\u0890\u0892\u0003\u0002\u0002\u0002\u0891\u0885\u0003\u0002\u0002",
    "\u0002\u0891\u0886\u0003\u0002\u0002\u0002\u0891\u0887\u0003\u0002\u0002",
    "\u0002\u0891\u088a\u0003\u0002\u0002\u0002\u0891\u088b\u0003\u0002\u0002",
    "\u0002\u0891\u088d\u0003\u0002\u0002\u0002\u0892\u0099\u0003\u0002\u0002",
    "\u0002\u0893\u0894\t\u0014\u0002\u0002\u0894\u009b\u0003\u0002\u0002",
    "\u0002\u0895\u0896\t\u0015\u0002\u0002\u0896\u009d\u0003\u0002\u0002",
    "\u0002\u0897\u0898\t\u0016\u0002\u0002\u0898\u009f\u0003\u0002\u0002",
    "\u0002\u0899\u089a\t\u0017\u0002\u0002\u089a\u00a1\u0003\u0002\u0002",
    "\u0002\u089b\u089f\u00070\u0002\u0002\u089c\u089e\u0005\u00a4S\u0002",
    "\u089d\u089c\u0003\u0002\u0002\u0002\u089e\u08a1\u0003\u0002\u0002\u0002",
    "\u089f\u089d\u0003\u0002\u0002\u0002\u089f\u08a0\u0003\u0002\u0002\u0002",
    "\u08a0\u00a3\u0003\u0002\u0002\u0002\u08a1\u089f\u0003\u0002\u0002\u0002",
    "\u08a2\u08a3\u0005\u00a6T\u0002\u08a3\u08a6\u0005\u00c2b\u0002\u08a4",
    "\u08a5\u0007l\u0002\u0002\u08a5\u08a7\u0005\u00c2b\u0002\u08a6\u08a4",
    "\u0003\u0002\u0002\u0002\u08a6\u08a7\u0003\u0002\u0002\u0002\u08a7\u00a5",
    "\u0003\u0002\u0002\u0002\u08a8\u08aa\t\u0018\u0002\u0002\u08a9\u08a8",
    "\u0003\u0002\u0002\u0002\u08a9\u08aa\u0003\u0002\u0002\u0002\u08aa\u08ab",
    "\u0003\u0002\u0002\u0002\u08ab\u08ae\t\u000e\u0002\u0002\u08ac\u08ae",
    "\u0007\u00f2\u0002\u0002\u08ad\u08a9\u0003\u0002\u0002\u0002\u08ad\u08ac",
    "\u0003\u0002\u0002\u0002\u08ae\u00a7\u0003\u0002\u0002\u0002\u08af\u08b3",
    "\u0007K\u0002\u0002\u08b0\u08b1\u0007L\u0002\u0002\u08b1\u08b3\u0005",
    "\u00c2b\u0002\u08b2\u08af\u0003\u0002\u0002\u0002\u08b2\u08b0\u0003",
    "\u0002\u0002\u0002\u08b3\u00a9\u0003\u0002\u0002\u0002\u08b4\u08b5\u0007",
    "q\u0002\u0002\u08b5\u08b6\u0007\u0088\u0002\u0002\u08b6\u08b7\u0005",
    "\u00aaV\u0002\u08b7\u08b8\u0007\u008a\u0002\u0002\u08b8\u08d7\u0003",
    "\u0002\u0002\u0002\u08b9\u08ba\u0007r\u0002\u0002\u08ba\u08bb\u0007",
    "\u0088\u0002\u0002\u08bb\u08bc\u0005\u00aaV\u0002\u08bc\u08bd\u0007",
    "\u0005\u0002\u0002\u08bd\u08be\u0005\u00aaV\u0002\u08be\u08bf\u0007",
    "\u008a\u0002\u0002\u08bf\u08d7\u0003\u0002\u0002\u0002\u08c0\u08c7\u0007",
    "s\u0002\u0002\u08c1\u08c3\u0007\u0088\u0002\u0002\u08c2\u08c4\u0005",
    "\u00b0Y\u0002\u08c3\u08c2\u0003\u0002\u0002\u0002\u08c3\u08c4\u0003",
    "\u0002\u0002\u0002\u08c4\u08c5\u0003\u0002\u0002\u0002\u08c5\u08c8\u0007",
    "\u008a\u0002\u0002\u08c6\u08c8\u0007\u0086\u0002\u0002\u08c7\u08c1\u0003",
    "\u0002\u0002\u0002\u08c7\u08c6\u0003\u0002\u0002\u0002\u08c8\u08d7\u0003",
    "\u0002\u0002\u0002\u08c9\u08d4\u0005\u00c2b\u0002\u08ca\u08cb\u0007",
    "\u0003\u0002\u0002\u08cb\u08d0\u0007\u00f6\u0002\u0002\u08cc\u08cd\u0007",
    "\u0005\u0002\u0002\u08cd\u08cf\u0007\u00f6\u0002\u0002\u08ce\u08cc\u0003",
    "\u0002\u0002\u0002\u08cf\u08d2\u0003\u0002\u0002\u0002\u08d0\u08ce\u0003",
    "\u0002\u0002\u0002\u08d0\u08d1\u0003\u0002\u0002\u0002\u08d1\u08d3\u0003",
    "\u0002\u0002\u0002\u08d2\u08d0\u0003\u0002\u0002\u0002\u08d3\u08d5\u0007",
    "\u0004\u0002\u0002\u08d4\u08ca\u0003\u0002\u0002\u0002\u08d4\u08d5\u0003",
    "\u0002\u0002\u0002\u08d5\u08d7\u0003\u0002\u0002\u0002\u08d6\u08b4\u0003",
    "\u0002\u0002\u0002\u08d6\u08b9\u0003\u0002\u0002\u0002\u08d6\u08c0\u0003",
    "\u0002\u0002\u0002\u08d6\u08c9\u0003\u0002\u0002\u0002\u08d7\u00ab\u0003",
    "\u0002\u0002\u0002\u08d8\u08dd\u0005\u00aeX\u0002\u08d9\u08da\u0007",
    "\u0005\u0002\u0002\u08da\u08dc\u0005\u00aeX\u0002\u08db\u08d9\u0003",
    "\u0002\u0002\u0002\u08dc\u08df\u0003\u0002\u0002\u0002\u08dd\u08db\u0003",
    "\u0002\u0002\u0002\u08dd\u08de\u0003\u0002\u0002\u0002\u08de\u00ad\u0003",
    "\u0002\u0002\u0002\u08df\u08dd\u0003\u0002\u0002\u0002\u08e0\u08e1\u0005",
    "\u00c2b\u0002\u08e1\u08e4\u0005\u00aaV\u0002\u08e2\u08e3\u0007t\u0002",
    "\u0002\u08e3\u08e5\u0007\u00f2\u0002\u0002\u08e4\u08e2\u0003\u0002\u0002",
    "\u0002\u08e4\u08e5\u0003\u0002\u0002\u0002\u08e5\u00af\u0003\u0002\u0002",
    "\u0002\u08e6\u08eb\u0005\u00b2Z\u0002\u08e7\u08e8\u0007\u0005\u0002",
    "\u0002\u08e8\u08ea\u0005\u00b2Z\u0002\u08e9\u08e7\u0003\u0002\u0002",
    "\u0002\u08ea\u08ed\u0003\u0002\u0002\u0002\u08eb\u08e9\u0003\u0002\u0002",
    "\u0002\u08eb\u08ec\u0003\u0002\u0002\u0002\u08ec\u00b1\u0003\u0002\u0002",
    "\u0002\u08ed\u08eb\u0003\u0002\u0002\u0002\u08ee\u08ef\u0005\u00c2b",
    "\u0002\u08ef\u08f0\u0007\f\u0002\u0002\u08f0\u08f3\u0005\u00aaV\u0002",
    "\u08f1\u08f2\u0007t\u0002\u0002\u08f2\u08f4\u0007\u00f2\u0002\u0002",
    "\u08f3\u08f1\u0003\u0002\u0002\u0002\u08f3\u08f4\u0003\u0002\u0002\u0002",
    "\u08f4\u00b3\u0003\u0002\u0002\u0002\u08f5\u08f6\u00072\u0002\u0002",
    "\u08f6\u08f7\u0005\u008eH\u0002\u08f7\u08f8\u00073\u0002\u0002\u08f8",
    "\u08f9\u0005\u008eH\u0002\u08f9\u00b5\u0003\u0002\u0002\u0002\u08fa",
    "\u08fb\u0007B\u0002\u0002\u08fb\u0900\u0005\u00b8]\u0002\u08fc\u08fd",
    "\u0007\u0005\u0002\u0002\u08fd\u08ff\u0005\u00b8]\u0002\u08fe\u08fc",
    "\u0003\u0002\u0002\u0002\u08ff\u0902\u0003\u0002\u0002\u0002\u0900\u08fe",
    "\u0003\u0002\u0002\u0002\u0900\u0901\u0003\u0002\u0002\u0002\u0901\u00b7",
    "\u0003\u0002\u0002\u0002\u0902\u0900\u0003\u0002\u0002\u0002\u0903\u0904",
    "\u0005\u00c2b\u0002\u0904\u0905\u0007\u0010\u0002\u0002\u0905\u0906",
    "\u0005\u00ba^\u0002\u0906\u00b9\u0003\u0002\u0002\u0002\u0907\u0932",
    "\u0005\u00c2b\u0002\u0908\u092b\u0007\u0003\u0002\u0002\u0909\u090a",
    "\u0007\u009c\u0002\u0002\u090a\u090b\u0007\u0016\u0002\u0002\u090b\u0910",
    "\u0005\u008eH\u0002\u090c\u090d\u0007\u0005\u0002\u0002\u090d\u090f",
    "\u0005\u008eH\u0002\u090e\u090c\u0003\u0002\u0002\u0002\u090f\u0912",
    "\u0003\u0002\u0002\u0002\u0910\u090e\u0003\u0002\u0002\u0002\u0910\u0911",
    "\u0003\u0002\u0002\u0002\u0911\u092c\u0003\u0002\u0002\u0002\u0912\u0910",
    "\u0003\u0002\u0002\u0002\u0913\u0914\t\u0019\u0002\u0002\u0914\u0915",
    "\u0007\u0016\u0002\u0002\u0915\u091a\u0005\u008eH\u0002\u0916\u0917",
    "\u0007\u0005\u0002\u0002\u0917\u0919\u0005\u008eH\u0002\u0918\u0916",
    "\u0003\u0002\u0002\u0002\u0919\u091c\u0003\u0002\u0002\u0002\u091a\u0918",
    "\u0003\u0002\u0002\u0002\u091a\u091b\u0003\u0002\u0002\u0002\u091b\u091e",
    "\u0003\u0002\u0002\u0002\u091c\u091a\u0003\u0002\u0002\u0002\u091d\u0913",
    "\u0003\u0002\u0002\u0002\u091d\u091e\u0003\u0002\u0002\u0002\u091e\u0929",
    "\u0003\u0002\u0002\u0002\u091f\u0920\t\u001a\u0002\u0002\u0920\u0921",
    "\u0007\u0016\u0002\u0002\u0921\u0926\u0005L\'\u0002\u0922\u0923\u0007",
    "\u0005\u0002\u0002\u0923\u0925\u0005L\'\u0002\u0924\u0922\u0003\u0002",
    "\u0002\u0002\u0925\u0928\u0003\u0002\u0002\u0002\u0926\u0924\u0003\u0002",
    "\u0002\u0002\u0926\u0927\u0003\u0002\u0002\u0002\u0927\u092a\u0003\u0002",
    "\u0002\u0002\u0928\u0926\u0003\u0002\u0002\u0002\u0929\u091f\u0003\u0002",
    "\u0002\u0002\u0929\u092a\u0003\u0002\u0002\u0002\u092a\u092c\u0003\u0002",
    "\u0002\u0002\u092b\u0909\u0003\u0002\u0002\u0002\u092b\u091d\u0003\u0002",
    "\u0002\u0002\u092c\u092e\u0003\u0002\u0002\u0002\u092d\u092f\u0005\u00bc",
    "_\u0002\u092e\u092d\u0003\u0002\u0002\u0002\u092e\u092f\u0003\u0002",
    "\u0002\u0002\u092f\u0930\u0003\u0002\u0002\u0002\u0930\u0932\u0007\u0004",
    "\u0002\u0002\u0931\u0907\u0003\u0002\u0002\u0002\u0931\u0908\u0003\u0002",
    "\u0002\u0002\u0932\u00bb\u0003\u0002\u0002\u0002\u0933\u0934\u0007E",
    "\u0002\u0002\u0934\u0944\u0005\u00be`\u0002\u0935\u0936\u0007F\u0002",
    "\u0002\u0936\u0944\u0005\u00be`\u0002\u0937\u0938\u0007E\u0002\u0002",
    "\u0938\u0939\u0007%\u0002\u0002\u0939\u093a\u0005\u00be`\u0002\u093a",
    "\u093b\u0007 \u0002\u0002\u093b\u093c\u0005\u00be`\u0002\u093c\u0944",
    "\u0003\u0002\u0002\u0002\u093d\u093e\u0007F\u0002\u0002\u093e\u093f",
    "\u0007%\u0002\u0002\u093f\u0940\u0005\u00be`\u0002\u0940\u0941\u0007",
    " \u0002\u0002\u0941\u0942\u0005\u00be`\u0002\u0942\u0944\u0003\u0002",
    "\u0002\u0002\u0943\u0933\u0003\u0002\u0002\u0002\u0943\u0935\u0003\u0002",
    "\u0002\u0002\u0943\u0937\u0003\u0002\u0002\u0002\u0943\u093d\u0003\u0002",
    "\u0002\u0002\u0944\u00bd\u0003\u0002\u0002\u0002\u0945\u0946\u0007G",
    "\u0002\u0002\u0946\u094d\t\u001b\u0002\u0002\u0947\u0948\u0007J\u0002",
    "\u0002\u0948\u094d\u0007N\u0002\u0002\u0949\u094a\u0005\u008eH\u0002",
    "\u094a\u094b\t\u001b\u0002\u0002\u094b\u094d\u0003\u0002\u0002\u0002",
    "\u094c\u0945\u0003\u0002\u0002\u0002\u094c\u0947\u0003\u0002\u0002\u0002",
    "\u094c\u0949\u0003\u0002\u0002\u0002\u094d\u00bf\u0003\u0002\u0002\u0002",
    "\u094e\u0953\u0005\u00c2b\u0002\u094f\u0950\u0007\u0006\u0002\u0002",
    "\u0950\u0952\u0005\u00c2b\u0002\u0951\u094f\u0003\u0002\u0002\u0002",
    "\u0952\u0955\u0003\u0002\u0002\u0002\u0953\u0951\u0003\u0002\u0002\u0002",
    "\u0953\u0954\u0003\u0002\u0002\u0002\u0954\u00c1\u0003\u0002\u0002\u0002",
    "\u0955\u0953\u0003\u0002\u0002\u0002\u0956\u0966\u0005\u00c4c\u0002",
    "\u0957\u0966\u0007\u00ef\u0002\u0002\u0958\u0966\u0007=\u0002\u0002",
    "\u0959\u0966\u00079\u0002\u0002\u095a\u0966\u0007:\u0002\u0002\u095b",
    "\u0966\u0007;\u0002\u0002\u095c\u0966\u0007<\u0002\u0002\u095d\u0966",
    "\u0007>\u0002\u0002\u095e\u0966\u00076\u0002\u0002\u095f\u0966\u0007",
    "7\u0002\u0002\u0960\u0966\u0007?\u0002\u0002\u0961\u0966\u0007h\u0002",
    "\u0002\u0962\u0966\u0007k\u0002\u0002\u0963\u0966\u0007i\u0002\u0002",
    "\u0964\u0966\u0007j\u0002\u0002\u0965\u0956\u0003\u0002\u0002\u0002",
    "\u0965\u0957\u0003\u0002\u0002\u0002\u0965\u0958\u0003\u0002\u0002\u0002",
    "\u0965\u0959\u0003\u0002\u0002\u0002\u0965\u095a\u0003\u0002\u0002\u0002",
    "\u0965\u095b\u0003\u0002\u0002\u0002\u0965\u095c\u0003\u0002\u0002\u0002",
    "\u0965\u095d\u0003\u0002\u0002\u0002\u0965\u095e\u0003\u0002\u0002\u0002",
    "\u0965\u095f\u0003\u0002\u0002\u0002\u0965\u0960\u0003\u0002\u0002\u0002",
    "\u0965\u0961\u0003\u0002\u0002\u0002\u0965\u0962\u0003\u0002\u0002\u0002",
    "\u0965\u0963\u0003\u0002\u0002\u0002\u0965\u0964\u0003\u0002\u0002\u0002",
    "\u0966\u00c3\u0003\u0002\u0002\u0002\u0967\u096b\u0007\u00fa\u0002\u0002",
    "\u0968\u096b\u0005\u00c6d\u0002\u0969\u096b\u0005\u00caf\u0002\u096a",
    "\u0967\u0003\u0002\u0002\u0002\u096a\u0968\u0003\u0002\u0002\u0002\u096a",
    "\u0969\u0003\u0002\u0002\u0002\u096b\u00c5\u0003\u0002\u0002\u0002\u096c",
    "\u096d\u0007\u00fb\u0002\u0002\u096d\u00c7\u0003\u0002\u0002\u0002\u096e",
    "\u0970\u0007\u008d\u0002\u0002\u096f\u096e\u0003\u0002\u0002\u0002\u096f",
    "\u0970\u0003\u0002\u0002\u0002\u0970\u0971\u0003\u0002\u0002\u0002\u0971",
    "\u098b\u0007\u00f7\u0002\u0002\u0972\u0974\u0007\u008d\u0002\u0002\u0973",
    "\u0972\u0003\u0002\u0002\u0002\u0973\u0974\u0003\u0002\u0002\u0002\u0974",
    "\u0975\u0003\u0002\u0002\u0002\u0975\u098b\u0007\u00f6\u0002\u0002\u0976",
    "\u0978\u0007\u008d\u0002\u0002\u0977\u0976\u0003\u0002\u0002\u0002\u0977",
    "\u0978\u0003\u0002\u0002\u0002\u0978\u0979\u0003\u0002\u0002\u0002\u0979",
    "\u098b\u0007\u00f3\u0002\u0002\u097a\u097c\u0007\u008d\u0002\u0002\u097b",
    "\u097a\u0003\u0002\u0002\u0002\u097b\u097c\u0003\u0002\u0002\u0002\u097c",
    "\u097d\u0003\u0002\u0002\u0002\u097d\u098b\u0007\u00f4\u0002\u0002\u097e",
    "\u0980\u0007\u008d\u0002\u0002\u097f\u097e\u0003\u0002\u0002\u0002\u097f",
    "\u0980\u0003\u0002\u0002\u0002\u0980\u0981\u0003\u0002\u0002\u0002\u0981",
    "\u098b\u0007\u00f5\u0002\u0002\u0982\u0984\u0007\u008d\u0002\u0002\u0983",
    "\u0982\u0003\u0002\u0002\u0002\u0983\u0984\u0003\u0002\u0002\u0002\u0984",
    "\u0985\u0003\u0002\u0002\u0002\u0985\u098b\u0007\u00f8\u0002\u0002\u0986",
    "\u0988\u0007\u008d\u0002\u0002\u0987\u0986\u0003\u0002\u0002\u0002\u0987",
    "\u0988\u0003\u0002\u0002\u0002\u0988\u0989\u0003\u0002\u0002\u0002\u0989",
    "\u098b\u0007\u00f9\u0002\u0002\u098a\u096f\u0003\u0002\u0002\u0002\u098a",
    "\u0973\u0003\u0002\u0002\u0002\u098a\u0977\u0003\u0002\u0002\u0002\u098a",
    "\u097b\u0003\u0002\u0002\u0002\u098a\u097f\u0003\u0002\u0002\u0002\u098a",
    "\u0983\u0003\u0002\u0002\u0002\u098a\u0987\u0003\u0002\u0002\u0002\u098b",
    "\u00c9\u0003\u0002\u0002\u0002\u098c\u098d\t\u001c\u0002\u0002\u098d",
    "\u00cb\u0003\u0002\u0002\u0002\u0148\u00e6\u00eb\u00ee\u00f3\u0100\u0104",
    "\u010b\u0119\u011b\u011f\u0122\u0129\u013a\u013c\u0140\u0143\u014a\u0150",
    "\u0156\u0161\u0181\u0189\u018d\u0192\u0198\u01a0\u01a6\u01b3\u01b8\u01c1",
    "\u01c6\u01d6\u01dd\u01e1\u01e9\u01f0\u01f7\u0206\u020a\u0210\u0216\u0219",
    "\u021c\u0222\u0226\u022a\u022f\u0233\u023b\u023e\u0247\u024c\u0252\u0259",
    "\u025c\u0262\u026d\u0270\u0274\u0279\u027e\u0285\u0288\u028b\u0292\u0297",
    "\u029c\u029f\u02a8\u02b0\u02b6\u02ba\u02be\u02c2\u02c4\u02cd\u02d3\u02d8",
    "\u02db\u02df\u02e2\u02ec\u02ef\u02f3\u02f9\u02fc\u02ff\u0305\u030d\u0312",
    "\u0318\u031e\u0329\u0331\u0338\u0340\u0343\u034b\u034f\u0356\u03ca\u03d2",
    "\u03da\u03e3\u03ef\u03f3\u03f6\u03fc\u0406\u0412\u0417\u041d\u0429\u042b",
    "\u0430\u0434\u0439\u043e\u0441\u0446\u044a\u044f\u0451\u0455\u045e\u0466",
    "\u046d\u0474\u047d\u0482\u0491\u0498\u049b\u04a2\u04a6\u04ac\u04b4\u04bf",
    "\u04ca\u04d1\u04d7\u04dd\u04e6\u04e8\u04f1\u04f4\u04fd\u0500\u0509\u050c",
    "\u0515\u0518\u051b\u0520\u0522\u0525\u0531\u0538\u053f\u0542\u0544\u054f",
    "\u0553\u0557\u0563\u0566\u056a\u0574\u0578\u057a\u057d\u0581\u0584\u0588",
    "\u058e\u0592\u0596\u059b\u059e\u05a0\u05a5\u05aa\u05ad\u05b1\u05b4\u05b6",
    "\u05bb\u05c0\u05cd\u05d2\u05da\u05e0\u05e4\u05ed\u05fc\u0601\u060d\u0612",
    "\u061a\u061d\u0621\u062f\u063c\u0641\u0645\u0648\u064d\u0656\u0659\u065e",
    "\u0665\u0668\u0670\u0677\u067e\u0681\u0686\u068c\u0690\u0693\u0696\u069c",
    "\u06a1\u06a6\u06b8\u06ba\u06bd\u06c8\u06d1\u06d8\u06e0\u06e8\u06ec\u06f4",
    "\u06fc\u0702\u070a\u0716\u0719\u071f\u0723\u0725\u072e\u073a\u073c\u0743",
    "\u074a\u0750\u0756\u0758\u075d\u0764\u076a\u076e\u0770\u0777\u0786\u0788",
    "\u0790\u0792\u0796\u079e\u07a7\u07ad\u07b5\u07bb\u07c0\u07c5\u07cb\u07e0",
    "\u07e2\u07ea\u07ee\u07f7\u07fb\u080d\u0810\u0818\u0821\u0838\u0843\u084a",
    "\u084d\u0852\u0865\u0876\u0880\u0882\u088f\u0891\u089f\u08a6\u08a9\u08ad",
    "\u08b2\u08c3\u08c7\u08d0\u08d4\u08d6\u08dd\u08e4\u08eb\u08f3\u0900\u0910",
    "\u091a\u091d\u0926\u0929\u092b\u092e\u0931\u0943\u094c\u0953\u0965\u096a",
    "\u096f\u0973\u0977\u097b\u097f\u0983\u0987\u098a"].join("");
var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);
var decisionsToDFA = atn.decisionToState.map(function (ds, index) { return new antlr4.dfa.DFA(ds, index); });
var sharedContextCache = new antlr4.PredictionContextCache();
var literalNames = [null, "'('", "')'", "','", "'.'", "'/*+'", "'*/'",
    "'->'", "'['", "']'", "':'", "'SELECT'", "'FROM'",
    "'ADD'", "'AS'", "'ALL'", "'ANY'", "'DISTINCT'", "'WHERE'",
    "'GROUP'", "'BY'", "'GROUPING'", "'SETS'", "'CUBE'",
    "'ROLLUP'", "'ORDER'", "'HAVING'", "'LIMIT'", "'AT'",
    "'OR'", "'AND'", "'IN'", null, "'NO'", "'EXISTS'",
    "'BETWEEN'", "'LIKE'", null, "'IS'", "'NULL'", "'TRUE'",
    "'FALSE'", "'NULLS'", "'ASC'", "'DESC'", "'FOR'", "'INTERVAL'",
    "'CASE'", "'WHEN'", "'THEN'", "'ELSE'", "'END'", "'JOIN'",
    "'CROSS'", "'OUTER'", "'INNER'", "'LEFT'", "'SEMI'",
    "'RIGHT'", "'FULL'", "'NATURAL'", "'ON'", "'PIVOT'",
    "'LATERAL'", "'WINDOW'", "'OVER'", "'PARTITION'", "'RANGE'",
    "'ROWS'", "'UNBOUNDED'", "'PRECEDING'", "'FOLLOWING'",
    "'CURRENT'", "'FIRST'", "'AFTER'", "'LAST'", "'ROW'",
    "'WITH'", "'VALUES'", "'CREATE'", "'TABLE'", "'DIRECTORY'",
    "'VIEW'", "'REPLACE'", "'INSERT'", "'DELETE'", "'INTO'",
    "'DESCRIBE'", "'EXPLAIN'", "'FORMAT'", "'LOGICAL'",
    "'CODEGEN'", "'COST'", "'CAST'", "'SHOW'", "'TABLES'",
    "'COLUMNS'", "'COLUMN'", "'USE'", "'PARTITIONS'", "'FUNCTIONS'",
    "'DROP'", "'UNION'", "'EXCEPT'", "'MINUS'", "'INTERSECT'",
    "'TO'", "'TABLESAMPLE'", "'STRATIFY'", "'ALTER'", "'RENAME'",
    "'ARRAY'", "'MAP'", "'STRUCT'", "'COMMENT'", "'SET'",
    "'RESET'", "'DATA'", "'START'", "'TRANSACTION'", "'COMMIT'",
    "'ROLLBACK'", "'MACRO'", "'IGNORE'", "'BOTH'", "'LEADING'",
    "'TRAILING'", "'IF'", "'POSITION'", "'EXTRACT'", null,
    "'<=>'", "'<>'", "'!='", "'<'", null, "'>'", null,
    "'+'", "'-'", "'*'", "'/'", "'%'", "'DIV'", "'~'",
    "'&'", "'|'", "'||'", "'^'", "'PERCENT'", "'BUCKET'",
    "'OUT'", "'OF'", "'SORT'", "'CLUSTER'", "'DISTRIBUTE'",
    "'OVERWRITE'", "'TRANSFORM'", "'REDUCE'", "'USING'",
    "'SERDE'", "'SERDEPROPERTIES'", "'RECORDREADER'", "'RECORDWRITER'",
    "'DELIMITED'", "'FIELDS'", "'TERMINATED'", "'COLLECTION'",
    "'ITEMS'", "'KEYS'", "'ESCAPED'", "'LINES'", "'SEPARATED'",
    "'FUNCTION'", "'EXTENDED'", "'REFRESH'", "'CLEAR'",
    "'CACHE'", "'UNCACHE'", "'LAZY'", "'FORMATTED'", "'GLOBAL'",
    null, "'OPTIONS'", "'UNSET'", "'TBLPROPERTIES'", "'DBPROPERTIES'",
    "'BUCKETS'", "'SKEWED'", "'STORED'", "'DIRECTORIES'",
    "'LOCATION'", "'EXCHANGE'", "'ARCHIVE'", "'UNARCHIVE'",
    "'FILEFORMAT'", "'TOUCH'", "'COMPACT'", "'CONCATENATE'",
    "'CHANGE'", "'CASCADE'", "'RESTRICT'", "'CLUSTERED'",
    "'SORTED'", "'PURGE'", "'INPUTFORMAT'", "'OUTPUTFORMAT'",
    null, null, "'DFS'", "'TRUNCATE'", "'ANALYZE'", "'COMPUTE'",
    "'LIST'", "'STATISTICS'", "'PARTITIONED'", "'EXTERNAL'",
    "'DEFINED'", "'REVOKE'", "'GRANT'", "'LOCK'", "'UNLOCK'",
    "'MSCK'", "'REPAIR'", "'RECOVER'", "'EXPORT'", "'IMPORT'",
    "'LOAD'", "'ROLE'", "'ROLES'", "'COMPACTIONS'", "'PRINCIPALS'",
    "'TRANSACTIONS'", "'INDEX'", "'INDEXES'", "'LOCKS'",
    "'OPTION'", "'ANTI'", "'LOCAL'", "'INPATH'", null,
    null, null, null, null, null, null, null, null, null,
    null, "'/**/'"];
var symbolicNames = [null, null, null, null, null, null, null, null, null,
    null, null, "SELECT", "FROM", "ADD", "AS", "ALL",
    "ANY", "DISTINCT", "WHERE", "GROUP", "BY", "GROUPING",
    "SETS", "CUBE", "ROLLUP", "ORDER", "HAVING", "LIMIT",
    "AT", "OR", "AND", "IN", "NOT", "NO", "EXISTS", "BETWEEN",
    "LIKE", "RLIKE", "IS", "NULL", "TRUE", "FALSE", "NULLS",
    "ASC", "DESC", "FOR", "INTERVAL", "CASE", "WHEN",
    "THEN", "ELSE", "END", "JOIN", "CROSS", "OUTER", "INNER",
    "LEFT", "SEMI", "RIGHT", "FULL", "NATURAL", "ON",
    "PIVOT", "LATERAL", "WINDOW", "OVER", "PARTITION",
    "RANGE", "ROWS", "UNBOUNDED", "PRECEDING", "FOLLOWING",
    "CURRENT", "FIRST", "AFTER", "LAST", "ROW", "WITH",
    "VALUES", "CREATE", "TABLE", "DIRECTORY", "VIEW",
    "REPLACE", "INSERT", "DELETE", "INTO", "DESCRIBE",
    "EXPLAIN", "FORMAT", "LOGICAL", "CODEGEN", "COST",
    "CAST", "SHOW", "TABLES", "COLUMNS", "COLUMN", "USE",
    "PARTITIONS", "FUNCTIONS", "DROP", "UNION", "EXCEPT",
    "SETMINUS", "INTERSECT", "TO", "TABLESAMPLE", "STRATIFY",
    "ALTER", "RENAME", "ARRAY", "MAP", "STRUCT", "COMMENT",
    "SET", "RESET", "DATA", "START", "TRANSACTION", "COMMIT",
    "ROLLBACK", "MACRO", "IGNORE", "BOTH", "LEADING",
    "TRAILING", "IF", "POSITION", "EXTRACT", "EQ", "NSEQ",
    "NEQ", "NEQJ", "LT", "LTE", "GT", "GTE", "PLUS", "MINUS",
    "ASTERISK", "SLASH", "PERCENT", "DIV", "TILDE", "AMPERSAND",
    "PIPE", "CONCAT_PIPE", "HAT", "PERCENTLIT", "BUCKET",
    "OUT", "OF", "SORT", "CLUSTER", "DISTRIBUTE", "OVERWRITE",
    "TRANSFORM", "REDUCE", "USING", "SERDE", "SERDEPROPERTIES",
    "RECORDREADER", "RECORDWRITER", "DELIMITED", "FIELDS",
    "TERMINATED", "COLLECTION", "ITEMS", "KEYS", "ESCAPED",
    "LINES", "SEPARATED", "FUNCTION", "EXTENDED", "REFRESH",
    "CLEAR", "CACHE", "UNCACHE", "LAZY", "FORMATTED",
    "GLOBAL", "TEMPORARY", "OPTIONS", "UNSET", "TBLPROPERTIES",
    "DBPROPERTIES", "BUCKETS", "SKEWED", "STORED", "DIRECTORIES",
    "LOCATION", "EXCHANGE", "ARCHIVE", "UNARCHIVE", "FILEFORMAT",
    "TOUCH", "COMPACT", "CONCATENATE", "CHANGE", "CASCADE",
    "RESTRICT", "CLUSTERED", "SORTED", "PURGE", "INPUTFORMAT",
    "OUTPUTFORMAT", "DATABASE", "DATABASES", "DFS", "TRUNCATE",
    "ANALYZE", "COMPUTE", "LIST", "STATISTICS", "PARTITIONED",
    "EXTERNAL", "DEFINED", "REVOKE", "GRANT", "LOCK",
    "UNLOCK", "MSCK", "REPAIR", "RECOVER", "EXPORT", "IMPORT",
    "LOAD", "ROLE", "ROLES", "COMPACTIONS", "PRINCIPALS",
    "TRANSACTIONS", "INDEX", "INDEXES", "LOCKS", "OPTION",
    "ANTI", "LOCAL", "INPATH", "STRING", "BIGINT_LITERAL",
    "SMALLINT_LITERAL", "TINYINT_LITERAL", "INTEGER_VALUE",
    "DECIMAL_VALUE", "DOUBLE_LITERAL", "BIGDECIMAL_LITERAL",
    "IDENTIFIER", "BACKQUOTED_IDENTIFIER", "SIMPLE_COMMENT",
    "BRACKETED_EMPTY_COMMENT", "BRACKETED_COMMENT", "WS",
    "UNRECOGNIZED"];
var ruleNames = ["singleStatement", "singleExpression", "singleTableIdentifier",
    "singleFunctionIdentifier", "singleDataType", "singleTableSchema",
    "statement", "unsupportedHiveNativeCommands", "createTableHeader",
    "bucketSpec", "skewSpec", "locationSpec", "query", "insertInto",
    "partitionSpecLocation", "partitionSpec", "partitionVal",
    "describeFuncName", "describeColName", "ctes", "namedQuery",
    "tableProvider", "tablePropertyList", "tableProperty",
    "tablePropertyKey", "tablePropertyValue", "constantList",
    "nestedConstantList", "createFileFormat", "fileFormat",
    "storageHandler", "resource", "queryNoWith", "queryOrganization",
    "multiInsertQueryBody", "queryTerm", "queryPrimary",
    "sortItem", "querySpecification", "hint", "hintStatement",
    "fromClause", "aggregation", "groupingSet", "pivotClause",
    "pivotColumn", "pivotValue", "lateralView", "setQuantifier",
    "relation", "joinRelation", "joinType", "joinCriteria",
    "sample", "sampleMethod", "identifierList", "identifierSeq",
    "orderedIdentifierList", "orderedIdentifier", "identifierCommentList",
    "identifierComment", "relationPrimary", "inlineTable",
    "functionTable", "tableAlias", "rowFormat", "tableIdentifier",
    "functionIdentifier", "namedExpression", "namedExpressionSeq",
    "expression", "booleanExpression", "predicate", "valueExpression",
    "primaryExpression", "constant", "comparisonOperator",
    "arithmeticOperator", "predicateOperator", "booleanValue",
    "interval", "intervalField", "intervalValue", "colPosition",
    "dataType", "colTypeList", "colType", "complexColTypeList",
    "complexColType", "whenClause", "windows", "namedWindow",
    "windowSpec", "windowFrame", "frameBound", "qualifiedName",
    "identifier", "strictIdentifier", "quotedIdentifier",
    "number", "nonReserved"];
function sparkParser(input) {
    antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}
sparkParser.prototype = Object.create(antlr4.Parser.prototype);
sparkParser.prototype.constructor = sparkParser;
Object.defineProperty(sparkParser.prototype, "atn", {
    get: function () {
        return atn;
    }
});
sparkParser.EOF = antlr4.Token.EOF;
sparkParser.T__0 = 1;
sparkParser.T__1 = 2;
sparkParser.T__2 = 3;
sparkParser.T__3 = 4;
sparkParser.T__4 = 5;
sparkParser.T__5 = 6;
sparkParser.T__6 = 7;
sparkParser.T__7 = 8;
sparkParser.T__8 = 9;
sparkParser.T__9 = 10;
sparkParser.SELECT = 11;
sparkParser.FROM = 12;
sparkParser.ADD = 13;
sparkParser.AS = 14;
sparkParser.ALL = 15;
sparkParser.ANY = 16;
sparkParser.DISTINCT = 17;
sparkParser.WHERE = 18;
sparkParser.GROUP = 19;
sparkParser.BY = 20;
sparkParser.GROUPING = 21;
sparkParser.SETS = 22;
sparkParser.CUBE = 23;
sparkParser.ROLLUP = 24;
sparkParser.ORDER = 25;
sparkParser.HAVING = 26;
sparkParser.LIMIT = 27;
sparkParser.AT = 28;
sparkParser.OR = 29;
sparkParser.AND = 30;
sparkParser.IN = 31;
sparkParser.NOT = 32;
sparkParser.NO = 33;
sparkParser.EXISTS = 34;
sparkParser.BETWEEN = 35;
sparkParser.LIKE = 36;
sparkParser.RLIKE = 37;
sparkParser.IS = 38;
sparkParser.NULL = 39;
sparkParser.TRUE = 40;
sparkParser.FALSE = 41;
sparkParser.NULLS = 42;
sparkParser.ASC = 43;
sparkParser.DESC = 44;
sparkParser.FOR = 45;
sparkParser.INTERVAL = 46;
sparkParser.CASE = 47;
sparkParser.WHEN = 48;
sparkParser.THEN = 49;
sparkParser.ELSE = 50;
sparkParser.END = 51;
sparkParser.JOIN = 52;
sparkParser.CROSS = 53;
sparkParser.OUTER = 54;
sparkParser.INNER = 55;
sparkParser.LEFT = 56;
sparkParser.SEMI = 57;
sparkParser.RIGHT = 58;
sparkParser.FULL = 59;
sparkParser.NATURAL = 60;
sparkParser.ON = 61;
sparkParser.PIVOT = 62;
sparkParser.LATERAL = 63;
sparkParser.WINDOW = 64;
sparkParser.OVER = 65;
sparkParser.PARTITION = 66;
sparkParser.RANGE = 67;
sparkParser.ROWS = 68;
sparkParser.UNBOUNDED = 69;
sparkParser.PRECEDING = 70;
sparkParser.FOLLOWING = 71;
sparkParser.CURRENT = 72;
sparkParser.FIRST = 73;
sparkParser.AFTER = 74;
sparkParser.LAST = 75;
sparkParser.ROW = 76;
sparkParser.WITH = 77;
sparkParser.VALUES = 78;
sparkParser.CREATE = 79;
sparkParser.TABLE = 80;
sparkParser.DIRECTORY = 81;
sparkParser.VIEW = 82;
sparkParser.REPLACE = 83;
sparkParser.INSERT = 84;
sparkParser.DELETE = 85;
sparkParser.INTO = 86;
sparkParser.DESCRIBE = 87;
sparkParser.EXPLAIN = 88;
sparkParser.FORMAT = 89;
sparkParser.LOGICAL = 90;
sparkParser.CODEGEN = 91;
sparkParser.COST = 92;
sparkParser.CAST = 93;
sparkParser.SHOW = 94;
sparkParser.TABLES = 95;
sparkParser.COLUMNS = 96;
sparkParser.COLUMN = 97;
sparkParser.USE = 98;
sparkParser.PARTITIONS = 99;
sparkParser.FUNCTIONS = 100;
sparkParser.DROP = 101;
sparkParser.UNION = 102;
sparkParser.EXCEPT = 103;
sparkParser.SETMINUS = 104;
sparkParser.INTERSECT = 105;
sparkParser.TO = 106;
sparkParser.TABLESAMPLE = 107;
sparkParser.STRATIFY = 108;
sparkParser.ALTER = 109;
sparkParser.RENAME = 110;
sparkParser.ARRAY = 111;
sparkParser.MAP = 112;
sparkParser.STRUCT = 113;
sparkParser.COMMENT = 114;
sparkParser.SET = 115;
sparkParser.RESET = 116;
sparkParser.DATA = 117;
sparkParser.START = 118;
sparkParser.TRANSACTION = 119;
sparkParser.COMMIT = 120;
sparkParser.ROLLBACK = 121;
sparkParser.MACRO = 122;
sparkParser.IGNORE = 123;
sparkParser.BOTH = 124;
sparkParser.LEADING = 125;
sparkParser.TRAILING = 126;
sparkParser.IF = 127;
sparkParser.POSITION = 128;
sparkParser.EXTRACT = 129;
sparkParser.EQ = 130;
sparkParser.NSEQ = 131;
sparkParser.NEQ = 132;
sparkParser.NEQJ = 133;
sparkParser.LT = 134;
sparkParser.LTE = 135;
sparkParser.GT = 136;
sparkParser.GTE = 137;
sparkParser.PLUS = 138;
sparkParser.MINUS = 139;
sparkParser.ASTERISK = 140;
sparkParser.SLASH = 141;
sparkParser.PERCENT = 142;
sparkParser.DIV = 143;
sparkParser.TILDE = 144;
sparkParser.AMPERSAND = 145;
sparkParser.PIPE = 146;
sparkParser.CONCAT_PIPE = 147;
sparkParser.HAT = 148;
sparkParser.PERCENTLIT = 149;
sparkParser.BUCKET = 150;
sparkParser.OUT = 151;
sparkParser.OF = 152;
sparkParser.SORT = 153;
sparkParser.CLUSTER = 154;
sparkParser.DISTRIBUTE = 155;
sparkParser.OVERWRITE = 156;
sparkParser.TRANSFORM = 157;
sparkParser.REDUCE = 158;
sparkParser.USING = 159;
sparkParser.SERDE = 160;
sparkParser.SERDEPROPERTIES = 161;
sparkParser.RECORDREADER = 162;
sparkParser.RECORDWRITER = 163;
sparkParser.DELIMITED = 164;
sparkParser.FIELDS = 165;
sparkParser.TERMINATED = 166;
sparkParser.COLLECTION = 167;
sparkParser.ITEMS = 168;
sparkParser.KEYS = 169;
sparkParser.ESCAPED = 170;
sparkParser.LINES = 171;
sparkParser.SEPARATED = 172;
sparkParser.FUNCTION = 173;
sparkParser.EXTENDED = 174;
sparkParser.REFRESH = 175;
sparkParser.CLEAR = 176;
sparkParser.CACHE = 177;
sparkParser.UNCACHE = 178;
sparkParser.LAZY = 179;
sparkParser.FORMATTED = 180;
sparkParser.GLOBAL = 181;
sparkParser.TEMPORARY = 182;
sparkParser.OPTIONS = 183;
sparkParser.UNSET = 184;
sparkParser.TBLPROPERTIES = 185;
sparkParser.DBPROPERTIES = 186;
sparkParser.BUCKETS = 187;
sparkParser.SKEWED = 188;
sparkParser.STORED = 189;
sparkParser.DIRECTORIES = 190;
sparkParser.LOCATION = 191;
sparkParser.EXCHANGE = 192;
sparkParser.ARCHIVE = 193;
sparkParser.UNARCHIVE = 194;
sparkParser.FILEFORMAT = 195;
sparkParser.TOUCH = 196;
sparkParser.COMPACT = 197;
sparkParser.CONCATENATE = 198;
sparkParser.CHANGE = 199;
sparkParser.CASCADE = 200;
sparkParser.RESTRICT = 201;
sparkParser.CLUSTERED = 202;
sparkParser.SORTED = 203;
sparkParser.PURGE = 204;
sparkParser.INPUTFORMAT = 205;
sparkParser.OUTPUTFORMAT = 206;
sparkParser.DATABASE = 207;
sparkParser.DATABASES = 208;
sparkParser.DFS = 209;
sparkParser.TRUNCATE = 210;
sparkParser.ANALYZE = 211;
sparkParser.COMPUTE = 212;
sparkParser.LIST = 213;
sparkParser.STATISTICS = 214;
sparkParser.PARTITIONED = 215;
sparkParser.EXTERNAL = 216;
sparkParser.DEFINED = 217;
sparkParser.REVOKE = 218;
sparkParser.GRANT = 219;
sparkParser.LOCK = 220;
sparkParser.UNLOCK = 221;
sparkParser.MSCK = 222;
sparkParser.REPAIR = 223;
sparkParser.RECOVER = 224;
sparkParser.EXPORT = 225;
sparkParser.IMPORT = 226;
sparkParser.LOAD = 227;
sparkParser.ROLE = 228;
sparkParser.ROLES = 229;
sparkParser.COMPACTIONS = 230;
sparkParser.PRINCIPALS = 231;
sparkParser.TRANSACTIONS = 232;
sparkParser.INDEX = 233;
sparkParser.INDEXES = 234;
sparkParser.LOCKS = 235;
sparkParser.OPTION = 236;
sparkParser.ANTI = 237;
sparkParser.LOCAL = 238;
sparkParser.INPATH = 239;
sparkParser.STRING = 240;
sparkParser.BIGINT_LITERAL = 241;
sparkParser.SMALLINT_LITERAL = 242;
sparkParser.TINYINT_LITERAL = 243;
sparkParser.INTEGER_VALUE = 244;
sparkParser.DECIMAL_VALUE = 245;
sparkParser.DOUBLE_LITERAL = 246;
sparkParser.BIGDECIMAL_LITERAL = 247;
sparkParser.IDENTIFIER = 248;
sparkParser.BACKQUOTED_IDENTIFIER = 249;
sparkParser.SIMPLE_COMMENT = 250;
sparkParser.BRACKETED_EMPTY_COMMENT = 251;
sparkParser.BRACKETED_COMMENT = 252;
sparkParser.WS = 253;
sparkParser.UNRECOGNIZED = 254;
sparkParser.RULE_singleStatement = 0;
sparkParser.RULE_singleExpression = 1;
sparkParser.RULE_singleTableIdentifier = 2;
sparkParser.RULE_singleFunctionIdentifier = 3;
sparkParser.RULE_singleDataType = 4;
sparkParser.RULE_singleTableSchema = 5;
sparkParser.RULE_statement = 6;
sparkParser.RULE_unsupportedHiveNativeCommands = 7;
sparkParser.RULE_createTableHeader = 8;
sparkParser.RULE_bucketSpec = 9;
sparkParser.RULE_skewSpec = 10;
sparkParser.RULE_locationSpec = 11;
sparkParser.RULE_query = 12;
sparkParser.RULE_insertInto = 13;
sparkParser.RULE_partitionSpecLocation = 14;
sparkParser.RULE_partitionSpec = 15;
sparkParser.RULE_partitionVal = 16;
sparkParser.RULE_describeFuncName = 17;
sparkParser.RULE_describeColName = 18;
sparkParser.RULE_ctes = 19;
sparkParser.RULE_namedQuery = 20;
sparkParser.RULE_tableProvider = 21;
sparkParser.RULE_tablePropertyList = 22;
sparkParser.RULE_tableProperty = 23;
sparkParser.RULE_tablePropertyKey = 24;
sparkParser.RULE_tablePropertyValue = 25;
sparkParser.RULE_constantList = 26;
sparkParser.RULE_nestedConstantList = 27;
sparkParser.RULE_createFileFormat = 28;
sparkParser.RULE_fileFormat = 29;
sparkParser.RULE_storageHandler = 30;
sparkParser.RULE_resource = 31;
sparkParser.RULE_queryNoWith = 32;
sparkParser.RULE_queryOrganization = 33;
sparkParser.RULE_multiInsertQueryBody = 34;
sparkParser.RULE_queryTerm = 35;
sparkParser.RULE_queryPrimary = 36;
sparkParser.RULE_sortItem = 37;
sparkParser.RULE_querySpecification = 38;
sparkParser.RULE_hint = 39;
sparkParser.RULE_hintStatement = 40;
sparkParser.RULE_fromClause = 41;
sparkParser.RULE_aggregation = 42;
sparkParser.RULE_groupingSet = 43;
sparkParser.RULE_pivotClause = 44;
sparkParser.RULE_pivotColumn = 45;
sparkParser.RULE_pivotValue = 46;
sparkParser.RULE_lateralView = 47;
sparkParser.RULE_setQuantifier = 48;
sparkParser.RULE_relation = 49;
sparkParser.RULE_joinRelation = 50;
sparkParser.RULE_joinType = 51;
sparkParser.RULE_joinCriteria = 52;
sparkParser.RULE_sample = 53;
sparkParser.RULE_sampleMethod = 54;
sparkParser.RULE_identifierList = 55;
sparkParser.RULE_identifierSeq = 56;
sparkParser.RULE_orderedIdentifierList = 57;
sparkParser.RULE_orderedIdentifier = 58;
sparkParser.RULE_identifierCommentList = 59;
sparkParser.RULE_identifierComment = 60;
sparkParser.RULE_relationPrimary = 61;
sparkParser.RULE_inlineTable = 62;
sparkParser.RULE_functionTable = 63;
sparkParser.RULE_tableAlias = 64;
sparkParser.RULE_rowFormat = 65;
sparkParser.RULE_tableIdentifier = 66;
sparkParser.RULE_functionIdentifier = 67;
sparkParser.RULE_namedExpression = 68;
sparkParser.RULE_namedExpressionSeq = 69;
sparkParser.RULE_expression = 70;
sparkParser.RULE_booleanExpression = 71;
sparkParser.RULE_predicate = 72;
sparkParser.RULE_valueExpression = 73;
sparkParser.RULE_primaryExpression = 74;
sparkParser.RULE_constant = 75;
sparkParser.RULE_comparisonOperator = 76;
sparkParser.RULE_arithmeticOperator = 77;
sparkParser.RULE_predicateOperator = 78;
sparkParser.RULE_booleanValue = 79;
sparkParser.RULE_interval = 80;
sparkParser.RULE_intervalField = 81;
sparkParser.RULE_intervalValue = 82;
sparkParser.RULE_colPosition = 83;
sparkParser.RULE_dataType = 84;
sparkParser.RULE_colTypeList = 85;
sparkParser.RULE_colType = 86;
sparkParser.RULE_complexColTypeList = 87;
sparkParser.RULE_complexColType = 88;
sparkParser.RULE_whenClause = 89;
sparkParser.RULE_windows = 90;
sparkParser.RULE_namedWindow = 91;
sparkParser.RULE_windowSpec = 92;
sparkParser.RULE_windowFrame = 93;
sparkParser.RULE_frameBound = 94;
sparkParser.RULE_qualifiedName = 95;
sparkParser.RULE_identifier = 96;
sparkParser.RULE_strictIdentifier = 97;
sparkParser.RULE_quotedIdentifier = 98;
sparkParser.RULE_number = 99;
sparkParser.RULE_nonReserved = 100;
function SingleStatementContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_singleStatement;
    return this;
}
SingleStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleStatementContext.prototype.constructor = SingleStatementContext;
SingleStatementContext.prototype.statement = function () {
    return this.getTypedRuleContext(StatementContext, 0);
};
SingleStatementContext.prototype.EOF = function () {
    return this.getToken(sparkParser.EOF, 0);
};
SingleStatementContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterSingleStatement(this);
    }
};
SingleStatementContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitSingleStatement(this);
    }
};
SingleStatementContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitSingleStatement(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.SingleStatementContext = SingleStatementContext;
sparkParser.prototype.singleStatement = function () {
    var localctx = new SingleStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, sparkParser.RULE_singleStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 202;
        this.statement();
        this.state = 203;
        this.match(sparkParser.EOF);
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function SingleExpressionContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_singleExpression;
    return this;
}
SingleExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleExpressionContext.prototype.constructor = SingleExpressionContext;
SingleExpressionContext.prototype.namedExpression = function () {
    return this.getTypedRuleContext(NamedExpressionContext, 0);
};
SingleExpressionContext.prototype.EOF = function () {
    return this.getToken(sparkParser.EOF, 0);
};
SingleExpressionContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterSingleExpression(this);
    }
};
SingleExpressionContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitSingleExpression(this);
    }
};
SingleExpressionContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitSingleExpression(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.SingleExpressionContext = SingleExpressionContext;
sparkParser.prototype.singleExpression = function () {
    var localctx = new SingleExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, sparkParser.RULE_singleExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 205;
        this.namedExpression();
        this.state = 206;
        this.match(sparkParser.EOF);
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function SingleTableIdentifierContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_singleTableIdentifier;
    return this;
}
SingleTableIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleTableIdentifierContext.prototype.constructor = SingleTableIdentifierContext;
SingleTableIdentifierContext.prototype.tableIdentifier = function () {
    return this.getTypedRuleContext(TableIdentifierContext, 0);
};
SingleTableIdentifierContext.prototype.EOF = function () {
    return this.getToken(sparkParser.EOF, 0);
};
SingleTableIdentifierContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterSingleTableIdentifier(this);
    }
};
SingleTableIdentifierContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitSingleTableIdentifier(this);
    }
};
SingleTableIdentifierContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitSingleTableIdentifier(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.SingleTableIdentifierContext = SingleTableIdentifierContext;
sparkParser.prototype.singleTableIdentifier = function () {
    var localctx = new SingleTableIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, sparkParser.RULE_singleTableIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 208;
        this.tableIdentifier();
        this.state = 209;
        this.match(sparkParser.EOF);
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function SingleFunctionIdentifierContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_singleFunctionIdentifier;
    return this;
}
SingleFunctionIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleFunctionIdentifierContext.prototype.constructor = SingleFunctionIdentifierContext;
SingleFunctionIdentifierContext.prototype.functionIdentifier = function () {
    return this.getTypedRuleContext(FunctionIdentifierContext, 0);
};
SingleFunctionIdentifierContext.prototype.EOF = function () {
    return this.getToken(sparkParser.EOF, 0);
};
SingleFunctionIdentifierContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterSingleFunctionIdentifier(this);
    }
};
SingleFunctionIdentifierContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitSingleFunctionIdentifier(this);
    }
};
SingleFunctionIdentifierContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitSingleFunctionIdentifier(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.SingleFunctionIdentifierContext = SingleFunctionIdentifierContext;
sparkParser.prototype.singleFunctionIdentifier = function () {
    var localctx = new SingleFunctionIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, sparkParser.RULE_singleFunctionIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 211;
        this.functionIdentifier();
        this.state = 212;
        this.match(sparkParser.EOF);
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function SingleDataTypeContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_singleDataType;
    return this;
}
SingleDataTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleDataTypeContext.prototype.constructor = SingleDataTypeContext;
SingleDataTypeContext.prototype.dataType = function () {
    return this.getTypedRuleContext(DataTypeContext, 0);
};
SingleDataTypeContext.prototype.EOF = function () {
    return this.getToken(sparkParser.EOF, 0);
};
SingleDataTypeContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterSingleDataType(this);
    }
};
SingleDataTypeContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitSingleDataType(this);
    }
};
SingleDataTypeContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitSingleDataType(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.SingleDataTypeContext = SingleDataTypeContext;
sparkParser.prototype.singleDataType = function () {
    var localctx = new SingleDataTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, sparkParser.RULE_singleDataType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 214;
        this.dataType();
        this.state = 215;
        this.match(sparkParser.EOF);
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function SingleTableSchemaContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_singleTableSchema;
    return this;
}
SingleTableSchemaContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleTableSchemaContext.prototype.constructor = SingleTableSchemaContext;
SingleTableSchemaContext.prototype.colTypeList = function () {
    return this.getTypedRuleContext(ColTypeListContext, 0);
};
SingleTableSchemaContext.prototype.EOF = function () {
    return this.getToken(sparkParser.EOF, 0);
};
SingleTableSchemaContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterSingleTableSchema(this);
    }
};
SingleTableSchemaContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitSingleTableSchema(this);
    }
};
SingleTableSchemaContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitSingleTableSchema(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.SingleTableSchemaContext = SingleTableSchemaContext;
sparkParser.prototype.singleTableSchema = function () {
    var localctx = new SingleTableSchemaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, sparkParser.RULE_singleTableSchema);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 217;
        this.colTypeList();
        this.state = 218;
        this.match(sparkParser.EOF);
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function StatementContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_statement;
    return this;
}
StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;
StatementContext.prototype.copyFrom = function (ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};
function ExplainContext(parser, ctx) {
    StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
ExplainContext.prototype = Object.create(StatementContext.prototype);
ExplainContext.prototype.constructor = ExplainContext;
sparkParser.ExplainContext = ExplainContext;
ExplainContext.prototype.EXPLAIN = function () {
    return this.getToken(sparkParser.EXPLAIN, 0);
};
ExplainContext.prototype.statement = function () {
    return this.getTypedRuleContext(StatementContext, 0);
};
ExplainContext.prototype.LOGICAL = function () {
    return this.getToken(sparkParser.LOGICAL, 0);
};
ExplainContext.prototype.FORMATTED = function () {
    return this.getToken(sparkParser.FORMATTED, 0);
};
ExplainContext.prototype.EXTENDED = function () {
    return this.getToken(sparkParser.EXTENDED, 0);
};
ExplainContext.prototype.CODEGEN = function () {
    return this.getToken(sparkParser.CODEGEN, 0);
};
ExplainContext.prototype.COST = function () {
    return this.getToken(sparkParser.COST, 0);
};
ExplainContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterExplain(this);
    }
};
ExplainContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitExplain(this);
    }
};
ExplainContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitExplain(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function DropDatabaseContext(parser, ctx) {
    StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
DropDatabaseContext.prototype = Object.create(StatementContext.prototype);
DropDatabaseContext.prototype.constructor = DropDatabaseContext;
sparkParser.DropDatabaseContext = DropDatabaseContext;
DropDatabaseContext.prototype.DROP = function () {
    return this.getToken(sparkParser.DROP, 0);
};
DropDatabaseContext.prototype.DATABASE = function () {
    return this.getToken(sparkParser.DATABASE, 0);
};
DropDatabaseContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};
DropDatabaseContext.prototype.IF = function () {
    return this.getToken(sparkParser.IF, 0);
};
DropDatabaseContext.prototype.EXISTS = function () {
    return this.getToken(sparkParser.EXISTS, 0);
};
DropDatabaseContext.prototype.RESTRICT = function () {
    return this.getToken(sparkParser.RESTRICT, 0);
};
DropDatabaseContext.prototype.CASCADE = function () {
    return this.getToken(sparkParser.CASCADE, 0);
};
DropDatabaseContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterDropDatabase(this);
    }
};
DropDatabaseContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitDropDatabase(this);
    }
};
DropDatabaseContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitDropDatabase(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function ResetConfigurationContext(parser, ctx) {
    StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
ResetConfigurationContext.prototype = Object.create(StatementContext.prototype);
ResetConfigurationContext.prototype.constructor = ResetConfigurationContext;
sparkParser.ResetConfigurationContext = ResetConfigurationContext;
ResetConfigurationContext.prototype.RESET = function () {
    return this.getToken(sparkParser.RESET, 0);
};
ResetConfigurationContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterResetConfiguration(this);
    }
};
ResetConfigurationContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitResetConfiguration(this);
    }
};
ResetConfigurationContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitResetConfiguration(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function DescribeDatabaseContext(parser, ctx) {
    StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
DescribeDatabaseContext.prototype = Object.create(StatementContext.prototype);
DescribeDatabaseContext.prototype.constructor = DescribeDatabaseContext;
sparkParser.DescribeDatabaseContext = DescribeDatabaseContext;
DescribeDatabaseContext.prototype.DATABASE = function () {
    return this.getToken(sparkParser.DATABASE, 0);
};
DescribeDatabaseContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};
DescribeDatabaseContext.prototype.DESC = function () {
    return this.getToken(sparkParser.DESC, 0);
};
DescribeDatabaseContext.prototype.DESCRIBE = function () {
    return this.getToken(sparkParser.DESCRIBE, 0);
};
DescribeDatabaseContext.prototype.EXTENDED = function () {
    return this.getToken(sparkParser.EXTENDED, 0);
};
DescribeDatabaseContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterDescribeDatabase(this);
    }
};
DescribeDatabaseContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitDescribeDatabase(this);
    }
};
DescribeDatabaseContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitDescribeDatabase(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function AlterViewQueryContext(parser, ctx) {
    StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
AlterViewQueryContext.prototype = Object.create(StatementContext.prototype);
AlterViewQueryContext.prototype.constructor = AlterViewQueryContext;
sparkParser.AlterViewQueryContext = AlterViewQueryContext;
AlterViewQueryContext.prototype.ALTER = function () {
    return this.getToken(sparkParser.ALTER, 0);
};
AlterViewQueryContext.prototype.VIEW = function () {
    return this.getToken(sparkParser.VIEW, 0);
};
AlterViewQueryContext.prototype.tableIdentifier = function () {
    return this.getTypedRuleContext(TableIdentifierContext, 0);
};
AlterViewQueryContext.prototype.query = function () {
    return this.getTypedRuleContext(QueryContext, 0);
};
AlterViewQueryContext.prototype.AS = function () {
    return this.getToken(sparkParser.AS, 0);
};
AlterViewQueryContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterAlterViewQuery(this);
    }
};
AlterViewQueryContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitAlterViewQuery(this);
    }
};
AlterViewQueryContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitAlterViewQuery(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function UseContext(parser, ctx) {
    StatementContext.call(this, parser);
    this.db = null; // IdentifierContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
UseContext.prototype = Object.create(StatementContext.prototype);
UseContext.prototype.constructor = UseContext;
sparkParser.UseContext = UseContext;
UseContext.prototype.USE = function () {
    return this.getToken(sparkParser.USE, 0);
};
UseContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};
UseContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterUse(this);
    }
};
UseContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitUse(this);
    }
};
UseContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitUse(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function CreateTempViewUsingContext(parser, ctx) {
    StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
CreateTempViewUsingContext.prototype = Object.create(StatementContext.prototype);
CreateTempViewUsingContext.prototype.constructor = CreateTempViewUsingContext;
sparkParser.CreateTempViewUsingContext = CreateTempViewUsingContext;
CreateTempViewUsingContext.prototype.CREATE = function () {
    return this.getToken(sparkParser.CREATE, 0);
};
CreateTempViewUsingContext.prototype.TEMPORARY = function () {
    return this.getToken(sparkParser.TEMPORARY, 0);
};
CreateTempViewUsingContext.prototype.VIEW = function () {
    return this.getToken(sparkParser.VIEW, 0);
};
CreateTempViewUsingContext.prototype.tableIdentifier = function () {
    return this.getTypedRuleContext(TableIdentifierContext, 0);
};
CreateTempViewUsingContext.prototype.tableProvider = function () {
    return this.getTypedRuleContext(TableProviderContext, 0);
};
CreateTempViewUsingContext.prototype.OR = function () {
    return this.getToken(sparkParser.OR, 0);
};
CreateTempViewUsingContext.prototype.REPLACE = function () {
    return this.getToken(sparkParser.REPLACE, 0);
};
CreateTempViewUsingContext.prototype.GLOBAL = function () {
    return this.getToken(sparkParser.GLOBAL, 0);
};
CreateTempViewUsingContext.prototype.colTypeList = function () {
    return this.getTypedRuleContext(ColTypeListContext, 0);
};
CreateTempViewUsingContext.prototype.OPTIONS = function () {
    return this.getToken(sparkParser.OPTIONS, 0);
};
CreateTempViewUsingContext.prototype.tablePropertyList = function () {
    return this.getTypedRuleContext(TablePropertyListContext, 0);
};
CreateTempViewUsingContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterCreateTempViewUsing(this);
    }
};
CreateTempViewUsingContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitCreateTempViewUsing(this);
    }
};
CreateTempViewUsingContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitCreateTempViewUsing(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function RenameTableContext(parser, ctx) {
    StatementContext.call(this, parser);
    this.from = null; // TableIdentifierContext;
    this.to = null; // TableIdentifierContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
RenameTableContext.prototype = Object.create(StatementContext.prototype);
RenameTableContext.prototype.constructor = RenameTableContext;
sparkParser.RenameTableContext = RenameTableContext;
RenameTableContext.prototype.ALTER = function () {
    return this.getToken(sparkParser.ALTER, 0);
};
RenameTableContext.prototype.RENAME = function () {
    return this.getToken(sparkParser.RENAME, 0);
};
RenameTableContext.prototype.TO = function () {
    return this.getToken(sparkParser.TO, 0);
};
RenameTableContext.prototype.TABLE = function () {
    return this.getToken(sparkParser.TABLE, 0);
};
RenameTableContext.prototype.VIEW = function () {
    return this.getToken(sparkParser.VIEW, 0);
};
RenameTableContext.prototype.tableIdentifier = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(TableIdentifierContext);
    }
    else {
        return this.getTypedRuleContext(TableIdentifierContext, i);
    }
};
RenameTableContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterRenameTable(this);
    }
};
RenameTableContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitRenameTable(this);
    }
};
RenameTableContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitRenameTable(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function FailNativeCommandContext(parser, ctx) {
    StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
FailNativeCommandContext.prototype = Object.create(StatementContext.prototype);
FailNativeCommandContext.prototype.constructor = FailNativeCommandContext;
sparkParser.FailNativeCommandContext = FailNativeCommandContext;
FailNativeCommandContext.prototype.SET = function () {
    return this.getToken(sparkParser.SET, 0);
};
FailNativeCommandContext.prototype.ROLE = function () {
    return this.getToken(sparkParser.ROLE, 0);
};
FailNativeCommandContext.prototype.unsupportedHiveNativeCommands = function () {
    return this.getTypedRuleContext(UnsupportedHiveNativeCommandsContext, 0);
};
FailNativeCommandContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterFailNativeCommand(this);
    }
};
FailNativeCommandContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitFailNativeCommand(this);
    }
};
FailNativeCommandContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitFailNativeCommand(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function ClearCacheContext(parser, ctx) {
    StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
ClearCacheContext.prototype = Object.create(StatementContext.prototype);
ClearCacheContext.prototype.constructor = ClearCacheContext;
sparkParser.ClearCacheContext = ClearCacheContext;
ClearCacheContext.prototype.CLEAR = function () {
    return this.getToken(sparkParser.CLEAR, 0);
};
ClearCacheContext.prototype.CACHE = function () {
    return this.getToken(sparkParser.CACHE, 0);
};
ClearCacheContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterClearCache(this);
    }
};
ClearCacheContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitClearCache(this);
    }
};
ClearCacheContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitClearCache(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function ShowTablesContext(parser, ctx) {
    StatementContext.call(this, parser);
    this.db = null; // IdentifierContext;
    this.pattern = null; // Token;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
ShowTablesContext.prototype = Object.create(StatementContext.prototype);
ShowTablesContext.prototype.constructor = ShowTablesContext;
sparkParser.ShowTablesContext = ShowTablesContext;
ShowTablesContext.prototype.SHOW = function () {
    return this.getToken(sparkParser.SHOW, 0);
};
ShowTablesContext.prototype.TABLES = function () {
    return this.getToken(sparkParser.TABLES, 0);
};
ShowTablesContext.prototype.FROM = function () {
    return this.getToken(sparkParser.FROM, 0);
};
ShowTablesContext.prototype.IN = function () {
    return this.getToken(sparkParser.IN, 0);
};
ShowTablesContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};
ShowTablesContext.prototype.STRING = function () {
    return this.getToken(sparkParser.STRING, 0);
};
ShowTablesContext.prototype.LIKE = function () {
    return this.getToken(sparkParser.LIKE, 0);
};
ShowTablesContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterShowTables(this);
    }
};
ShowTablesContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitShowTables(this);
    }
};
ShowTablesContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitShowTables(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function RecoverPartitionsContext(parser, ctx) {
    StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
RecoverPartitionsContext.prototype = Object.create(StatementContext.prototype);
RecoverPartitionsContext.prototype.constructor = RecoverPartitionsContext;
sparkParser.RecoverPartitionsContext = RecoverPartitionsContext;
RecoverPartitionsContext.prototype.ALTER = function () {
    return this.getToken(sparkParser.ALTER, 0);
};
RecoverPartitionsContext.prototype.TABLE = function () {
    return this.getToken(sparkParser.TABLE, 0);
};
RecoverPartitionsContext.prototype.tableIdentifier = function () {
    return this.getTypedRuleContext(TableIdentifierContext, 0);
};
RecoverPartitionsContext.prototype.RECOVER = function () {
    return this.getToken(sparkParser.RECOVER, 0);
};
RecoverPartitionsContext.prototype.PARTITIONS = function () {
    return this.getToken(sparkParser.PARTITIONS, 0);
};
RecoverPartitionsContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterRecoverPartitions(this);
    }
};
RecoverPartitionsContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitRecoverPartitions(this);
    }
};
RecoverPartitionsContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitRecoverPartitions(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function RenameTablePartitionContext(parser, ctx) {
    StatementContext.call(this, parser);
    this.from = null; // PartitionSpecContext;
    this.to = null; // PartitionSpecContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
RenameTablePartitionContext.prototype = Object.create(StatementContext.prototype);
RenameTablePartitionContext.prototype.constructor = RenameTablePartitionContext;
sparkParser.RenameTablePartitionContext = RenameTablePartitionContext;
RenameTablePartitionContext.prototype.ALTER = function () {
    return this.getToken(sparkParser.ALTER, 0);
};
RenameTablePartitionContext.prototype.TABLE = function () {
    return this.getToken(sparkParser.TABLE, 0);
};
RenameTablePartitionContext.prototype.tableIdentifier = function () {
    return this.getTypedRuleContext(TableIdentifierContext, 0);
};
RenameTablePartitionContext.prototype.RENAME = function () {
    return this.getToken(sparkParser.RENAME, 0);
};
RenameTablePartitionContext.prototype.TO = function () {
    return this.getToken(sparkParser.TO, 0);
};
RenameTablePartitionContext.prototype.partitionSpec = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(PartitionSpecContext);
    }
    else {
        return this.getTypedRuleContext(PartitionSpecContext, i);
    }
};
RenameTablePartitionContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterRenameTablePartition(this);
    }
};
RenameTablePartitionContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitRenameTablePartition(this);
    }
};
RenameTablePartitionContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitRenameTablePartition(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function RepairTableContext(parser, ctx) {
    StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
RepairTableContext.prototype = Object.create(StatementContext.prototype);
RepairTableContext.prototype.constructor = RepairTableContext;
sparkParser.RepairTableContext = RepairTableContext;
RepairTableContext.prototype.MSCK = function () {
    return this.getToken(sparkParser.MSCK, 0);
};
RepairTableContext.prototype.REPAIR = function () {
    return this.getToken(sparkParser.REPAIR, 0);
};
RepairTableContext.prototype.TABLE = function () {
    return this.getToken(sparkParser.TABLE, 0);
};
RepairTableContext.prototype.tableIdentifier = function () {
    return this.getTypedRuleContext(TableIdentifierContext, 0);
};
RepairTableContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterRepairTable(this);
    }
};
RepairTableContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitRepairTable(this);
    }
};
RepairTableContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitRepairTable(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function RefreshResourceContext(parser, ctx) {
    StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
RefreshResourceContext.prototype = Object.create(StatementContext.prototype);
RefreshResourceContext.prototype.constructor = RefreshResourceContext;
sparkParser.RefreshResourceContext = RefreshResourceContext;
RefreshResourceContext.prototype.REFRESH = function () {
    return this.getToken(sparkParser.REFRESH, 0);
};
RefreshResourceContext.prototype.STRING = function () {
    return this.getToken(sparkParser.STRING, 0);
};
RefreshResourceContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterRefreshResource(this);
    }
};
RefreshResourceContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitRefreshResource(this);
    }
};
RefreshResourceContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitRefreshResource(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function ShowCreateTableContext(parser, ctx) {
    StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
ShowCreateTableContext.prototype = Object.create(StatementContext.prototype);
ShowCreateTableContext.prototype.constructor = ShowCreateTableContext;
sparkParser.ShowCreateTableContext = ShowCreateTableContext;
ShowCreateTableContext.prototype.SHOW = function () {
    return this.getToken(sparkParser.SHOW, 0);
};
ShowCreateTableContext.prototype.CREATE = function () {
    return this.getToken(sparkParser.CREATE, 0);
};
ShowCreateTableContext.prototype.TABLE = function () {
    return this.getToken(sparkParser.TABLE, 0);
};
ShowCreateTableContext.prototype.tableIdentifier = function () {
    return this.getTypedRuleContext(TableIdentifierContext, 0);
};
ShowCreateTableContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterShowCreateTable(this);
    }
};
ShowCreateTableContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitShowCreateTable(this);
    }
};
ShowCreateTableContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitShowCreateTable(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function ShowColumnsContext(parser, ctx) {
    StatementContext.call(this, parser);
    this.db = null; // IdentifierContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
ShowColumnsContext.prototype = Object.create(StatementContext.prototype);
ShowColumnsContext.prototype.constructor = ShowColumnsContext;
sparkParser.ShowColumnsContext = ShowColumnsContext;
ShowColumnsContext.prototype.SHOW = function () {
    return this.getToken(sparkParser.SHOW, 0);
};
ShowColumnsContext.prototype.COLUMNS = function () {
    return this.getToken(sparkParser.COLUMNS, 0);
};
ShowColumnsContext.prototype.tableIdentifier = function () {
    return this.getTypedRuleContext(TableIdentifierContext, 0);
};
ShowColumnsContext.prototype.FROM = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(sparkParser.FROM);
    }
    else {
        return this.getToken(sparkParser.FROM, i);
    }
};
ShowColumnsContext.prototype.IN = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(sparkParser.IN);
    }
    else {
        return this.getToken(sparkParser.IN, i);
    }
};
ShowColumnsContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};
ShowColumnsContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterShowColumns(this);
    }
};
ShowColumnsContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitShowColumns(this);
    }
};
ShowColumnsContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitShowColumns(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function AddTablePartitionContext(parser, ctx) {
    StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
AddTablePartitionContext.prototype = Object.create(StatementContext.prototype);
AddTablePartitionContext.prototype.constructor = AddTablePartitionContext;
sparkParser.AddTablePartitionContext = AddTablePartitionContext;
AddTablePartitionContext.prototype.ALTER = function () {
    return this.getToken(sparkParser.ALTER, 0);
};
AddTablePartitionContext.prototype.TABLE = function () {
    return this.getToken(sparkParser.TABLE, 0);
};
AddTablePartitionContext.prototype.tableIdentifier = function () {
    return this.getTypedRuleContext(TableIdentifierContext, 0);
};
AddTablePartitionContext.prototype.ADD = function () {
    return this.getToken(sparkParser.ADD, 0);
};
AddTablePartitionContext.prototype.IF = function () {
    return this.getToken(sparkParser.IF, 0);
};
AddTablePartitionContext.prototype.NOT = function () {
    return this.getToken(sparkParser.NOT, 0);
};
AddTablePartitionContext.prototype.EXISTS = function () {
    return this.getToken(sparkParser.EXISTS, 0);
};
AddTablePartitionContext.prototype.partitionSpecLocation = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(PartitionSpecLocationContext);
    }
    else {
        return this.getTypedRuleContext(PartitionSpecLocationContext, i);
    }
};
AddTablePartitionContext.prototype.VIEW = function () {
    return this.getToken(sparkParser.VIEW, 0);
};
AddTablePartitionContext.prototype.partitionSpec = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(PartitionSpecContext);
    }
    else {
        return this.getTypedRuleContext(PartitionSpecContext, i);
    }
};
AddTablePartitionContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterAddTablePartition(this);
    }
};
AddTablePartitionContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitAddTablePartition(this);
    }
};
AddTablePartitionContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitAddTablePartition(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function RefreshTableContext(parser, ctx) {
    StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
RefreshTableContext.prototype = Object.create(StatementContext.prototype);
RefreshTableContext.prototype.constructor = RefreshTableContext;
sparkParser.RefreshTableContext = RefreshTableContext;
RefreshTableContext.prototype.REFRESH = function () {
    return this.getToken(sparkParser.REFRESH, 0);
};
RefreshTableContext.prototype.TABLE = function () {
    return this.getToken(sparkParser.TABLE, 0);
};
RefreshTableContext.prototype.tableIdentifier = function () {
    return this.getTypedRuleContext(TableIdentifierContext, 0);
};
RefreshTableContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterRefreshTable(this);
    }
};
RefreshTableContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitRefreshTable(this);
    }
};
RefreshTableContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitRefreshTable(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function ManageResourceContext(parser, ctx) {
    StatementContext.call(this, parser);
    this.op = null; // Token;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
ManageResourceContext.prototype = Object.create(StatementContext.prototype);
ManageResourceContext.prototype.constructor = ManageResourceContext;
sparkParser.ManageResourceContext = ManageResourceContext;
ManageResourceContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};
ManageResourceContext.prototype.ADD = function () {
    return this.getToken(sparkParser.ADD, 0);
};
ManageResourceContext.prototype.LIST = function () {
    return this.getToken(sparkParser.LIST, 0);
};
ManageResourceContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterManageResource(this);
    }
};
ManageResourceContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitManageResource(this);
    }
};
ManageResourceContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitManageResource(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function CreateDatabaseContext(parser, ctx) {
    StatementContext.call(this, parser);
    this.comment = null; // Token;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
CreateDatabaseContext.prototype = Object.create(StatementContext.prototype);
CreateDatabaseContext.prototype.constructor = CreateDatabaseContext;
sparkParser.CreateDatabaseContext = CreateDatabaseContext;
CreateDatabaseContext.prototype.CREATE = function () {
    return this.getToken(sparkParser.CREATE, 0);
};
CreateDatabaseContext.prototype.DATABASE = function () {
    return this.getToken(sparkParser.DATABASE, 0);
};
CreateDatabaseContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};
CreateDatabaseContext.prototype.IF = function () {
    return this.getToken(sparkParser.IF, 0);
};
CreateDatabaseContext.prototype.NOT = function () {
    return this.getToken(sparkParser.NOT, 0);
};
CreateDatabaseContext.prototype.EXISTS = function () {
    return this.getToken(sparkParser.EXISTS, 0);
};
CreateDatabaseContext.prototype.COMMENT = function () {
    return this.getToken(sparkParser.COMMENT, 0);
};
CreateDatabaseContext.prototype.locationSpec = function () {
    return this.getTypedRuleContext(LocationSpecContext, 0);
};
CreateDatabaseContext.prototype.WITH = function () {
    return this.getToken(sparkParser.WITH, 0);
};
CreateDatabaseContext.prototype.DBPROPERTIES = function () {
    return this.getToken(sparkParser.DBPROPERTIES, 0);
};
CreateDatabaseContext.prototype.tablePropertyList = function () {
    return this.getTypedRuleContext(TablePropertyListContext, 0);
};
CreateDatabaseContext.prototype.STRING = function () {
    return this.getToken(sparkParser.STRING, 0);
};
CreateDatabaseContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterCreateDatabase(this);
    }
};
CreateDatabaseContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitCreateDatabase(this);
    }
};
CreateDatabaseContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitCreateDatabase(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function AnalyzeContext(parser, ctx) {
    StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
AnalyzeContext.prototype = Object.create(StatementContext.prototype);
AnalyzeContext.prototype.constructor = AnalyzeContext;
sparkParser.AnalyzeContext = AnalyzeContext;
AnalyzeContext.prototype.ANALYZE = function () {
    return this.getToken(sparkParser.ANALYZE, 0);
};
AnalyzeContext.prototype.TABLE = function () {
    return this.getToken(sparkParser.TABLE, 0);
};
AnalyzeContext.prototype.tableIdentifier = function () {
    return this.getTypedRuleContext(TableIdentifierContext, 0);
};
AnalyzeContext.prototype.COMPUTE = function () {
    return this.getToken(sparkParser.COMPUTE, 0);
};
AnalyzeContext.prototype.STATISTICS = function () {
    return this.getToken(sparkParser.STATISTICS, 0);
};
AnalyzeContext.prototype.partitionSpec = function () {
    return this.getTypedRuleContext(PartitionSpecContext, 0);
};
AnalyzeContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};
AnalyzeContext.prototype.FOR = function () {
    return this.getToken(sparkParser.FOR, 0);
};
AnalyzeContext.prototype.COLUMNS = function () {
    return this.getToken(sparkParser.COLUMNS, 0);
};
AnalyzeContext.prototype.identifierSeq = function () {
    return this.getTypedRuleContext(IdentifierSeqContext, 0);
};
AnalyzeContext.prototype.ALL = function () {
    return this.getToken(sparkParser.ALL, 0);
};
AnalyzeContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterAnalyze(this);
    }
};
AnalyzeContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitAnalyze(this);
    }
};
AnalyzeContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitAnalyze(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function CreateHiveTableContext(parser, ctx) {
    StatementContext.call(this, parser);
    this.columns = null; // ColTypeListContext;
    this.comment = null; // Token;
    this.partitionColumns = null; // ColTypeListContext;
    this.tableProps = null; // TablePropertyListContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
CreateHiveTableContext.prototype = Object.create(StatementContext.prototype);
CreateHiveTableContext.prototype.constructor = CreateHiveTableContext;
sparkParser.CreateHiveTableContext = CreateHiveTableContext;
CreateHiveTableContext.prototype.createTableHeader = function () {
    return this.getTypedRuleContext(CreateTableHeaderContext, 0);
};
CreateHiveTableContext.prototype.bucketSpec = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(BucketSpecContext);
    }
    else {
        return this.getTypedRuleContext(BucketSpecContext, i);
    }
};
CreateHiveTableContext.prototype.skewSpec = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(SkewSpecContext);
    }
    else {
        return this.getTypedRuleContext(SkewSpecContext, i);
    }
};
CreateHiveTableContext.prototype.rowFormat = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(RowFormatContext);
    }
    else {
        return this.getTypedRuleContext(RowFormatContext, i);
    }
};
CreateHiveTableContext.prototype.createFileFormat = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(CreateFileFormatContext);
    }
    else {
        return this.getTypedRuleContext(CreateFileFormatContext, i);
    }
};
CreateHiveTableContext.prototype.locationSpec = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(LocationSpecContext);
    }
    else {
        return this.getTypedRuleContext(LocationSpecContext, i);
    }
};
CreateHiveTableContext.prototype.query = function () {
    return this.getTypedRuleContext(QueryContext, 0);
};
CreateHiveTableContext.prototype.colTypeList = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(ColTypeListContext);
    }
    else {
        return this.getTypedRuleContext(ColTypeListContext, i);
    }
};
CreateHiveTableContext.prototype.COMMENT = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(sparkParser.COMMENT);
    }
    else {
        return this.getToken(sparkParser.COMMENT, i);
    }
};
CreateHiveTableContext.prototype.PARTITIONED = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(sparkParser.PARTITIONED);
    }
    else {
        return this.getToken(sparkParser.PARTITIONED, i);
    }
};
CreateHiveTableContext.prototype.BY = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(sparkParser.BY);
    }
    else {
        return this.getToken(sparkParser.BY, i);
    }
};
CreateHiveTableContext.prototype.TBLPROPERTIES = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(sparkParser.TBLPROPERTIES);
    }
    else {
        return this.getToken(sparkParser.TBLPROPERTIES, i);
    }
};
CreateHiveTableContext.prototype.STRING = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(sparkParser.STRING);
    }
    else {
        return this.getToken(sparkParser.STRING, i);
    }
};
CreateHiveTableContext.prototype.tablePropertyList = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(TablePropertyListContext);
    }
    else {
        return this.getTypedRuleContext(TablePropertyListContext, i);
    }
};
CreateHiveTableContext.prototype.AS = function () {
    return this.getToken(sparkParser.AS, 0);
};
CreateHiveTableContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterCreateHiveTable(this);
    }
};
CreateHiveTableContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitCreateHiveTable(this);
    }
};
CreateHiveTableContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitCreateHiveTable(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function CreateFunctionContext(parser, ctx) {
    StatementContext.call(this, parser);
    this.className = null; // Token;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
CreateFunctionContext.prototype = Object.create(StatementContext.prototype);
CreateFunctionContext.prototype.constructor = CreateFunctionContext;
sparkParser.CreateFunctionContext = CreateFunctionContext;
CreateFunctionContext.prototype.CREATE = function () {
    return this.getToken(sparkParser.CREATE, 0);
};
CreateFunctionContext.prototype.FUNCTION = function () {
    return this.getToken(sparkParser.FUNCTION, 0);
};
CreateFunctionContext.prototype.qualifiedName = function () {
    return this.getTypedRuleContext(QualifiedNameContext, 0);
};
CreateFunctionContext.prototype.AS = function () {
    return this.getToken(sparkParser.AS, 0);
};
CreateFunctionContext.prototype.STRING = function () {
    return this.getToken(sparkParser.STRING, 0);
};
CreateFunctionContext.prototype.OR = function () {
    return this.getToken(sparkParser.OR, 0);
};
CreateFunctionContext.prototype.REPLACE = function () {
    return this.getToken(sparkParser.REPLACE, 0);
};
CreateFunctionContext.prototype.TEMPORARY = function () {
    return this.getToken(sparkParser.TEMPORARY, 0);
};
CreateFunctionContext.prototype.IF = function () {
    return this.getToken(sparkParser.IF, 0);
};
CreateFunctionContext.prototype.NOT = function () {
    return this.getToken(sparkParser.NOT, 0);
};
CreateFunctionContext.prototype.EXISTS = function () {
    return this.getToken(sparkParser.EXISTS, 0);
};
CreateFunctionContext.prototype.USING = function () {
    return this.getToken(sparkParser.USING, 0);
};
CreateFunctionContext.prototype.resource = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(ResourceContext);
    }
    else {
        return this.getTypedRuleContext(ResourceContext, i);
    }
};
CreateFunctionContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterCreateFunction(this);
    }
};
CreateFunctionContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitCreateFunction(this);
    }
};
CreateFunctionContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitCreateFunction(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function ShowTableContext(parser, ctx) {
    StatementContext.call(this, parser);
    this.db = null; // IdentifierContext;
    this.pattern = null; // Token;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
ShowTableContext.prototype = Object.create(StatementContext.prototype);
ShowTableContext.prototype.constructor = ShowTableContext;
sparkParser.ShowTableContext = ShowTableContext;
ShowTableContext.prototype.SHOW = function () {
    return this.getToken(sparkParser.SHOW, 0);
};
ShowTableContext.prototype.TABLE = function () {
    return this.getToken(sparkParser.TABLE, 0);
};
ShowTableContext.prototype.EXTENDED = function () {
    return this.getToken(sparkParser.EXTENDED, 0);
};
ShowTableContext.prototype.LIKE = function () {
    return this.getToken(sparkParser.LIKE, 0);
};
ShowTableContext.prototype.STRING = function () {
    return this.getToken(sparkParser.STRING, 0);
};
ShowTableContext.prototype.partitionSpec = function () {
    return this.getTypedRuleContext(PartitionSpecContext, 0);
};
ShowTableContext.prototype.FROM = function () {
    return this.getToken(sparkParser.FROM, 0);
};
ShowTableContext.prototype.IN = function () {
    return this.getToken(sparkParser.IN, 0);
};
ShowTableContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};
ShowTableContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterShowTable(this);
    }
};
ShowTableContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitShowTable(this);
    }
};
ShowTableContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitShowTable(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function SetDatabasePropertiesContext(parser, ctx) {
    StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
SetDatabasePropertiesContext.prototype = Object.create(StatementContext.prototype);
SetDatabasePropertiesContext.prototype.constructor = SetDatabasePropertiesContext;
sparkParser.SetDatabasePropertiesContext = SetDatabasePropertiesContext;
SetDatabasePropertiesContext.prototype.ALTER = function () {
    return this.getToken(sparkParser.ALTER, 0);
};
SetDatabasePropertiesContext.prototype.DATABASE = function () {
    return this.getToken(sparkParser.DATABASE, 0);
};
SetDatabasePropertiesContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};
SetDatabasePropertiesContext.prototype.SET = function () {
    return this.getToken(sparkParser.SET, 0);
};
SetDatabasePropertiesContext.prototype.DBPROPERTIES = function () {
    return this.getToken(sparkParser.DBPROPERTIES, 0);
};
SetDatabasePropertiesContext.prototype.tablePropertyList = function () {
    return this.getTypedRuleContext(TablePropertyListContext, 0);
};
SetDatabasePropertiesContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterSetDatabaseProperties(this);
    }
};
SetDatabasePropertiesContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitSetDatabaseProperties(this);
    }
};
SetDatabasePropertiesContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitSetDatabaseProperties(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function CreateTableContext(parser, ctx) {
    StatementContext.call(this, parser);
    this.options = null; // TablePropertyListContext;
    this.partitionColumnNames = null; // IdentifierListContext;
    this.comment = null; // Token;
    this.tableProps = null; // TablePropertyListContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
CreateTableContext.prototype = Object.create(StatementContext.prototype);
CreateTableContext.prototype.constructor = CreateTableContext;
sparkParser.CreateTableContext = CreateTableContext;
CreateTableContext.prototype.createTableHeader = function () {
    return this.getTypedRuleContext(CreateTableHeaderContext, 0);
};
CreateTableContext.prototype.tableProvider = function () {
    return this.getTypedRuleContext(TableProviderContext, 0);
};
CreateTableContext.prototype.colTypeList = function () {
    return this.getTypedRuleContext(ColTypeListContext, 0);
};
CreateTableContext.prototype.bucketSpec = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(BucketSpecContext);
    }
    else {
        return this.getTypedRuleContext(BucketSpecContext, i);
    }
};
CreateTableContext.prototype.locationSpec = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(LocationSpecContext);
    }
    else {
        return this.getTypedRuleContext(LocationSpecContext, i);
    }
};
CreateTableContext.prototype.query = function () {
    return this.getTypedRuleContext(QueryContext, 0);
};
CreateTableContext.prototype.OPTIONS = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(sparkParser.OPTIONS);
    }
    else {
        return this.getToken(sparkParser.OPTIONS, i);
    }
};
CreateTableContext.prototype.PARTITIONED = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(sparkParser.PARTITIONED);
    }
    else {
        return this.getToken(sparkParser.PARTITIONED, i);
    }
};
CreateTableContext.prototype.BY = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(sparkParser.BY);
    }
    else {
        return this.getToken(sparkParser.BY, i);
    }
};
CreateTableContext.prototype.COMMENT = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(sparkParser.COMMENT);
    }
    else {
        return this.getToken(sparkParser.COMMENT, i);
    }
};
CreateTableContext.prototype.TBLPROPERTIES = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(sparkParser.TBLPROPERTIES);
    }
    else {
        return this.getToken(sparkParser.TBLPROPERTIES, i);
    }
};
CreateTableContext.prototype.tablePropertyList = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(TablePropertyListContext);
    }
    else {
        return this.getTypedRuleContext(TablePropertyListContext, i);
    }
};
CreateTableContext.prototype.identifierList = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(IdentifierListContext);
    }
    else {
        return this.getTypedRuleContext(IdentifierListContext, i);
    }
};
CreateTableContext.prototype.STRING = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(sparkParser.STRING);
    }
    else {
        return this.getToken(sparkParser.STRING, i);
    }
};
CreateTableContext.prototype.AS = function () {
    return this.getToken(sparkParser.AS, 0);
};
CreateTableContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterCreateTable(this);
    }
};
CreateTableContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitCreateTable(this);
    }
};
CreateTableContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitCreateTable(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function DescribeTableContext(parser, ctx) {
    StatementContext.call(this, parser);
    this.option = null; // Token;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
DescribeTableContext.prototype = Object.create(StatementContext.prototype);
DescribeTableContext.prototype.constructor = DescribeTableContext;
sparkParser.DescribeTableContext = DescribeTableContext;
DescribeTableContext.prototype.tableIdentifier = function () {
    return this.getTypedRuleContext(TableIdentifierContext, 0);
};
DescribeTableContext.prototype.DESC = function () {
    return this.getToken(sparkParser.DESC, 0);
};
DescribeTableContext.prototype.DESCRIBE = function () {
    return this.getToken(sparkParser.DESCRIBE, 0);
};
DescribeTableContext.prototype.TABLE = function () {
    return this.getToken(sparkParser.TABLE, 0);
};
DescribeTableContext.prototype.partitionSpec = function () {
    return this.getTypedRuleContext(PartitionSpecContext, 0);
};
DescribeTableContext.prototype.describeColName = function () {
    return this.getTypedRuleContext(DescribeColNameContext, 0);
};
DescribeTableContext.prototype.EXTENDED = function () {
    return this.getToken(sparkParser.EXTENDED, 0);
};
DescribeTableContext.prototype.FORMATTED = function () {
    return this.getToken(sparkParser.FORMATTED, 0);
};
DescribeTableContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterDescribeTable(this);
    }
};
DescribeTableContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitDescribeTable(this);
    }
};
DescribeTableContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitDescribeTable(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function CreateTableLikeContext(parser, ctx) {
    StatementContext.call(this, parser);
    this.target = null; // TableIdentifierContext;
    this.source = null; // TableIdentifierContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
CreateTableLikeContext.prototype = Object.create(StatementContext.prototype);
CreateTableLikeContext.prototype.constructor = CreateTableLikeContext;
sparkParser.CreateTableLikeContext = CreateTableLikeContext;
CreateTableLikeContext.prototype.CREATE = function () {
    return this.getToken(sparkParser.CREATE, 0);
};
CreateTableLikeContext.prototype.TABLE = function () {
    return this.getToken(sparkParser.TABLE, 0);
};
CreateTableLikeContext.prototype.LIKE = function () {
    return this.getToken(sparkParser.LIKE, 0);
};
CreateTableLikeContext.prototype.tableIdentifier = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(TableIdentifierContext);
    }
    else {
        return this.getTypedRuleContext(TableIdentifierContext, i);
    }
};
CreateTableLikeContext.prototype.IF = function () {
    return this.getToken(sparkParser.IF, 0);
};
CreateTableLikeContext.prototype.NOT = function () {
    return this.getToken(sparkParser.NOT, 0);
};
CreateTableLikeContext.prototype.EXISTS = function () {
    return this.getToken(sparkParser.EXISTS, 0);
};
CreateTableLikeContext.prototype.locationSpec = function () {
    return this.getTypedRuleContext(LocationSpecContext, 0);
};
CreateTableLikeContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterCreateTableLike(this);
    }
};
CreateTableLikeContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitCreateTableLike(this);
    }
};
CreateTableLikeContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitCreateTableLike(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function UncacheTableContext(parser, ctx) {
    StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
UncacheTableContext.prototype = Object.create(StatementContext.prototype);
UncacheTableContext.prototype.constructor = UncacheTableContext;
sparkParser.UncacheTableContext = UncacheTableContext;
UncacheTableContext.prototype.UNCACHE = function () {
    return this.getToken(sparkParser.UNCACHE, 0);
};
UncacheTableContext.prototype.TABLE = function () {
    return this.getToken(sparkParser.TABLE, 0);
};
UncacheTableContext.prototype.tableIdentifier = function () {
    return this.getTypedRuleContext(TableIdentifierContext, 0);
};
UncacheTableContext.prototype.IF = function () {
    return this.getToken(sparkParser.IF, 0);
};
UncacheTableContext.prototype.EXISTS = function () {
    return this.getToken(sparkParser.EXISTS, 0);
};
UncacheTableContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterUncacheTable(this);
    }
};
UncacheTableContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitUncacheTable(this);
    }
};
UncacheTableContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitUncacheTable(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function DropFunctionContext(parser, ctx) {
    StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
DropFunctionContext.prototype = Object.create(StatementContext.prototype);
DropFunctionContext.prototype.constructor = DropFunctionContext;
sparkParser.DropFunctionContext = DropFunctionContext;
DropFunctionContext.prototype.DROP = function () {
    return this.getToken(sparkParser.DROP, 0);
};
DropFunctionContext.prototype.FUNCTION = function () {
    return this.getToken(sparkParser.FUNCTION, 0);
};
DropFunctionContext.prototype.qualifiedName = function () {
    return this.getTypedRuleContext(QualifiedNameContext, 0);
};
DropFunctionContext.prototype.TEMPORARY = function () {
    return this.getToken(sparkParser.TEMPORARY, 0);
};
DropFunctionContext.prototype.IF = function () {
    return this.getToken(sparkParser.IF, 0);
};
DropFunctionContext.prototype.EXISTS = function () {
    return this.getToken(sparkParser.EXISTS, 0);
};
DropFunctionContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterDropFunction(this);
    }
};
DropFunctionContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitDropFunction(this);
    }
};
DropFunctionContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitDropFunction(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function LoadDataContext(parser, ctx) {
    StatementContext.call(this, parser);
    this.path = null; // Token;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
LoadDataContext.prototype = Object.create(StatementContext.prototype);
LoadDataContext.prototype.constructor = LoadDataContext;
sparkParser.LoadDataContext = LoadDataContext;
LoadDataContext.prototype.LOAD = function () {
    return this.getToken(sparkParser.LOAD, 0);
};
LoadDataContext.prototype.DATA = function () {
    return this.getToken(sparkParser.DATA, 0);
};
LoadDataContext.prototype.INPATH = function () {
    return this.getToken(sparkParser.INPATH, 0);
};
LoadDataContext.prototype.INTO = function () {
    return this.getToken(sparkParser.INTO, 0);
};
LoadDataContext.prototype.TABLE = function () {
    return this.getToken(sparkParser.TABLE, 0);
};
LoadDataContext.prototype.tableIdentifier = function () {
    return this.getTypedRuleContext(TableIdentifierContext, 0);
};
LoadDataContext.prototype.STRING = function () {
    return this.getToken(sparkParser.STRING, 0);
};
LoadDataContext.prototype.LOCAL = function () {
    return this.getToken(sparkParser.LOCAL, 0);
};
LoadDataContext.prototype.OVERWRITE = function () {
    return this.getToken(sparkParser.OVERWRITE, 0);
};
LoadDataContext.prototype.partitionSpec = function () {
    return this.getTypedRuleContext(PartitionSpecContext, 0);
};
LoadDataContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterLoadData(this);
    }
};
LoadDataContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitLoadData(this);
    }
};
LoadDataContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitLoadData(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function ShowPartitionsContext(parser, ctx) {
    StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
ShowPartitionsContext.prototype = Object.create(StatementContext.prototype);
ShowPartitionsContext.prototype.constructor = ShowPartitionsContext;
sparkParser.ShowPartitionsContext = ShowPartitionsContext;
ShowPartitionsContext.prototype.SHOW = function () {
    return this.getToken(sparkParser.SHOW, 0);
};
ShowPartitionsContext.prototype.PARTITIONS = function () {
    return this.getToken(sparkParser.PARTITIONS, 0);
};
ShowPartitionsContext.prototype.tableIdentifier = function () {
    return this.getTypedRuleContext(TableIdentifierContext, 0);
};
ShowPartitionsContext.prototype.partitionSpec = function () {
    return this.getTypedRuleContext(PartitionSpecContext, 0);
};
ShowPartitionsContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterShowPartitions(this);
    }
};
ShowPartitionsContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitShowPartitions(this);
    }
};
ShowPartitionsContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitShowPartitions(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function DescribeFunctionContext(parser, ctx) {
    StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
DescribeFunctionContext.prototype = Object.create(StatementContext.prototype);
DescribeFunctionContext.prototype.constructor = DescribeFunctionContext;
sparkParser.DescribeFunctionContext = DescribeFunctionContext;
DescribeFunctionContext.prototype.FUNCTION = function () {
    return this.getToken(sparkParser.FUNCTION, 0);
};
DescribeFunctionContext.prototype.describeFuncName = function () {
    return this.getTypedRuleContext(DescribeFuncNameContext, 0);
};
DescribeFunctionContext.prototype.DESC = function () {
    return this.getToken(sparkParser.DESC, 0);
};
DescribeFunctionContext.prototype.DESCRIBE = function () {
    return this.getToken(sparkParser.DESCRIBE, 0);
};
DescribeFunctionContext.prototype.EXTENDED = function () {
    return this.getToken(sparkParser.EXTENDED, 0);
};
DescribeFunctionContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterDescribeFunction(this);
    }
};
DescribeFunctionContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitDescribeFunction(this);
    }
};
DescribeFunctionContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitDescribeFunction(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function ChangeColumnContext(parser, ctx) {
    StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
ChangeColumnContext.prototype = Object.create(StatementContext.prototype);
ChangeColumnContext.prototype.constructor = ChangeColumnContext;
sparkParser.ChangeColumnContext = ChangeColumnContext;
ChangeColumnContext.prototype.ALTER = function () {
    return this.getToken(sparkParser.ALTER, 0);
};
ChangeColumnContext.prototype.TABLE = function () {
    return this.getToken(sparkParser.TABLE, 0);
};
ChangeColumnContext.prototype.tableIdentifier = function () {
    return this.getTypedRuleContext(TableIdentifierContext, 0);
};
ChangeColumnContext.prototype.CHANGE = function () {
    return this.getToken(sparkParser.CHANGE, 0);
};
ChangeColumnContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};
ChangeColumnContext.prototype.colType = function () {
    return this.getTypedRuleContext(ColTypeContext, 0);
};
ChangeColumnContext.prototype.partitionSpec = function () {
    return this.getTypedRuleContext(PartitionSpecContext, 0);
};
ChangeColumnContext.prototype.COLUMN = function () {
    return this.getToken(sparkParser.COLUMN, 0);
};
ChangeColumnContext.prototype.colPosition = function () {
    return this.getTypedRuleContext(ColPositionContext, 0);
};
ChangeColumnContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterChangeColumn(this);
    }
};
ChangeColumnContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitChangeColumn(this);
    }
};
ChangeColumnContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitChangeColumn(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function StatementDefaultContext(parser, ctx) {
    StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
StatementDefaultContext.prototype = Object.create(StatementContext.prototype);
StatementDefaultContext.prototype.constructor = StatementDefaultContext;
sparkParser.StatementDefaultContext = StatementDefaultContext;
StatementDefaultContext.prototype.query = function () {
    return this.getTypedRuleContext(QueryContext, 0);
};
StatementDefaultContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterStatementDefault(this);
    }
};
StatementDefaultContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitStatementDefault(this);
    }
};
StatementDefaultContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitStatementDefault(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function TruncateTableContext(parser, ctx) {
    StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
TruncateTableContext.prototype = Object.create(StatementContext.prototype);
TruncateTableContext.prototype.constructor = TruncateTableContext;
sparkParser.TruncateTableContext = TruncateTableContext;
TruncateTableContext.prototype.TRUNCATE = function () {
    return this.getToken(sparkParser.TRUNCATE, 0);
};
TruncateTableContext.prototype.TABLE = function () {
    return this.getToken(sparkParser.TABLE, 0);
};
TruncateTableContext.prototype.tableIdentifier = function () {
    return this.getTypedRuleContext(TableIdentifierContext, 0);
};
TruncateTableContext.prototype.partitionSpec = function () {
    return this.getTypedRuleContext(PartitionSpecContext, 0);
};
TruncateTableContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterTruncateTable(this);
    }
};
TruncateTableContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitTruncateTable(this);
    }
};
TruncateTableContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitTruncateTable(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function SetTableSerDeContext(parser, ctx) {
    StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
SetTableSerDeContext.prototype = Object.create(StatementContext.prototype);
SetTableSerDeContext.prototype.constructor = SetTableSerDeContext;
sparkParser.SetTableSerDeContext = SetTableSerDeContext;
SetTableSerDeContext.prototype.ALTER = function () {
    return this.getToken(sparkParser.ALTER, 0);
};
SetTableSerDeContext.prototype.TABLE = function () {
    return this.getToken(sparkParser.TABLE, 0);
};
SetTableSerDeContext.prototype.tableIdentifier = function () {
    return this.getTypedRuleContext(TableIdentifierContext, 0);
};
SetTableSerDeContext.prototype.SET = function () {
    return this.getToken(sparkParser.SET, 0);
};
SetTableSerDeContext.prototype.SERDE = function () {
    return this.getToken(sparkParser.SERDE, 0);
};
SetTableSerDeContext.prototype.STRING = function () {
    return this.getToken(sparkParser.STRING, 0);
};
SetTableSerDeContext.prototype.partitionSpec = function () {
    return this.getTypedRuleContext(PartitionSpecContext, 0);
};
SetTableSerDeContext.prototype.WITH = function () {
    return this.getToken(sparkParser.WITH, 0);
};
SetTableSerDeContext.prototype.SERDEPROPERTIES = function () {
    return this.getToken(sparkParser.SERDEPROPERTIES, 0);
};
SetTableSerDeContext.prototype.tablePropertyList = function () {
    return this.getTypedRuleContext(TablePropertyListContext, 0);
};
SetTableSerDeContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterSetTableSerDe(this);
    }
};
SetTableSerDeContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitSetTableSerDe(this);
    }
};
SetTableSerDeContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitSetTableSerDe(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function CreateViewContext(parser, ctx) {
    StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
CreateViewContext.prototype = Object.create(StatementContext.prototype);
CreateViewContext.prototype.constructor = CreateViewContext;
sparkParser.CreateViewContext = CreateViewContext;
CreateViewContext.prototype.CREATE = function () {
    return this.getToken(sparkParser.CREATE, 0);
};
CreateViewContext.prototype.VIEW = function () {
    return this.getToken(sparkParser.VIEW, 0);
};
CreateViewContext.prototype.tableIdentifier = function () {
    return this.getTypedRuleContext(TableIdentifierContext, 0);
};
CreateViewContext.prototype.AS = function () {
    return this.getToken(sparkParser.AS, 0);
};
CreateViewContext.prototype.query = function () {
    return this.getTypedRuleContext(QueryContext, 0);
};
CreateViewContext.prototype.OR = function () {
    return this.getToken(sparkParser.OR, 0);
};
CreateViewContext.prototype.REPLACE = function () {
    return this.getToken(sparkParser.REPLACE, 0);
};
CreateViewContext.prototype.TEMPORARY = function () {
    return this.getToken(sparkParser.TEMPORARY, 0);
};
CreateViewContext.prototype.IF = function () {
    return this.getToken(sparkParser.IF, 0);
};
CreateViewContext.prototype.NOT = function () {
    return this.getToken(sparkParser.NOT, 0);
};
CreateViewContext.prototype.EXISTS = function () {
    return this.getToken(sparkParser.EXISTS, 0);
};
CreateViewContext.prototype.identifierCommentList = function () {
    return this.getTypedRuleContext(IdentifierCommentListContext, 0);
};
CreateViewContext.prototype.COMMENT = function () {
    return this.getToken(sparkParser.COMMENT, 0);
};
CreateViewContext.prototype.STRING = function () {
    return this.getToken(sparkParser.STRING, 0);
};
CreateViewContext.prototype.PARTITIONED = function () {
    return this.getToken(sparkParser.PARTITIONED, 0);
};
CreateViewContext.prototype.ON = function () {
    return this.getToken(sparkParser.ON, 0);
};
CreateViewContext.prototype.identifierList = function () {
    return this.getTypedRuleContext(IdentifierListContext, 0);
};
CreateViewContext.prototype.TBLPROPERTIES = function () {
    return this.getToken(sparkParser.TBLPROPERTIES, 0);
};
CreateViewContext.prototype.tablePropertyList = function () {
    return this.getTypedRuleContext(TablePropertyListContext, 0);
};
CreateViewContext.prototype.GLOBAL = function () {
    return this.getToken(sparkParser.GLOBAL, 0);
};
CreateViewContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterCreateView(this);
    }
};
CreateViewContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitCreateView(this);
    }
};
CreateViewContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitCreateView(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function DropTablePartitionsContext(parser, ctx) {
    StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
DropTablePartitionsContext.prototype = Object.create(StatementContext.prototype);
DropTablePartitionsContext.prototype.constructor = DropTablePartitionsContext;
sparkParser.DropTablePartitionsContext = DropTablePartitionsContext;
DropTablePartitionsContext.prototype.ALTER = function () {
    return this.getToken(sparkParser.ALTER, 0);
};
DropTablePartitionsContext.prototype.TABLE = function () {
    return this.getToken(sparkParser.TABLE, 0);
};
DropTablePartitionsContext.prototype.tableIdentifier = function () {
    return this.getTypedRuleContext(TableIdentifierContext, 0);
};
DropTablePartitionsContext.prototype.DROP = function () {
    return this.getToken(sparkParser.DROP, 0);
};
DropTablePartitionsContext.prototype.partitionSpec = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(PartitionSpecContext);
    }
    else {
        return this.getTypedRuleContext(PartitionSpecContext, i);
    }
};
DropTablePartitionsContext.prototype.IF = function () {
    return this.getToken(sparkParser.IF, 0);
};
DropTablePartitionsContext.prototype.EXISTS = function () {
    return this.getToken(sparkParser.EXISTS, 0);
};
DropTablePartitionsContext.prototype.PURGE = function () {
    return this.getToken(sparkParser.PURGE, 0);
};
DropTablePartitionsContext.prototype.VIEW = function () {
    return this.getToken(sparkParser.VIEW, 0);
};
DropTablePartitionsContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterDropTablePartitions(this);
    }
};
DropTablePartitionsContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitDropTablePartitions(this);
    }
};
DropTablePartitionsContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitDropTablePartitions(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function SetConfigurationContext(parser, ctx) {
    StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
SetConfigurationContext.prototype = Object.create(StatementContext.prototype);
SetConfigurationContext.prototype.constructor = SetConfigurationContext;
sparkParser.SetConfigurationContext = SetConfigurationContext;
SetConfigurationContext.prototype.SET = function () {
    return this.getToken(sparkParser.SET, 0);
};
SetConfigurationContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterSetConfiguration(this);
    }
};
SetConfigurationContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitSetConfiguration(this);
    }
};
SetConfigurationContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitSetConfiguration(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function DropTableContext(parser, ctx) {
    StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
DropTableContext.prototype = Object.create(StatementContext.prototype);
DropTableContext.prototype.constructor = DropTableContext;
sparkParser.DropTableContext = DropTableContext;
DropTableContext.prototype.DROP = function () {
    return this.getToken(sparkParser.DROP, 0);
};
DropTableContext.prototype.TABLE = function () {
    return this.getToken(sparkParser.TABLE, 0);
};
DropTableContext.prototype.tableIdentifier = function () {
    return this.getTypedRuleContext(TableIdentifierContext, 0);
};
DropTableContext.prototype.IF = function () {
    return this.getToken(sparkParser.IF, 0);
};
DropTableContext.prototype.EXISTS = function () {
    return this.getToken(sparkParser.EXISTS, 0);
};
DropTableContext.prototype.PURGE = function () {
    return this.getToken(sparkParser.PURGE, 0);
};
DropTableContext.prototype.VIEW = function () {
    return this.getToken(sparkParser.VIEW, 0);
};
DropTableContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterDropTable(this);
    }
};
DropTableContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitDropTable(this);
    }
};
DropTableContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitDropTable(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function ShowDatabasesContext(parser, ctx) {
    StatementContext.call(this, parser);
    this.pattern = null; // Token;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
ShowDatabasesContext.prototype = Object.create(StatementContext.prototype);
ShowDatabasesContext.prototype.constructor = ShowDatabasesContext;
sparkParser.ShowDatabasesContext = ShowDatabasesContext;
ShowDatabasesContext.prototype.SHOW = function () {
    return this.getToken(sparkParser.SHOW, 0);
};
ShowDatabasesContext.prototype.DATABASES = function () {
    return this.getToken(sparkParser.DATABASES, 0);
};
ShowDatabasesContext.prototype.STRING = function () {
    return this.getToken(sparkParser.STRING, 0);
};
ShowDatabasesContext.prototype.LIKE = function () {
    return this.getToken(sparkParser.LIKE, 0);
};
ShowDatabasesContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterShowDatabases(this);
    }
};
ShowDatabasesContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitShowDatabases(this);
    }
};
ShowDatabasesContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitShowDatabases(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function ShowTblPropertiesContext(parser, ctx) {
    StatementContext.call(this, parser);
    this.table = null; // TableIdentifierContext;
    this.key = null; // TablePropertyKeyContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
ShowTblPropertiesContext.prototype = Object.create(StatementContext.prototype);
ShowTblPropertiesContext.prototype.constructor = ShowTblPropertiesContext;
sparkParser.ShowTblPropertiesContext = ShowTblPropertiesContext;
ShowTblPropertiesContext.prototype.SHOW = function () {
    return this.getToken(sparkParser.SHOW, 0);
};
ShowTblPropertiesContext.prototype.TBLPROPERTIES = function () {
    return this.getToken(sparkParser.TBLPROPERTIES, 0);
};
ShowTblPropertiesContext.prototype.tableIdentifier = function () {
    return this.getTypedRuleContext(TableIdentifierContext, 0);
};
ShowTblPropertiesContext.prototype.tablePropertyKey = function () {
    return this.getTypedRuleContext(TablePropertyKeyContext, 0);
};
ShowTblPropertiesContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterShowTblProperties(this);
    }
};
ShowTblPropertiesContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitShowTblProperties(this);
    }
};
ShowTblPropertiesContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitShowTblProperties(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function UnsetTablePropertiesContext(parser, ctx) {
    StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
UnsetTablePropertiesContext.prototype = Object.create(StatementContext.prototype);
UnsetTablePropertiesContext.prototype.constructor = UnsetTablePropertiesContext;
sparkParser.UnsetTablePropertiesContext = UnsetTablePropertiesContext;
UnsetTablePropertiesContext.prototype.ALTER = function () {
    return this.getToken(sparkParser.ALTER, 0);
};
UnsetTablePropertiesContext.prototype.tableIdentifier = function () {
    return this.getTypedRuleContext(TableIdentifierContext, 0);
};
UnsetTablePropertiesContext.prototype.UNSET = function () {
    return this.getToken(sparkParser.UNSET, 0);
};
UnsetTablePropertiesContext.prototype.TBLPROPERTIES = function () {
    return this.getToken(sparkParser.TBLPROPERTIES, 0);
};
UnsetTablePropertiesContext.prototype.tablePropertyList = function () {
    return this.getTypedRuleContext(TablePropertyListContext, 0);
};
UnsetTablePropertiesContext.prototype.TABLE = function () {
    return this.getToken(sparkParser.TABLE, 0);
};
UnsetTablePropertiesContext.prototype.VIEW = function () {
    return this.getToken(sparkParser.VIEW, 0);
};
UnsetTablePropertiesContext.prototype.IF = function () {
    return this.getToken(sparkParser.IF, 0);
};
UnsetTablePropertiesContext.prototype.EXISTS = function () {
    return this.getToken(sparkParser.EXISTS, 0);
};
UnsetTablePropertiesContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterUnsetTableProperties(this);
    }
};
UnsetTablePropertiesContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitUnsetTableProperties(this);
    }
};
UnsetTablePropertiesContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitUnsetTableProperties(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function SetTableLocationContext(parser, ctx) {
    StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
SetTableLocationContext.prototype = Object.create(StatementContext.prototype);
SetTableLocationContext.prototype.constructor = SetTableLocationContext;
sparkParser.SetTableLocationContext = SetTableLocationContext;
SetTableLocationContext.prototype.ALTER = function () {
    return this.getToken(sparkParser.ALTER, 0);
};
SetTableLocationContext.prototype.TABLE = function () {
    return this.getToken(sparkParser.TABLE, 0);
};
SetTableLocationContext.prototype.tableIdentifier = function () {
    return this.getTypedRuleContext(TableIdentifierContext, 0);
};
SetTableLocationContext.prototype.SET = function () {
    return this.getToken(sparkParser.SET, 0);
};
SetTableLocationContext.prototype.locationSpec = function () {
    return this.getTypedRuleContext(LocationSpecContext, 0);
};
SetTableLocationContext.prototype.partitionSpec = function () {
    return this.getTypedRuleContext(PartitionSpecContext, 0);
};
SetTableLocationContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterSetTableLocation(this);
    }
};
SetTableLocationContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitSetTableLocation(this);
    }
};
SetTableLocationContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitSetTableLocation(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function ShowFunctionsContext(parser, ctx) {
    StatementContext.call(this, parser);
    this.pattern = null; // Token;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
ShowFunctionsContext.prototype = Object.create(StatementContext.prototype);
ShowFunctionsContext.prototype.constructor = ShowFunctionsContext;
sparkParser.ShowFunctionsContext = ShowFunctionsContext;
ShowFunctionsContext.prototype.SHOW = function () {
    return this.getToken(sparkParser.SHOW, 0);
};
ShowFunctionsContext.prototype.FUNCTIONS = function () {
    return this.getToken(sparkParser.FUNCTIONS, 0);
};
ShowFunctionsContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};
ShowFunctionsContext.prototype.qualifiedName = function () {
    return this.getTypedRuleContext(QualifiedNameContext, 0);
};
ShowFunctionsContext.prototype.LIKE = function () {
    return this.getToken(sparkParser.LIKE, 0);
};
ShowFunctionsContext.prototype.STRING = function () {
    return this.getToken(sparkParser.STRING, 0);
};
ShowFunctionsContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterShowFunctions(this);
    }
};
ShowFunctionsContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitShowFunctions(this);
    }
};
ShowFunctionsContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitShowFunctions(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function CacheTableContext(parser, ctx) {
    StatementContext.call(this, parser);
    this.options = null; // TablePropertyListContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
CacheTableContext.prototype = Object.create(StatementContext.prototype);
CacheTableContext.prototype.constructor = CacheTableContext;
sparkParser.CacheTableContext = CacheTableContext;
CacheTableContext.prototype.CACHE = function () {
    return this.getToken(sparkParser.CACHE, 0);
};
CacheTableContext.prototype.TABLE = function () {
    return this.getToken(sparkParser.TABLE, 0);
};
CacheTableContext.prototype.tableIdentifier = function () {
    return this.getTypedRuleContext(TableIdentifierContext, 0);
};
CacheTableContext.prototype.LAZY = function () {
    return this.getToken(sparkParser.LAZY, 0);
};
CacheTableContext.prototype.OPTIONS = function () {
    return this.getToken(sparkParser.OPTIONS, 0);
};
CacheTableContext.prototype.query = function () {
    return this.getTypedRuleContext(QueryContext, 0);
};
CacheTableContext.prototype.tablePropertyList = function () {
    return this.getTypedRuleContext(TablePropertyListContext, 0);
};
CacheTableContext.prototype.AS = function () {
    return this.getToken(sparkParser.AS, 0);
};
CacheTableContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterCacheTable(this);
    }
};
CacheTableContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitCacheTable(this);
    }
};
CacheTableContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitCacheTable(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function AddTableColumnsContext(parser, ctx) {
    StatementContext.call(this, parser);
    this.columns = null; // ColTypeListContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
AddTableColumnsContext.prototype = Object.create(StatementContext.prototype);
AddTableColumnsContext.prototype.constructor = AddTableColumnsContext;
sparkParser.AddTableColumnsContext = AddTableColumnsContext;
AddTableColumnsContext.prototype.ALTER = function () {
    return this.getToken(sparkParser.ALTER, 0);
};
AddTableColumnsContext.prototype.TABLE = function () {
    return this.getToken(sparkParser.TABLE, 0);
};
AddTableColumnsContext.prototype.tableIdentifier = function () {
    return this.getTypedRuleContext(TableIdentifierContext, 0);
};
AddTableColumnsContext.prototype.ADD = function () {
    return this.getToken(sparkParser.ADD, 0);
};
AddTableColumnsContext.prototype.COLUMNS = function () {
    return this.getToken(sparkParser.COLUMNS, 0);
};
AddTableColumnsContext.prototype.colTypeList = function () {
    return this.getTypedRuleContext(ColTypeListContext, 0);
};
AddTableColumnsContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterAddTableColumns(this);
    }
};
AddTableColumnsContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitAddTableColumns(this);
    }
};
AddTableColumnsContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitAddTableColumns(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function SetTablePropertiesContext(parser, ctx) {
    StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}
SetTablePropertiesContext.prototype = Object.create(StatementContext.prototype);
SetTablePropertiesContext.prototype.constructor = SetTablePropertiesContext;
sparkParser.SetTablePropertiesContext = SetTablePropertiesContext;
SetTablePropertiesContext.prototype.ALTER = function () {
    return this.getToken(sparkParser.ALTER, 0);
};
SetTablePropertiesContext.prototype.tableIdentifier = function () {
    return this.getTypedRuleContext(TableIdentifierContext, 0);
};
SetTablePropertiesContext.prototype.SET = function () {
    return this.getToken(sparkParser.SET, 0);
};
SetTablePropertiesContext.prototype.TBLPROPERTIES = function () {
    return this.getToken(sparkParser.TBLPROPERTIES, 0);
};
SetTablePropertiesContext.prototype.tablePropertyList = function () {
    return this.getTypedRuleContext(TablePropertyListContext, 0);
};
SetTablePropertiesContext.prototype.TABLE = function () {
    return this.getToken(sparkParser.TABLE, 0);
};
SetTablePropertiesContext.prototype.VIEW = function () {
    return this.getToken(sparkParser.VIEW, 0);
};
SetTablePropertiesContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterSetTableProperties(this);
    }
};
SetTablePropertiesContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitSetTableProperties(this);
    }
};
SetTablePropertiesContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitSetTableProperties(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.StatementContext = StatementContext;
sparkParser.prototype.statement = function () {
    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, sparkParser.RULE_statement);
    var _la = 0; // Token type
    try {
        this.state = 833;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 96, this._ctx);
        switch (la_) {
            case 1:
                localctx = new StatementDefaultContext(this, localctx);
                this.enterOuterAlt(localctx, 1);
                this.state = 220;
                this.query();
                break;
            case 2:
                localctx = new UseContext(this, localctx);
                this.enterOuterAlt(localctx, 2);
                this.state = 221;
                this.match(sparkParser.USE);
                this.state = 222;
                localctx.db = this.identifier();
                break;
            case 3:
                localctx = new CreateDatabaseContext(this, localctx);
                this.enterOuterAlt(localctx, 3);
                this.state = 223;
                this.match(sparkParser.CREATE);
                this.state = 224;
                this.match(sparkParser.DATABASE);
                this.state = 228;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 0, this._ctx);
                if (la_ === 1) {
                    this.state = 225;
                    this.match(sparkParser.IF);
                    this.state = 226;
                    this.match(sparkParser.NOT);
                    this.state = 227;
                    this.match(sparkParser.EXISTS);
                }
                this.state = 230;
                this.identifier();
                this.state = 233;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.COMMENT) {
                    this.state = 231;
                    this.match(sparkParser.COMMENT);
                    this.state = 232;
                    localctx.comment = this.match(sparkParser.STRING);
                }
                this.state = 236;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.LOCATION) {
                    this.state = 235;
                    this.locationSpec();
                }
                this.state = 241;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.WITH) {
                    this.state = 238;
                    this.match(sparkParser.WITH);
                    this.state = 239;
                    this.match(sparkParser.DBPROPERTIES);
                    this.state = 240;
                    this.tablePropertyList();
                }
                break;
            case 4:
                localctx = new SetDatabasePropertiesContext(this, localctx);
                this.enterOuterAlt(localctx, 4);
                this.state = 243;
                this.match(sparkParser.ALTER);
                this.state = 244;
                this.match(sparkParser.DATABASE);
                this.state = 245;
                this.identifier();
                this.state = 246;
                this.match(sparkParser.SET);
                this.state = 247;
                this.match(sparkParser.DBPROPERTIES);
                this.state = 248;
                this.tablePropertyList();
                break;
            case 5:
                localctx = new DropDatabaseContext(this, localctx);
                this.enterOuterAlt(localctx, 5);
                this.state = 250;
                this.match(sparkParser.DROP);
                this.state = 251;
                this.match(sparkParser.DATABASE);
                this.state = 254;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 4, this._ctx);
                if (la_ === 1) {
                    this.state = 252;
                    this.match(sparkParser.IF);
                    this.state = 253;
                    this.match(sparkParser.EXISTS);
                }
                this.state = 256;
                this.identifier();
                this.state = 258;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.CASCADE || _la === sparkParser.RESTRICT) {
                    this.state = 257;
                    _la = this._input.LA(1);
                    if (!(_la === sparkParser.CASCADE || _la === sparkParser.RESTRICT)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }
                break;
            case 6:
                localctx = new CreateTableContext(this, localctx);
                this.enterOuterAlt(localctx, 6);
                this.state = 260;
                this.createTableHeader();
                this.state = 265;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.T__0) {
                    this.state = 261;
                    this.match(sparkParser.T__0);
                    this.state = 262;
                    this.colTypeList();
                    this.state = 263;
                    this.match(sparkParser.T__1);
                }
                this.state = 267;
                this.tableProvider();
                this.state = 281;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === sparkParser.COMMENT || ((((_la - 183)) & ~0x1f) == 0 && ((1 << (_la - 183)) & ((1 << (sparkParser.OPTIONS - 183)) | (1 << (sparkParser.TBLPROPERTIES - 183)) | (1 << (sparkParser.LOCATION - 183)) | (1 << (sparkParser.CLUSTERED - 183)))) !== 0) || _la === sparkParser.PARTITIONED) {
                    this.state = 279;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case sparkParser.OPTIONS:
                            this.state = 268;
                            this.match(sparkParser.OPTIONS);
                            this.state = 269;
                            localctx.options = this.tablePropertyList();
                            break;
                        case sparkParser.PARTITIONED:
                            this.state = 270;
                            this.match(sparkParser.PARTITIONED);
                            this.state = 271;
                            this.match(sparkParser.BY);
                            this.state = 272;
                            localctx.partitionColumnNames = this.identifierList();
                            break;
                        case sparkParser.CLUSTERED:
                            this.state = 273;
                            this.bucketSpec();
                            break;
                        case sparkParser.LOCATION:
                            this.state = 274;
                            this.locationSpec();
                            break;
                        case sparkParser.COMMENT:
                            this.state = 275;
                            this.match(sparkParser.COMMENT);
                            this.state = 276;
                            localctx.comment = this.match(sparkParser.STRING);
                            break;
                        case sparkParser.TBLPROPERTIES:
                            this.state = 277;
                            this.match(sparkParser.TBLPROPERTIES);
                            this.state = 278;
                            localctx.tableProps = this.tablePropertyList();
                            break;
                        default:
                            throw new antlr4.error.NoViableAltException(this);
                    }
                    this.state = 283;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 288;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << sparkParser.T__0) | (1 << sparkParser.SELECT) | (1 << sparkParser.FROM) | (1 << sparkParser.AS))) !== 0) || ((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (sparkParser.WITH - 77)) | (1 << (sparkParser.VALUES - 77)) | (1 << (sparkParser.TABLE - 77)) | (1 << (sparkParser.INSERT - 77)))) !== 0) || _la === sparkParser.MAP || _la === sparkParser.REDUCE) {
                    this.state = 285;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === sparkParser.AS) {
                        this.state = 284;
                        this.match(sparkParser.AS);
                    }
                    this.state = 287;
                    this.query();
                }
                break;
            case 7:
                localctx = new CreateHiveTableContext(this, localctx);
                this.enterOuterAlt(localctx, 7);
                this.state = 290;
                this.createTableHeader();
                this.state = 295;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 11, this._ctx);
                if (la_ === 1) {
                    this.state = 291;
                    this.match(sparkParser.T__0);
                    this.state = 292;
                    localctx.columns = this.colTypeList();
                    this.state = 293;
                    this.match(sparkParser.T__1);
                }
                this.state = 314;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === sparkParser.ROW || _la === sparkParser.COMMENT || ((((_la - 185)) & ~0x1f) == 0 && ((1 << (_la - 185)) & ((1 << (sparkParser.TBLPROPERTIES - 185)) | (1 << (sparkParser.SKEWED - 185)) | (1 << (sparkParser.STORED - 185)) | (1 << (sparkParser.LOCATION - 185)) | (1 << (sparkParser.CLUSTERED - 185)) | (1 << (sparkParser.PARTITIONED - 185)))) !== 0)) {
                    this.state = 312;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case sparkParser.COMMENT:
                            this.state = 297;
                            this.match(sparkParser.COMMENT);
                            this.state = 298;
                            localctx.comment = this.match(sparkParser.STRING);
                            break;
                        case sparkParser.PARTITIONED:
                            this.state = 299;
                            this.match(sparkParser.PARTITIONED);
                            this.state = 300;
                            this.match(sparkParser.BY);
                            this.state = 301;
                            this.match(sparkParser.T__0);
                            this.state = 302;
                            localctx.partitionColumns = this.colTypeList();
                            this.state = 303;
                            this.match(sparkParser.T__1);
                            break;
                        case sparkParser.CLUSTERED:
                            this.state = 305;
                            this.bucketSpec();
                            break;
                        case sparkParser.SKEWED:
                            this.state = 306;
                            this.skewSpec();
                            break;
                        case sparkParser.ROW:
                            this.state = 307;
                            this.rowFormat();
                            break;
                        case sparkParser.STORED:
                            this.state = 308;
                            this.createFileFormat();
                            break;
                        case sparkParser.LOCATION:
                            this.state = 309;
                            this.locationSpec();
                            break;
                        case sparkParser.TBLPROPERTIES:
                            this.state = 310;
                            this.match(sparkParser.TBLPROPERTIES);
                            this.state = 311;
                            localctx.tableProps = this.tablePropertyList();
                            break;
                        default:
                            throw new antlr4.error.NoViableAltException(this);
                    }
                    this.state = 316;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 321;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << sparkParser.T__0) | (1 << sparkParser.SELECT) | (1 << sparkParser.FROM) | (1 << sparkParser.AS))) !== 0) || ((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (sparkParser.WITH - 77)) | (1 << (sparkParser.VALUES - 77)) | (1 << (sparkParser.TABLE - 77)) | (1 << (sparkParser.INSERT - 77)))) !== 0) || _la === sparkParser.MAP || _la === sparkParser.REDUCE) {
                    this.state = 318;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === sparkParser.AS) {
                        this.state = 317;
                        this.match(sparkParser.AS);
                    }
                    this.state = 320;
                    this.query();
                }
                break;
            case 8:
                localctx = new CreateTableLikeContext(this, localctx);
                this.enterOuterAlt(localctx, 8);
                this.state = 323;
                this.match(sparkParser.CREATE);
                this.state = 324;
                this.match(sparkParser.TABLE);
                this.state = 328;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 16, this._ctx);
                if (la_ === 1) {
                    this.state = 325;
                    this.match(sparkParser.IF);
                    this.state = 326;
                    this.match(sparkParser.NOT);
                    this.state = 327;
                    this.match(sparkParser.EXISTS);
                }
                this.state = 330;
                localctx.target = this.tableIdentifier();
                this.state = 331;
                this.match(sparkParser.LIKE);
                this.state = 332;
                localctx.source = this.tableIdentifier();
                this.state = 334;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.LOCATION) {
                    this.state = 333;
                    this.locationSpec();
                }
                break;
            case 9:
                localctx = new AnalyzeContext(this, localctx);
                this.enterOuterAlt(localctx, 9);
                this.state = 336;
                this.match(sparkParser.ANALYZE);
                this.state = 337;
                this.match(sparkParser.TABLE);
                this.state = 338;
                this.tableIdentifier();
                this.state = 340;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.PARTITION) {
                    this.state = 339;
                    this.partitionSpec();
                }
                this.state = 342;
                this.match(sparkParser.COMPUTE);
                this.state = 343;
                this.match(sparkParser.STATISTICS);
                this.state = 351;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 19, this._ctx);
                if (la_ === 1) {
                    this.state = 344;
                    this.identifier();
                }
                else if (la_ === 2) {
                    this.state = 345;
                    this.match(sparkParser.FOR);
                    this.state = 346;
                    this.match(sparkParser.COLUMNS);
                    this.state = 347;
                    this.identifierSeq();
                }
                else if (la_ === 3) {
                    this.state = 348;
                    this.match(sparkParser.FOR);
                    this.state = 349;
                    this.match(sparkParser.ALL);
                    this.state = 350;
                    this.match(sparkParser.COLUMNS);
                }
                break;
            case 10:
                localctx = new AddTableColumnsContext(this, localctx);
                this.enterOuterAlt(localctx, 10);
                this.state = 353;
                this.match(sparkParser.ALTER);
                this.state = 354;
                this.match(sparkParser.TABLE);
                this.state = 355;
                this.tableIdentifier();
                this.state = 356;
                this.match(sparkParser.ADD);
                this.state = 357;
                this.match(sparkParser.COLUMNS);
                this.state = 358;
                this.match(sparkParser.T__0);
                this.state = 359;
                localctx.columns = this.colTypeList();
                this.state = 360;
                this.match(sparkParser.T__1);
                break;
            case 11:
                localctx = new RenameTableContext(this, localctx);
                this.enterOuterAlt(localctx, 11);
                this.state = 362;
                this.match(sparkParser.ALTER);
                this.state = 363;
                _la = this._input.LA(1);
                if (!(_la === sparkParser.TABLE || _la === sparkParser.VIEW)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 364;
                localctx.from = this.tableIdentifier();
                this.state = 365;
                this.match(sparkParser.RENAME);
                this.state = 366;
                this.match(sparkParser.TO);
                this.state = 367;
                localctx.to = this.tableIdentifier();
                break;
            case 12:
                localctx = new SetTablePropertiesContext(this, localctx);
                this.enterOuterAlt(localctx, 12);
                this.state = 369;
                this.match(sparkParser.ALTER);
                this.state = 370;
                _la = this._input.LA(1);
                if (!(_la === sparkParser.TABLE || _la === sparkParser.VIEW)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 371;
                this.tableIdentifier();
                this.state = 372;
                this.match(sparkParser.SET);
                this.state = 373;
                this.match(sparkParser.TBLPROPERTIES);
                this.state = 374;
                this.tablePropertyList();
                break;
            case 13:
                localctx = new UnsetTablePropertiesContext(this, localctx);
                this.enterOuterAlt(localctx, 13);
                this.state = 376;
                this.match(sparkParser.ALTER);
                this.state = 377;
                _la = this._input.LA(1);
                if (!(_la === sparkParser.TABLE || _la === sparkParser.VIEW)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 378;
                this.tableIdentifier();
                this.state = 379;
                this.match(sparkParser.UNSET);
                this.state = 380;
                this.match(sparkParser.TBLPROPERTIES);
                this.state = 383;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.IF) {
                    this.state = 381;
                    this.match(sparkParser.IF);
                    this.state = 382;
                    this.match(sparkParser.EXISTS);
                }
                this.state = 385;
                this.tablePropertyList();
                break;
            case 14:
                localctx = new ChangeColumnContext(this, localctx);
                this.enterOuterAlt(localctx, 14);
                this.state = 387;
                this.match(sparkParser.ALTER);
                this.state = 388;
                this.match(sparkParser.TABLE);
                this.state = 389;
                this.tableIdentifier();
                this.state = 391;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.PARTITION) {
                    this.state = 390;
                    this.partitionSpec();
                }
                this.state = 393;
                this.match(sparkParser.CHANGE);
                this.state = 395;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 22, this._ctx);
                if (la_ === 1) {
                    this.state = 394;
                    this.match(sparkParser.COLUMN);
                }
                this.state = 397;
                this.identifier();
                this.state = 398;
                this.colType();
                this.state = 400;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.FIRST || _la === sparkParser.AFTER) {
                    this.state = 399;
                    this.colPosition();
                }
                break;
            case 15:
                localctx = new SetTableSerDeContext(this, localctx);
                this.enterOuterAlt(localctx, 15);
                this.state = 402;
                this.match(sparkParser.ALTER);
                this.state = 403;
                this.match(sparkParser.TABLE);
                this.state = 404;
                this.tableIdentifier();
                this.state = 406;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.PARTITION) {
                    this.state = 405;
                    this.partitionSpec();
                }
                this.state = 408;
                this.match(sparkParser.SET);
                this.state = 409;
                this.match(sparkParser.SERDE);
                this.state = 410;
                this.match(sparkParser.STRING);
                this.state = 414;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.WITH) {
                    this.state = 411;
                    this.match(sparkParser.WITH);
                    this.state = 412;
                    this.match(sparkParser.SERDEPROPERTIES);
                    this.state = 413;
                    this.tablePropertyList();
                }
                break;
            case 16:
                localctx = new SetTableSerDeContext(this, localctx);
                this.enterOuterAlt(localctx, 16);
                this.state = 416;
                this.match(sparkParser.ALTER);
                this.state = 417;
                this.match(sparkParser.TABLE);
                this.state = 418;
                this.tableIdentifier();
                this.state = 420;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.PARTITION) {
                    this.state = 419;
                    this.partitionSpec();
                }
                this.state = 422;
                this.match(sparkParser.SET);
                this.state = 423;
                this.match(sparkParser.SERDEPROPERTIES);
                this.state = 424;
                this.tablePropertyList();
                break;
            case 17:
                localctx = new AddTablePartitionContext(this, localctx);
                this.enterOuterAlt(localctx, 17);
                this.state = 426;
                this.match(sparkParser.ALTER);
                this.state = 427;
                this.match(sparkParser.TABLE);
                this.state = 428;
                this.tableIdentifier();
                this.state = 429;
                this.match(sparkParser.ADD);
                this.state = 433;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.IF) {
                    this.state = 430;
                    this.match(sparkParser.IF);
                    this.state = 431;
                    this.match(sparkParser.NOT);
                    this.state = 432;
                    this.match(sparkParser.EXISTS);
                }
                this.state = 436;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 435;
                    this.partitionSpecLocation();
                    this.state = 438;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === sparkParser.PARTITION);
                break;
            case 18:
                localctx = new AddTablePartitionContext(this, localctx);
                this.enterOuterAlt(localctx, 18);
                this.state = 440;
                this.match(sparkParser.ALTER);
                this.state = 441;
                this.match(sparkParser.VIEW);
                this.state = 442;
                this.tableIdentifier();
                this.state = 443;
                this.match(sparkParser.ADD);
                this.state = 447;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.IF) {
                    this.state = 444;
                    this.match(sparkParser.IF);
                    this.state = 445;
                    this.match(sparkParser.NOT);
                    this.state = 446;
                    this.match(sparkParser.EXISTS);
                }
                this.state = 450;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 449;
                    this.partitionSpec();
                    this.state = 452;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === sparkParser.PARTITION);
                break;
            case 19:
                localctx = new RenameTablePartitionContext(this, localctx);
                this.enterOuterAlt(localctx, 19);
                this.state = 454;
                this.match(sparkParser.ALTER);
                this.state = 455;
                this.match(sparkParser.TABLE);
                this.state = 456;
                this.tableIdentifier();
                this.state = 457;
                localctx.from = this.partitionSpec();
                this.state = 458;
                this.match(sparkParser.RENAME);
                this.state = 459;
                this.match(sparkParser.TO);
                this.state = 460;
                localctx.to = this.partitionSpec();
                break;
            case 20:
                localctx = new DropTablePartitionsContext(this, localctx);
                this.enterOuterAlt(localctx, 20);
                this.state = 462;
                this.match(sparkParser.ALTER);
                this.state = 463;
                this.match(sparkParser.TABLE);
                this.state = 464;
                this.tableIdentifier();
                this.state = 465;
                this.match(sparkParser.DROP);
                this.state = 468;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.IF) {
                    this.state = 466;
                    this.match(sparkParser.IF);
                    this.state = 467;
                    this.match(sparkParser.EXISTS);
                }
                this.state = 470;
                this.partitionSpec();
                this.state = 475;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === sparkParser.T__2) {
                    this.state = 471;
                    this.match(sparkParser.T__2);
                    this.state = 472;
                    this.partitionSpec();
                    this.state = 477;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 479;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.PURGE) {
                    this.state = 478;
                    this.match(sparkParser.PURGE);
                }
                break;
            case 21:
                localctx = new DropTablePartitionsContext(this, localctx);
                this.enterOuterAlt(localctx, 21);
                this.state = 481;
                this.match(sparkParser.ALTER);
                this.state = 482;
                this.match(sparkParser.VIEW);
                this.state = 483;
                this.tableIdentifier();
                this.state = 484;
                this.match(sparkParser.DROP);
                this.state = 487;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.IF) {
                    this.state = 485;
                    this.match(sparkParser.IF);
                    this.state = 486;
                    this.match(sparkParser.EXISTS);
                }
                this.state = 489;
                this.partitionSpec();
                this.state = 494;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === sparkParser.T__2) {
                    this.state = 490;
                    this.match(sparkParser.T__2);
                    this.state = 491;
                    this.partitionSpec();
                    this.state = 496;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                break;
            case 22:
                localctx = new SetTableLocationContext(this, localctx);
                this.enterOuterAlt(localctx, 22);
                this.state = 497;
                this.match(sparkParser.ALTER);
                this.state = 498;
                this.match(sparkParser.TABLE);
                this.state = 499;
                this.tableIdentifier();
                this.state = 501;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.PARTITION) {
                    this.state = 500;
                    this.partitionSpec();
                }
                this.state = 503;
                this.match(sparkParser.SET);
                this.state = 504;
                this.locationSpec();
                break;
            case 23:
                localctx = new RecoverPartitionsContext(this, localctx);
                this.enterOuterAlt(localctx, 23);
                this.state = 506;
                this.match(sparkParser.ALTER);
                this.state = 507;
                this.match(sparkParser.TABLE);
                this.state = 508;
                this.tableIdentifier();
                this.state = 509;
                this.match(sparkParser.RECOVER);
                this.state = 510;
                this.match(sparkParser.PARTITIONS);
                break;
            case 24:
                localctx = new DropTableContext(this, localctx);
                this.enterOuterAlt(localctx, 24);
                this.state = 512;
                this.match(sparkParser.DROP);
                this.state = 513;
                this.match(sparkParser.TABLE);
                this.state = 516;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 37, this._ctx);
                if (la_ === 1) {
                    this.state = 514;
                    this.match(sparkParser.IF);
                    this.state = 515;
                    this.match(sparkParser.EXISTS);
                }
                this.state = 518;
                this.tableIdentifier();
                this.state = 520;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.PURGE) {
                    this.state = 519;
                    this.match(sparkParser.PURGE);
                }
                break;
            case 25:
                localctx = new DropTableContext(this, localctx);
                this.enterOuterAlt(localctx, 25);
                this.state = 522;
                this.match(sparkParser.DROP);
                this.state = 523;
                this.match(sparkParser.VIEW);
                this.state = 526;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 39, this._ctx);
                if (la_ === 1) {
                    this.state = 524;
                    this.match(sparkParser.IF);
                    this.state = 525;
                    this.match(sparkParser.EXISTS);
                }
                this.state = 528;
                this.tableIdentifier();
                break;
            case 26:
                localctx = new CreateViewContext(this, localctx);
                this.enterOuterAlt(localctx, 26);
                this.state = 529;
                this.match(sparkParser.CREATE);
                this.state = 532;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.OR) {
                    this.state = 530;
                    this.match(sparkParser.OR);
                    this.state = 531;
                    this.match(sparkParser.REPLACE);
                }
                this.state = 538;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.GLOBAL || _la === sparkParser.TEMPORARY) {
                    this.state = 535;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === sparkParser.GLOBAL) {
                        this.state = 534;
                        this.match(sparkParser.GLOBAL);
                    }
                    this.state = 537;
                    this.match(sparkParser.TEMPORARY);
                }
                this.state = 540;
                this.match(sparkParser.VIEW);
                this.state = 544;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 43, this._ctx);
                if (la_ === 1) {
                    this.state = 541;
                    this.match(sparkParser.IF);
                    this.state = 542;
                    this.match(sparkParser.NOT);
                    this.state = 543;
                    this.match(sparkParser.EXISTS);
                }
                this.state = 546;
                this.tableIdentifier();
                this.state = 548;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.T__0) {
                    this.state = 547;
                    this.identifierCommentList();
                }
                this.state = 552;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.COMMENT) {
                    this.state = 550;
                    this.match(sparkParser.COMMENT);
                    this.state = 551;
                    this.match(sparkParser.STRING);
                }
                this.state = 557;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.PARTITIONED) {
                    this.state = 554;
                    this.match(sparkParser.PARTITIONED);
                    this.state = 555;
                    this.match(sparkParser.ON);
                    this.state = 556;
                    this.identifierList();
                }
                this.state = 561;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.TBLPROPERTIES) {
                    this.state = 559;
                    this.match(sparkParser.TBLPROPERTIES);
                    this.state = 560;
                    this.tablePropertyList();
                }
                this.state = 563;
                this.match(sparkParser.AS);
                this.state = 564;
                this.query();
                break;
            case 27:
                localctx = new CreateTempViewUsingContext(this, localctx);
                this.enterOuterAlt(localctx, 27);
                this.state = 566;
                this.match(sparkParser.CREATE);
                this.state = 569;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.OR) {
                    this.state = 567;
                    this.match(sparkParser.OR);
                    this.state = 568;
                    this.match(sparkParser.REPLACE);
                }
                this.state = 572;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.GLOBAL) {
                    this.state = 571;
                    this.match(sparkParser.GLOBAL);
                }
                this.state = 574;
                this.match(sparkParser.TEMPORARY);
                this.state = 575;
                this.match(sparkParser.VIEW);
                this.state = 576;
                this.tableIdentifier();
                this.state = 581;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.T__0) {
                    this.state = 577;
                    this.match(sparkParser.T__0);
                    this.state = 578;
                    this.colTypeList();
                    this.state = 579;
                    this.match(sparkParser.T__1);
                }
                this.state = 583;
                this.tableProvider();
                this.state = 586;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.OPTIONS) {
                    this.state = 584;
                    this.match(sparkParser.OPTIONS);
                    this.state = 585;
                    this.tablePropertyList();
                }
                break;
            case 28:
                localctx = new AlterViewQueryContext(this, localctx);
                this.enterOuterAlt(localctx, 28);
                this.state = 588;
                this.match(sparkParser.ALTER);
                this.state = 589;
                this.match(sparkParser.VIEW);
                this.state = 590;
                this.tableIdentifier();
                this.state = 592;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.AS) {
                    this.state = 591;
                    this.match(sparkParser.AS);
                }
                this.state = 594;
                this.query();
                break;
            case 29:
                localctx = new CreateFunctionContext(this, localctx);
                this.enterOuterAlt(localctx, 29);
                this.state = 596;
                this.match(sparkParser.CREATE);
                this.state = 599;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.OR) {
                    this.state = 597;
                    this.match(sparkParser.OR);
                    this.state = 598;
                    this.match(sparkParser.REPLACE);
                }
                this.state = 602;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.TEMPORARY) {
                    this.state = 601;
                    this.match(sparkParser.TEMPORARY);
                }
                this.state = 604;
                this.match(sparkParser.FUNCTION);
                this.state = 608;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 55, this._ctx);
                if (la_ === 1) {
                    this.state = 605;
                    this.match(sparkParser.IF);
                    this.state = 606;
                    this.match(sparkParser.NOT);
                    this.state = 607;
                    this.match(sparkParser.EXISTS);
                }
                this.state = 610;
                this.qualifiedName();
                this.state = 611;
                this.match(sparkParser.AS);
                this.state = 612;
                localctx.className = this.match(sparkParser.STRING);
                this.state = 622;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.USING) {
                    this.state = 613;
                    this.match(sparkParser.USING);
                    this.state = 614;
                    this.resource();
                    this.state = 619;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === sparkParser.T__2) {
                        this.state = 615;
                        this.match(sparkParser.T__2);
                        this.state = 616;
                        this.resource();
                        this.state = 621;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                }
                break;
            case 30:
                localctx = new DropFunctionContext(this, localctx);
                this.enterOuterAlt(localctx, 30);
                this.state = 624;
                this.match(sparkParser.DROP);
                this.state = 626;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.TEMPORARY) {
                    this.state = 625;
                    this.match(sparkParser.TEMPORARY);
                }
                this.state = 628;
                this.match(sparkParser.FUNCTION);
                this.state = 631;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 59, this._ctx);
                if (la_ === 1) {
                    this.state = 629;
                    this.match(sparkParser.IF);
                    this.state = 630;
                    this.match(sparkParser.EXISTS);
                }
                this.state = 633;
                this.qualifiedName();
                break;
            case 31:
                localctx = new ExplainContext(this, localctx);
                this.enterOuterAlt(localctx, 31);
                this.state = 634;
                this.match(sparkParser.EXPLAIN);
                this.state = 636;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (((((_la - 90)) & ~0x1f) == 0 && ((1 << (_la - 90)) & ((1 << (sparkParser.LOGICAL - 90)) | (1 << (sparkParser.CODEGEN - 90)) | (1 << (sparkParser.COST - 90)))) !== 0) || _la === sparkParser.EXTENDED || _la === sparkParser.FORMATTED) {
                    this.state = 635;
                    _la = this._input.LA(1);
                    if (!(((((_la - 90)) & ~0x1f) == 0 && ((1 << (_la - 90)) & ((1 << (sparkParser.LOGICAL - 90)) | (1 << (sparkParser.CODEGEN - 90)) | (1 << (sparkParser.COST - 90)))) !== 0) || _la === sparkParser.EXTENDED || _la === sparkParser.FORMATTED)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }
                this.state = 638;
                this.statement();
                break;
            case 32:
                localctx = new ShowTablesContext(this, localctx);
                this.enterOuterAlt(localctx, 32);
                this.state = 639;
                this.match(sparkParser.SHOW);
                this.state = 640;
                this.match(sparkParser.TABLES);
                this.state = 643;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.FROM || _la === sparkParser.IN) {
                    this.state = 641;
                    _la = this._input.LA(1);
                    if (!(_la === sparkParser.FROM || _la === sparkParser.IN)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 642;
                    localctx.db = this.identifier();
                }
                this.state = 649;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.LIKE || _la === sparkParser.STRING) {
                    this.state = 646;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === sparkParser.LIKE) {
                        this.state = 645;
                        this.match(sparkParser.LIKE);
                    }
                    this.state = 648;
                    localctx.pattern = this.match(sparkParser.STRING);
                }
                break;
            case 33:
                localctx = new ShowTableContext(this, localctx);
                this.enterOuterAlt(localctx, 33);
                this.state = 651;
                this.match(sparkParser.SHOW);
                this.state = 652;
                this.match(sparkParser.TABLE);
                this.state = 653;
                this.match(sparkParser.EXTENDED);
                this.state = 656;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.FROM || _la === sparkParser.IN) {
                    this.state = 654;
                    _la = this._input.LA(1);
                    if (!(_la === sparkParser.FROM || _la === sparkParser.IN)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 655;
                    localctx.db = this.identifier();
                }
                this.state = 658;
                this.match(sparkParser.LIKE);
                this.state = 659;
                localctx.pattern = this.match(sparkParser.STRING);
                this.state = 661;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.PARTITION) {
                    this.state = 660;
                    this.partitionSpec();
                }
                break;
            case 34:
                localctx = new ShowDatabasesContext(this, localctx);
                this.enterOuterAlt(localctx, 34);
                this.state = 663;
                this.match(sparkParser.SHOW);
                this.state = 664;
                this.match(sparkParser.DATABASES);
                this.state = 669;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.LIKE || _la === sparkParser.STRING) {
                    this.state = 666;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === sparkParser.LIKE) {
                        this.state = 665;
                        this.match(sparkParser.LIKE);
                    }
                    this.state = 668;
                    localctx.pattern = this.match(sparkParser.STRING);
                }
                break;
            case 35:
                localctx = new ShowTblPropertiesContext(this, localctx);
                this.enterOuterAlt(localctx, 35);
                this.state = 671;
                this.match(sparkParser.SHOW);
                this.state = 672;
                this.match(sparkParser.TBLPROPERTIES);
                this.state = 673;
                localctx.table = this.tableIdentifier();
                this.state = 678;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.T__0) {
                    this.state = 674;
                    this.match(sparkParser.T__0);
                    this.state = 675;
                    localctx.key = this.tablePropertyKey();
                    this.state = 676;
                    this.match(sparkParser.T__1);
                }
                break;
            case 36:
                localctx = new ShowColumnsContext(this, localctx);
                this.enterOuterAlt(localctx, 36);
                this.state = 680;
                this.match(sparkParser.SHOW);
                this.state = 681;
                this.match(sparkParser.COLUMNS);
                this.state = 682;
                _la = this._input.LA(1);
                if (!(_la === sparkParser.FROM || _la === sparkParser.IN)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 683;
                this.tableIdentifier();
                this.state = 686;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.FROM || _la === sparkParser.IN) {
                    this.state = 684;
                    _la = this._input.LA(1);
                    if (!(_la === sparkParser.FROM || _la === sparkParser.IN)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 685;
                    localctx.db = this.identifier();
                }
                break;
            case 37:
                localctx = new ShowPartitionsContext(this, localctx);
                this.enterOuterAlt(localctx, 37);
                this.state = 688;
                this.match(sparkParser.SHOW);
                this.state = 689;
                this.match(sparkParser.PARTITIONS);
                this.state = 690;
                this.tableIdentifier();
                this.state = 692;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.PARTITION) {
                    this.state = 691;
                    this.partitionSpec();
                }
                break;
            case 38:
                localctx = new ShowFunctionsContext(this, localctx);
                this.enterOuterAlt(localctx, 38);
                this.state = 694;
                this.match(sparkParser.SHOW);
                this.state = 696;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 71, this._ctx);
                if (la_ === 1) {
                    this.state = 695;
                    this.identifier();
                }
                this.state = 698;
                this.match(sparkParser.FUNCTIONS);
                this.state = 706;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << sparkParser.SELECT) | (1 << sparkParser.FROM) | (1 << sparkParser.ADD) | (1 << sparkParser.AS) | (1 << sparkParser.ALL) | (1 << sparkParser.ANY) | (1 << sparkParser.DISTINCT) | (1 << sparkParser.WHERE) | (1 << sparkParser.GROUP) | (1 << sparkParser.BY) | (1 << sparkParser.GROUPING) | (1 << sparkParser.SETS) | (1 << sparkParser.CUBE) | (1 << sparkParser.ROLLUP) | (1 << sparkParser.ORDER) | (1 << sparkParser.HAVING) | (1 << sparkParser.LIMIT) | (1 << sparkParser.AT) | (1 << sparkParser.OR) | (1 << sparkParser.AND) | (1 << sparkParser.IN))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (sparkParser.NOT - 32)) | (1 << (sparkParser.NO - 32)) | (1 << (sparkParser.EXISTS - 32)) | (1 << (sparkParser.BETWEEN - 32)) | (1 << (sparkParser.LIKE - 32)) | (1 << (sparkParser.RLIKE - 32)) | (1 << (sparkParser.IS - 32)) | (1 << (sparkParser.NULL - 32)) | (1 << (sparkParser.TRUE - 32)) | (1 << (sparkParser.FALSE - 32)) | (1 << (sparkParser.NULLS - 32)) | (1 << (sparkParser.ASC - 32)) | (1 << (sparkParser.DESC - 32)) | (1 << (sparkParser.FOR - 32)) | (1 << (sparkParser.INTERVAL - 32)) | (1 << (sparkParser.CASE - 32)) | (1 << (sparkParser.WHEN - 32)) | (1 << (sparkParser.THEN - 32)) | (1 << (sparkParser.ELSE - 32)) | (1 << (sparkParser.END - 32)) | (1 << (sparkParser.JOIN - 32)) | (1 << (sparkParser.CROSS - 32)) | (1 << (sparkParser.OUTER - 32)) | (1 << (sparkParser.INNER - 32)) | (1 << (sparkParser.LEFT - 32)) | (1 << (sparkParser.SEMI - 32)) | (1 << (sparkParser.RIGHT - 32)) | (1 << (sparkParser.FULL - 32)) | (1 << (sparkParser.NATURAL - 32)) | (1 << (sparkParser.ON - 32)) | (1 << (sparkParser.PIVOT - 32)) | (1 << (sparkParser.LATERAL - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (sparkParser.WINDOW - 64)) | (1 << (sparkParser.OVER - 64)) | (1 << (sparkParser.PARTITION - 64)) | (1 << (sparkParser.RANGE - 64)) | (1 << (sparkParser.ROWS - 64)) | (1 << (sparkParser.UNBOUNDED - 64)) | (1 << (sparkParser.PRECEDING - 64)) | (1 << (sparkParser.FOLLOWING - 64)) | (1 << (sparkParser.CURRENT - 64)) | (1 << (sparkParser.FIRST - 64)) | (1 << (sparkParser.AFTER - 64)) | (1 << (sparkParser.LAST - 64)) | (1 << (sparkParser.ROW - 64)) | (1 << (sparkParser.WITH - 64)) | (1 << (sparkParser.VALUES - 64)) | (1 << (sparkParser.CREATE - 64)) | (1 << (sparkParser.TABLE - 64)) | (1 << (sparkParser.DIRECTORY - 64)) | (1 << (sparkParser.VIEW - 64)) | (1 << (sparkParser.REPLACE - 64)) | (1 << (sparkParser.INSERT - 64)) | (1 << (sparkParser.DELETE - 64)) | (1 << (sparkParser.INTO - 64)) | (1 << (sparkParser.DESCRIBE - 64)) | (1 << (sparkParser.EXPLAIN - 64)) | (1 << (sparkParser.FORMAT - 64)) | (1 << (sparkParser.LOGICAL - 64)) | (1 << (sparkParser.CODEGEN - 64)) | (1 << (sparkParser.COST - 64)) | (1 << (sparkParser.CAST - 64)) | (1 << (sparkParser.SHOW - 64)) | (1 << (sparkParser.TABLES - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (sparkParser.COLUMNS - 96)) | (1 << (sparkParser.COLUMN - 96)) | (1 << (sparkParser.USE - 96)) | (1 << (sparkParser.PARTITIONS - 96)) | (1 << (sparkParser.FUNCTIONS - 96)) | (1 << (sparkParser.DROP - 96)) | (1 << (sparkParser.UNION - 96)) | (1 << (sparkParser.EXCEPT - 96)) | (1 << (sparkParser.SETMINUS - 96)) | (1 << (sparkParser.INTERSECT - 96)) | (1 << (sparkParser.TO - 96)) | (1 << (sparkParser.TABLESAMPLE - 96)) | (1 << (sparkParser.STRATIFY - 96)) | (1 << (sparkParser.ALTER - 96)) | (1 << (sparkParser.RENAME - 96)) | (1 << (sparkParser.ARRAY - 96)) | (1 << (sparkParser.MAP - 96)) | (1 << (sparkParser.STRUCT - 96)) | (1 << (sparkParser.COMMENT - 96)) | (1 << (sparkParser.SET - 96)) | (1 << (sparkParser.RESET - 96)) | (1 << (sparkParser.DATA - 96)) | (1 << (sparkParser.START - 96)) | (1 << (sparkParser.TRANSACTION - 96)) | (1 << (sparkParser.COMMIT - 96)) | (1 << (sparkParser.ROLLBACK - 96)) | (1 << (sparkParser.MACRO - 96)) | (1 << (sparkParser.IGNORE - 96)) | (1 << (sparkParser.BOTH - 96)) | (1 << (sparkParser.LEADING - 96)) | (1 << (sparkParser.TRAILING - 96)) | (1 << (sparkParser.IF - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (sparkParser.POSITION - 128)) | (1 << (sparkParser.EXTRACT - 128)) | (1 << (sparkParser.DIV - 128)) | (1 << (sparkParser.PERCENTLIT - 128)) | (1 << (sparkParser.BUCKET - 128)) | (1 << (sparkParser.OUT - 128)) | (1 << (sparkParser.OF - 128)) | (1 << (sparkParser.SORT - 128)) | (1 << (sparkParser.CLUSTER - 128)) | (1 << (sparkParser.DISTRIBUTE - 128)) | (1 << (sparkParser.OVERWRITE - 128)) | (1 << (sparkParser.TRANSFORM - 128)) | (1 << (sparkParser.REDUCE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (sparkParser.SERDE - 160)) | (1 << (sparkParser.SERDEPROPERTIES - 160)) | (1 << (sparkParser.RECORDREADER - 160)) | (1 << (sparkParser.RECORDWRITER - 160)) | (1 << (sparkParser.DELIMITED - 160)) | (1 << (sparkParser.FIELDS - 160)) | (1 << (sparkParser.TERMINATED - 160)) | (1 << (sparkParser.COLLECTION - 160)) | (1 << (sparkParser.ITEMS - 160)) | (1 << (sparkParser.KEYS - 160)) | (1 << (sparkParser.ESCAPED - 160)) | (1 << (sparkParser.LINES - 160)) | (1 << (sparkParser.SEPARATED - 160)) | (1 << (sparkParser.FUNCTION - 160)) | (1 << (sparkParser.EXTENDED - 160)) | (1 << (sparkParser.REFRESH - 160)) | (1 << (sparkParser.CLEAR - 160)) | (1 << (sparkParser.CACHE - 160)) | (1 << (sparkParser.UNCACHE - 160)) | (1 << (sparkParser.LAZY - 160)) | (1 << (sparkParser.FORMATTED - 160)) | (1 << (sparkParser.GLOBAL - 160)) | (1 << (sparkParser.TEMPORARY - 160)) | (1 << (sparkParser.OPTIONS - 160)) | (1 << (sparkParser.UNSET - 160)) | (1 << (sparkParser.TBLPROPERTIES - 160)) | (1 << (sparkParser.DBPROPERTIES - 160)) | (1 << (sparkParser.BUCKETS - 160)) | (1 << (sparkParser.SKEWED - 160)) | (1 << (sparkParser.STORED - 160)) | (1 << (sparkParser.DIRECTORIES - 160)) | (1 << (sparkParser.LOCATION - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (sparkParser.EXCHANGE - 192)) | (1 << (sparkParser.ARCHIVE - 192)) | (1 << (sparkParser.UNARCHIVE - 192)) | (1 << (sparkParser.FILEFORMAT - 192)) | (1 << (sparkParser.TOUCH - 192)) | (1 << (sparkParser.COMPACT - 192)) | (1 << (sparkParser.CONCATENATE - 192)) | (1 << (sparkParser.CHANGE - 192)) | (1 << (sparkParser.CASCADE - 192)) | (1 << (sparkParser.RESTRICT - 192)) | (1 << (sparkParser.CLUSTERED - 192)) | (1 << (sparkParser.SORTED - 192)) | (1 << (sparkParser.PURGE - 192)) | (1 << (sparkParser.INPUTFORMAT - 192)) | (1 << (sparkParser.OUTPUTFORMAT - 192)) | (1 << (sparkParser.DATABASE - 192)) | (1 << (sparkParser.DATABASES - 192)) | (1 << (sparkParser.DFS - 192)) | (1 << (sparkParser.TRUNCATE - 192)) | (1 << (sparkParser.ANALYZE - 192)) | (1 << (sparkParser.COMPUTE - 192)) | (1 << (sparkParser.LIST - 192)) | (1 << (sparkParser.STATISTICS - 192)) | (1 << (sparkParser.PARTITIONED - 192)) | (1 << (sparkParser.EXTERNAL - 192)) | (1 << (sparkParser.DEFINED - 192)) | (1 << (sparkParser.REVOKE - 192)) | (1 << (sparkParser.GRANT - 192)) | (1 << (sparkParser.LOCK - 192)) | (1 << (sparkParser.UNLOCK - 192)) | (1 << (sparkParser.MSCK - 192)) | (1 << (sparkParser.REPAIR - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (sparkParser.RECOVER - 224)) | (1 << (sparkParser.EXPORT - 224)) | (1 << (sparkParser.IMPORT - 224)) | (1 << (sparkParser.LOAD - 224)) | (1 << (sparkParser.ROLE - 224)) | (1 << (sparkParser.ROLES - 224)) | (1 << (sparkParser.COMPACTIONS - 224)) | (1 << (sparkParser.PRINCIPALS - 224)) | (1 << (sparkParser.TRANSACTIONS - 224)) | (1 << (sparkParser.INDEX - 224)) | (1 << (sparkParser.INDEXES - 224)) | (1 << (sparkParser.LOCKS - 224)) | (1 << (sparkParser.OPTION - 224)) | (1 << (sparkParser.ANTI - 224)) | (1 << (sparkParser.LOCAL - 224)) | (1 << (sparkParser.INPATH - 224)) | (1 << (sparkParser.STRING - 224)) | (1 << (sparkParser.IDENTIFIER - 224)) | (1 << (sparkParser.BACKQUOTED_IDENTIFIER - 224)))) !== 0)) {
                    this.state = 700;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 72, this._ctx);
                    if (la_ === 1) {
                        this.state = 699;
                        this.match(sparkParser.LIKE);
                    }
                    this.state = 704;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case sparkParser.SELECT:
                        case sparkParser.FROM:
                        case sparkParser.ADD:
                        case sparkParser.AS:
                        case sparkParser.ALL:
                        case sparkParser.ANY:
                        case sparkParser.DISTINCT:
                        case sparkParser.WHERE:
                        case sparkParser.GROUP:
                        case sparkParser.BY:
                        case sparkParser.GROUPING:
                        case sparkParser.SETS:
                        case sparkParser.CUBE:
                        case sparkParser.ROLLUP:
                        case sparkParser.ORDER:
                        case sparkParser.HAVING:
                        case sparkParser.LIMIT:
                        case sparkParser.AT:
                        case sparkParser.OR:
                        case sparkParser.AND:
                        case sparkParser.IN:
                        case sparkParser.NOT:
                        case sparkParser.NO:
                        case sparkParser.EXISTS:
                        case sparkParser.BETWEEN:
                        case sparkParser.LIKE:
                        case sparkParser.RLIKE:
                        case sparkParser.IS:
                        case sparkParser.NULL:
                        case sparkParser.TRUE:
                        case sparkParser.FALSE:
                        case sparkParser.NULLS:
                        case sparkParser.ASC:
                        case sparkParser.DESC:
                        case sparkParser.FOR:
                        case sparkParser.INTERVAL:
                        case sparkParser.CASE:
                        case sparkParser.WHEN:
                        case sparkParser.THEN:
                        case sparkParser.ELSE:
                        case sparkParser.END:
                        case sparkParser.JOIN:
                        case sparkParser.CROSS:
                        case sparkParser.OUTER:
                        case sparkParser.INNER:
                        case sparkParser.LEFT:
                        case sparkParser.SEMI:
                        case sparkParser.RIGHT:
                        case sparkParser.FULL:
                        case sparkParser.NATURAL:
                        case sparkParser.ON:
                        case sparkParser.PIVOT:
                        case sparkParser.LATERAL:
                        case sparkParser.WINDOW:
                        case sparkParser.OVER:
                        case sparkParser.PARTITION:
                        case sparkParser.RANGE:
                        case sparkParser.ROWS:
                        case sparkParser.UNBOUNDED:
                        case sparkParser.PRECEDING:
                        case sparkParser.FOLLOWING:
                        case sparkParser.CURRENT:
                        case sparkParser.FIRST:
                        case sparkParser.AFTER:
                        case sparkParser.LAST:
                        case sparkParser.ROW:
                        case sparkParser.WITH:
                        case sparkParser.VALUES:
                        case sparkParser.CREATE:
                        case sparkParser.TABLE:
                        case sparkParser.DIRECTORY:
                        case sparkParser.VIEW:
                        case sparkParser.REPLACE:
                        case sparkParser.INSERT:
                        case sparkParser.DELETE:
                        case sparkParser.INTO:
                        case sparkParser.DESCRIBE:
                        case sparkParser.EXPLAIN:
                        case sparkParser.FORMAT:
                        case sparkParser.LOGICAL:
                        case sparkParser.CODEGEN:
                        case sparkParser.COST:
                        case sparkParser.CAST:
                        case sparkParser.SHOW:
                        case sparkParser.TABLES:
                        case sparkParser.COLUMNS:
                        case sparkParser.COLUMN:
                        case sparkParser.USE:
                        case sparkParser.PARTITIONS:
                        case sparkParser.FUNCTIONS:
                        case sparkParser.DROP:
                        case sparkParser.UNION:
                        case sparkParser.EXCEPT:
                        case sparkParser.SETMINUS:
                        case sparkParser.INTERSECT:
                        case sparkParser.TO:
                        case sparkParser.TABLESAMPLE:
                        case sparkParser.STRATIFY:
                        case sparkParser.ALTER:
                        case sparkParser.RENAME:
                        case sparkParser.ARRAY:
                        case sparkParser.MAP:
                        case sparkParser.STRUCT:
                        case sparkParser.COMMENT:
                        case sparkParser.SET:
                        case sparkParser.RESET:
                        case sparkParser.DATA:
                        case sparkParser.START:
                        case sparkParser.TRANSACTION:
                        case sparkParser.COMMIT:
                        case sparkParser.ROLLBACK:
                        case sparkParser.MACRO:
                        case sparkParser.IGNORE:
                        case sparkParser.BOTH:
                        case sparkParser.LEADING:
                        case sparkParser.TRAILING:
                        case sparkParser.IF:
                        case sparkParser.POSITION:
                        case sparkParser.EXTRACT:
                        case sparkParser.DIV:
                        case sparkParser.PERCENTLIT:
                        case sparkParser.BUCKET:
                        case sparkParser.OUT:
                        case sparkParser.OF:
                        case sparkParser.SORT:
                        case sparkParser.CLUSTER:
                        case sparkParser.DISTRIBUTE:
                        case sparkParser.OVERWRITE:
                        case sparkParser.TRANSFORM:
                        case sparkParser.REDUCE:
                        case sparkParser.SERDE:
                        case sparkParser.SERDEPROPERTIES:
                        case sparkParser.RECORDREADER:
                        case sparkParser.RECORDWRITER:
                        case sparkParser.DELIMITED:
                        case sparkParser.FIELDS:
                        case sparkParser.TERMINATED:
                        case sparkParser.COLLECTION:
                        case sparkParser.ITEMS:
                        case sparkParser.KEYS:
                        case sparkParser.ESCAPED:
                        case sparkParser.LINES:
                        case sparkParser.SEPARATED:
                        case sparkParser.FUNCTION:
                        case sparkParser.EXTENDED:
                        case sparkParser.REFRESH:
                        case sparkParser.CLEAR:
                        case sparkParser.CACHE:
                        case sparkParser.UNCACHE:
                        case sparkParser.LAZY:
                        case sparkParser.FORMATTED:
                        case sparkParser.GLOBAL:
                        case sparkParser.TEMPORARY:
                        case sparkParser.OPTIONS:
                        case sparkParser.UNSET:
                        case sparkParser.TBLPROPERTIES:
                        case sparkParser.DBPROPERTIES:
                        case sparkParser.BUCKETS:
                        case sparkParser.SKEWED:
                        case sparkParser.STORED:
                        case sparkParser.DIRECTORIES:
                        case sparkParser.LOCATION:
                        case sparkParser.EXCHANGE:
                        case sparkParser.ARCHIVE:
                        case sparkParser.UNARCHIVE:
                        case sparkParser.FILEFORMAT:
                        case sparkParser.TOUCH:
                        case sparkParser.COMPACT:
                        case sparkParser.CONCATENATE:
                        case sparkParser.CHANGE:
                        case sparkParser.CASCADE:
                        case sparkParser.RESTRICT:
                        case sparkParser.CLUSTERED:
                        case sparkParser.SORTED:
                        case sparkParser.PURGE:
                        case sparkParser.INPUTFORMAT:
                        case sparkParser.OUTPUTFORMAT:
                        case sparkParser.DATABASE:
                        case sparkParser.DATABASES:
                        case sparkParser.DFS:
                        case sparkParser.TRUNCATE:
                        case sparkParser.ANALYZE:
                        case sparkParser.COMPUTE:
                        case sparkParser.LIST:
                        case sparkParser.STATISTICS:
                        case sparkParser.PARTITIONED:
                        case sparkParser.EXTERNAL:
                        case sparkParser.DEFINED:
                        case sparkParser.REVOKE:
                        case sparkParser.GRANT:
                        case sparkParser.LOCK:
                        case sparkParser.UNLOCK:
                        case sparkParser.MSCK:
                        case sparkParser.REPAIR:
                        case sparkParser.RECOVER:
                        case sparkParser.EXPORT:
                        case sparkParser.IMPORT:
                        case sparkParser.LOAD:
                        case sparkParser.ROLE:
                        case sparkParser.ROLES:
                        case sparkParser.COMPACTIONS:
                        case sparkParser.PRINCIPALS:
                        case sparkParser.TRANSACTIONS:
                        case sparkParser.INDEX:
                        case sparkParser.INDEXES:
                        case sparkParser.LOCKS:
                        case sparkParser.OPTION:
                        case sparkParser.ANTI:
                        case sparkParser.LOCAL:
                        case sparkParser.INPATH:
                        case sparkParser.IDENTIFIER:
                        case sparkParser.BACKQUOTED_IDENTIFIER:
                            this.state = 702;
                            this.qualifiedName();
                            break;
                        case sparkParser.STRING:
                            this.state = 703;
                            localctx.pattern = this.match(sparkParser.STRING);
                            break;
                        default:
                            throw new antlr4.error.NoViableAltException(this);
                    }
                }
                break;
            case 39:
                localctx = new ShowCreateTableContext(this, localctx);
                this.enterOuterAlt(localctx, 39);
                this.state = 708;
                this.match(sparkParser.SHOW);
                this.state = 709;
                this.match(sparkParser.CREATE);
                this.state = 710;
                this.match(sparkParser.TABLE);
                this.state = 711;
                this.tableIdentifier();
                break;
            case 40:
                localctx = new DescribeFunctionContext(this, localctx);
                this.enterOuterAlt(localctx, 40);
                this.state = 712;
                _la = this._input.LA(1);
                if (!(_la === sparkParser.DESC || _la === sparkParser.DESCRIBE)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 713;
                this.match(sparkParser.FUNCTION);
                this.state = 715;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 75, this._ctx);
                if (la_ === 1) {
                    this.state = 714;
                    this.match(sparkParser.EXTENDED);
                }
                this.state = 717;
                this.describeFuncName();
                break;
            case 41:
                localctx = new DescribeDatabaseContext(this, localctx);
                this.enterOuterAlt(localctx, 41);
                this.state = 718;
                _la = this._input.LA(1);
                if (!(_la === sparkParser.DESC || _la === sparkParser.DESCRIBE)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 719;
                this.match(sparkParser.DATABASE);
                this.state = 721;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 76, this._ctx);
                if (la_ === 1) {
                    this.state = 720;
                    this.match(sparkParser.EXTENDED);
                }
                this.state = 723;
                this.identifier();
                break;
            case 42:
                localctx = new DescribeTableContext(this, localctx);
                this.enterOuterAlt(localctx, 42);
                this.state = 724;
                _la = this._input.LA(1);
                if (!(_la === sparkParser.DESC || _la === sparkParser.DESCRIBE)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 726;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 77, this._ctx);
                if (la_ === 1) {
                    this.state = 725;
                    this.match(sparkParser.TABLE);
                }
                this.state = 729;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 78, this._ctx);
                if (la_ === 1) {
                    this.state = 728;
                    localctx.option = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (!(_la === sparkParser.EXTENDED || _la === sparkParser.FORMATTED)) {
                        localctx.option = this._errHandler.recoverInline(this);
                    }
                    else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }
                this.state = 731;
                this.tableIdentifier();
                this.state = 733;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 79, this._ctx);
                if (la_ === 1) {
                    this.state = 732;
                    this.partitionSpec();
                }
                this.state = 736;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << sparkParser.SELECT) | (1 << sparkParser.FROM) | (1 << sparkParser.ADD) | (1 << sparkParser.AS) | (1 << sparkParser.ALL) | (1 << sparkParser.ANY) | (1 << sparkParser.DISTINCT) | (1 << sparkParser.WHERE) | (1 << sparkParser.GROUP) | (1 << sparkParser.BY) | (1 << sparkParser.GROUPING) | (1 << sparkParser.SETS) | (1 << sparkParser.CUBE) | (1 << sparkParser.ROLLUP) | (1 << sparkParser.ORDER) | (1 << sparkParser.HAVING) | (1 << sparkParser.LIMIT) | (1 << sparkParser.AT) | (1 << sparkParser.OR) | (1 << sparkParser.AND) | (1 << sparkParser.IN))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (sparkParser.NOT - 32)) | (1 << (sparkParser.NO - 32)) | (1 << (sparkParser.EXISTS - 32)) | (1 << (sparkParser.BETWEEN - 32)) | (1 << (sparkParser.LIKE - 32)) | (1 << (sparkParser.RLIKE - 32)) | (1 << (sparkParser.IS - 32)) | (1 << (sparkParser.NULL - 32)) | (1 << (sparkParser.TRUE - 32)) | (1 << (sparkParser.FALSE - 32)) | (1 << (sparkParser.NULLS - 32)) | (1 << (sparkParser.ASC - 32)) | (1 << (sparkParser.DESC - 32)) | (1 << (sparkParser.FOR - 32)) | (1 << (sparkParser.INTERVAL - 32)) | (1 << (sparkParser.CASE - 32)) | (1 << (sparkParser.WHEN - 32)) | (1 << (sparkParser.THEN - 32)) | (1 << (sparkParser.ELSE - 32)) | (1 << (sparkParser.END - 32)) | (1 << (sparkParser.JOIN - 32)) | (1 << (sparkParser.CROSS - 32)) | (1 << (sparkParser.OUTER - 32)) | (1 << (sparkParser.INNER - 32)) | (1 << (sparkParser.LEFT - 32)) | (1 << (sparkParser.SEMI - 32)) | (1 << (sparkParser.RIGHT - 32)) | (1 << (sparkParser.FULL - 32)) | (1 << (sparkParser.NATURAL - 32)) | (1 << (sparkParser.ON - 32)) | (1 << (sparkParser.PIVOT - 32)) | (1 << (sparkParser.LATERAL - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (sparkParser.WINDOW - 64)) | (1 << (sparkParser.OVER - 64)) | (1 << (sparkParser.PARTITION - 64)) | (1 << (sparkParser.RANGE - 64)) | (1 << (sparkParser.ROWS - 64)) | (1 << (sparkParser.UNBOUNDED - 64)) | (1 << (sparkParser.PRECEDING - 64)) | (1 << (sparkParser.FOLLOWING - 64)) | (1 << (sparkParser.CURRENT - 64)) | (1 << (sparkParser.FIRST - 64)) | (1 << (sparkParser.AFTER - 64)) | (1 << (sparkParser.LAST - 64)) | (1 << (sparkParser.ROW - 64)) | (1 << (sparkParser.WITH - 64)) | (1 << (sparkParser.VALUES - 64)) | (1 << (sparkParser.CREATE - 64)) | (1 << (sparkParser.TABLE - 64)) | (1 << (sparkParser.DIRECTORY - 64)) | (1 << (sparkParser.VIEW - 64)) | (1 << (sparkParser.REPLACE - 64)) | (1 << (sparkParser.INSERT - 64)) | (1 << (sparkParser.DELETE - 64)) | (1 << (sparkParser.INTO - 64)) | (1 << (sparkParser.DESCRIBE - 64)) | (1 << (sparkParser.EXPLAIN - 64)) | (1 << (sparkParser.FORMAT - 64)) | (1 << (sparkParser.LOGICAL - 64)) | (1 << (sparkParser.CODEGEN - 64)) | (1 << (sparkParser.COST - 64)) | (1 << (sparkParser.CAST - 64)) | (1 << (sparkParser.SHOW - 64)) | (1 << (sparkParser.TABLES - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (sparkParser.COLUMNS - 96)) | (1 << (sparkParser.COLUMN - 96)) | (1 << (sparkParser.USE - 96)) | (1 << (sparkParser.PARTITIONS - 96)) | (1 << (sparkParser.FUNCTIONS - 96)) | (1 << (sparkParser.DROP - 96)) | (1 << (sparkParser.UNION - 96)) | (1 << (sparkParser.EXCEPT - 96)) | (1 << (sparkParser.SETMINUS - 96)) | (1 << (sparkParser.INTERSECT - 96)) | (1 << (sparkParser.TO - 96)) | (1 << (sparkParser.TABLESAMPLE - 96)) | (1 << (sparkParser.STRATIFY - 96)) | (1 << (sparkParser.ALTER - 96)) | (1 << (sparkParser.RENAME - 96)) | (1 << (sparkParser.ARRAY - 96)) | (1 << (sparkParser.MAP - 96)) | (1 << (sparkParser.STRUCT - 96)) | (1 << (sparkParser.COMMENT - 96)) | (1 << (sparkParser.SET - 96)) | (1 << (sparkParser.RESET - 96)) | (1 << (sparkParser.DATA - 96)) | (1 << (sparkParser.START - 96)) | (1 << (sparkParser.TRANSACTION - 96)) | (1 << (sparkParser.COMMIT - 96)) | (1 << (sparkParser.ROLLBACK - 96)) | (1 << (sparkParser.MACRO - 96)) | (1 << (sparkParser.IGNORE - 96)) | (1 << (sparkParser.BOTH - 96)) | (1 << (sparkParser.LEADING - 96)) | (1 << (sparkParser.TRAILING - 96)) | (1 << (sparkParser.IF - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (sparkParser.POSITION - 128)) | (1 << (sparkParser.EXTRACT - 128)) | (1 << (sparkParser.DIV - 128)) | (1 << (sparkParser.PERCENTLIT - 128)) | (1 << (sparkParser.BUCKET - 128)) | (1 << (sparkParser.OUT - 128)) | (1 << (sparkParser.OF - 128)) | (1 << (sparkParser.SORT - 128)) | (1 << (sparkParser.CLUSTER - 128)) | (1 << (sparkParser.DISTRIBUTE - 128)) | (1 << (sparkParser.OVERWRITE - 128)) | (1 << (sparkParser.TRANSFORM - 128)) | (1 << (sparkParser.REDUCE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (sparkParser.SERDE - 160)) | (1 << (sparkParser.SERDEPROPERTIES - 160)) | (1 << (sparkParser.RECORDREADER - 160)) | (1 << (sparkParser.RECORDWRITER - 160)) | (1 << (sparkParser.DELIMITED - 160)) | (1 << (sparkParser.FIELDS - 160)) | (1 << (sparkParser.TERMINATED - 160)) | (1 << (sparkParser.COLLECTION - 160)) | (1 << (sparkParser.ITEMS - 160)) | (1 << (sparkParser.KEYS - 160)) | (1 << (sparkParser.ESCAPED - 160)) | (1 << (sparkParser.LINES - 160)) | (1 << (sparkParser.SEPARATED - 160)) | (1 << (sparkParser.FUNCTION - 160)) | (1 << (sparkParser.EXTENDED - 160)) | (1 << (sparkParser.REFRESH - 160)) | (1 << (sparkParser.CLEAR - 160)) | (1 << (sparkParser.CACHE - 160)) | (1 << (sparkParser.UNCACHE - 160)) | (1 << (sparkParser.LAZY - 160)) | (1 << (sparkParser.FORMATTED - 160)) | (1 << (sparkParser.GLOBAL - 160)) | (1 << (sparkParser.TEMPORARY - 160)) | (1 << (sparkParser.OPTIONS - 160)) | (1 << (sparkParser.UNSET - 160)) | (1 << (sparkParser.TBLPROPERTIES - 160)) | (1 << (sparkParser.DBPROPERTIES - 160)) | (1 << (sparkParser.BUCKETS - 160)) | (1 << (sparkParser.SKEWED - 160)) | (1 << (sparkParser.STORED - 160)) | (1 << (sparkParser.DIRECTORIES - 160)) | (1 << (sparkParser.LOCATION - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (sparkParser.EXCHANGE - 192)) | (1 << (sparkParser.ARCHIVE - 192)) | (1 << (sparkParser.UNARCHIVE - 192)) | (1 << (sparkParser.FILEFORMAT - 192)) | (1 << (sparkParser.TOUCH - 192)) | (1 << (sparkParser.COMPACT - 192)) | (1 << (sparkParser.CONCATENATE - 192)) | (1 << (sparkParser.CHANGE - 192)) | (1 << (sparkParser.CASCADE - 192)) | (1 << (sparkParser.RESTRICT - 192)) | (1 << (sparkParser.CLUSTERED - 192)) | (1 << (sparkParser.SORTED - 192)) | (1 << (sparkParser.PURGE - 192)) | (1 << (sparkParser.INPUTFORMAT - 192)) | (1 << (sparkParser.OUTPUTFORMAT - 192)) | (1 << (sparkParser.DATABASE - 192)) | (1 << (sparkParser.DATABASES - 192)) | (1 << (sparkParser.DFS - 192)) | (1 << (sparkParser.TRUNCATE - 192)) | (1 << (sparkParser.ANALYZE - 192)) | (1 << (sparkParser.COMPUTE - 192)) | (1 << (sparkParser.LIST - 192)) | (1 << (sparkParser.STATISTICS - 192)) | (1 << (sparkParser.PARTITIONED - 192)) | (1 << (sparkParser.EXTERNAL - 192)) | (1 << (sparkParser.DEFINED - 192)) | (1 << (sparkParser.REVOKE - 192)) | (1 << (sparkParser.GRANT - 192)) | (1 << (sparkParser.LOCK - 192)) | (1 << (sparkParser.UNLOCK - 192)) | (1 << (sparkParser.MSCK - 192)) | (1 << (sparkParser.REPAIR - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (sparkParser.RECOVER - 224)) | (1 << (sparkParser.EXPORT - 224)) | (1 << (sparkParser.IMPORT - 224)) | (1 << (sparkParser.LOAD - 224)) | (1 << (sparkParser.ROLE - 224)) | (1 << (sparkParser.ROLES - 224)) | (1 << (sparkParser.COMPACTIONS - 224)) | (1 << (sparkParser.PRINCIPALS - 224)) | (1 << (sparkParser.TRANSACTIONS - 224)) | (1 << (sparkParser.INDEX - 224)) | (1 << (sparkParser.INDEXES - 224)) | (1 << (sparkParser.LOCKS - 224)) | (1 << (sparkParser.OPTION - 224)) | (1 << (sparkParser.ANTI - 224)) | (1 << (sparkParser.LOCAL - 224)) | (1 << (sparkParser.INPATH - 224)) | (1 << (sparkParser.IDENTIFIER - 224)) | (1 << (sparkParser.BACKQUOTED_IDENTIFIER - 224)))) !== 0)) {
                    this.state = 735;
                    this.describeColName();
                }
                break;
            case 43:
                localctx = new RefreshTableContext(this, localctx);
                this.enterOuterAlt(localctx, 43);
                this.state = 738;
                this.match(sparkParser.REFRESH);
                this.state = 739;
                this.match(sparkParser.TABLE);
                this.state = 740;
                this.tableIdentifier();
                break;
            case 44:
                localctx = new RefreshResourceContext(this, localctx);
                this.enterOuterAlt(localctx, 44);
                this.state = 741;
                this.match(sparkParser.REFRESH);
                this.state = 749;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 82, this._ctx);
                switch (la_) {
                    case 1:
                        this.state = 742;
                        this.match(sparkParser.STRING);
                        break;
                    case 2:
                        this.state = 746;
                        this._errHandler.sync(this);
                        var _alt = this._interp.adaptivePredict(this._input, 81, this._ctx);
                        while (_alt != 1 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1 + 1) {
                                this.state = 743;
                                this.matchWildcard();
                            }
                            this.state = 748;
                            this._errHandler.sync(this);
                            _alt = this._interp.adaptivePredict(this._input, 81, this._ctx);
                        }
                        break;
                }
                break;
            case 45:
                localctx = new CacheTableContext(this, localctx);
                this.enterOuterAlt(localctx, 45);
                this.state = 751;
                this.match(sparkParser.CACHE);
                this.state = 753;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.LAZY) {
                    this.state = 752;
                    this.match(sparkParser.LAZY);
                }
                this.state = 755;
                this.match(sparkParser.TABLE);
                this.state = 756;
                this.tableIdentifier();
                this.state = 759;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.OPTIONS) {
                    this.state = 757;
                    this.match(sparkParser.OPTIONS);
                    this.state = 758;
                    localctx.options = this.tablePropertyList();
                }
                this.state = 765;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << sparkParser.T__0) | (1 << sparkParser.SELECT) | (1 << sparkParser.FROM) | (1 << sparkParser.AS))) !== 0) || ((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (sparkParser.WITH - 77)) | (1 << (sparkParser.VALUES - 77)) | (1 << (sparkParser.TABLE - 77)) | (1 << (sparkParser.INSERT - 77)))) !== 0) || _la === sparkParser.MAP || _la === sparkParser.REDUCE) {
                    this.state = 762;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === sparkParser.AS) {
                        this.state = 761;
                        this.match(sparkParser.AS);
                    }
                    this.state = 764;
                    this.query();
                }
                break;
            case 46:
                localctx = new UncacheTableContext(this, localctx);
                this.enterOuterAlt(localctx, 46);
                this.state = 767;
                this.match(sparkParser.UNCACHE);
                this.state = 768;
                this.match(sparkParser.TABLE);
                this.state = 771;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 87, this._ctx);
                if (la_ === 1) {
                    this.state = 769;
                    this.match(sparkParser.IF);
                    this.state = 770;
                    this.match(sparkParser.EXISTS);
                }
                this.state = 773;
                this.tableIdentifier();
                break;
            case 47:
                localctx = new ClearCacheContext(this, localctx);
                this.enterOuterAlt(localctx, 47);
                this.state = 774;
                this.match(sparkParser.CLEAR);
                this.state = 775;
                this.match(sparkParser.CACHE);
                break;
            case 48:
                localctx = new LoadDataContext(this, localctx);
                this.enterOuterAlt(localctx, 48);
                this.state = 776;
                this.match(sparkParser.LOAD);
                this.state = 777;
                this.match(sparkParser.DATA);
                this.state = 779;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.LOCAL) {
                    this.state = 778;
                    this.match(sparkParser.LOCAL);
                }
                this.state = 781;
                this.match(sparkParser.INPATH);
                this.state = 782;
                localctx.path = this.match(sparkParser.STRING);
                this.state = 784;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.OVERWRITE) {
                    this.state = 783;
                    this.match(sparkParser.OVERWRITE);
                }
                this.state = 786;
                this.match(sparkParser.INTO);
                this.state = 787;
                this.match(sparkParser.TABLE);
                this.state = 788;
                this.tableIdentifier();
                this.state = 790;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.PARTITION) {
                    this.state = 789;
                    this.partitionSpec();
                }
                break;
            case 49:
                localctx = new TruncateTableContext(this, localctx);
                this.enterOuterAlt(localctx, 49);
                this.state = 792;
                this.match(sparkParser.TRUNCATE);
                this.state = 793;
                this.match(sparkParser.TABLE);
                this.state = 794;
                this.tableIdentifier();
                this.state = 796;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.PARTITION) {
                    this.state = 795;
                    this.partitionSpec();
                }
                break;
            case 50:
                localctx = new RepairTableContext(this, localctx);
                this.enterOuterAlt(localctx, 50);
                this.state = 798;
                this.match(sparkParser.MSCK);
                this.state = 799;
                this.match(sparkParser.REPAIR);
                this.state = 800;
                this.match(sparkParser.TABLE);
                this.state = 801;
                this.tableIdentifier();
                break;
            case 51:
                localctx = new ManageResourceContext(this, localctx);
                this.enterOuterAlt(localctx, 51);
                this.state = 802;
                localctx.op = this._input.LT(1);
                _la = this._input.LA(1);
                if (!(_la === sparkParser.ADD || _la === sparkParser.LIST)) {
                    localctx.op = this._errHandler.recoverInline(this);
                }
                else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 803;
                this.identifier();
                this.state = 807;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input, 92, this._ctx);
                while (_alt != 1 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1 + 1) {
                        this.state = 804;
                        this.matchWildcard();
                    }
                    this.state = 809;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input, 92, this._ctx);
                }
                break;
            case 52:
                localctx = new FailNativeCommandContext(this, localctx);
                this.enterOuterAlt(localctx, 52);
                this.state = 810;
                this.match(sparkParser.SET);
                this.state = 811;
                this.match(sparkParser.ROLE);
                this.state = 815;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input, 93, this._ctx);
                while (_alt != 1 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1 + 1) {
                        this.state = 812;
                        this.matchWildcard();
                    }
                    this.state = 817;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input, 93, this._ctx);
                }
                break;
            case 53:
                localctx = new SetConfigurationContext(this, localctx);
                this.enterOuterAlt(localctx, 53);
                this.state = 818;
                this.match(sparkParser.SET);
                this.state = 822;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input, 94, this._ctx);
                while (_alt != 1 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1 + 1) {
                        this.state = 819;
                        this.matchWildcard();
                    }
                    this.state = 824;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input, 94, this._ctx);
                }
                break;
            case 54:
                localctx = new ResetConfigurationContext(this, localctx);
                this.enterOuterAlt(localctx, 54);
                this.state = 825;
                this.match(sparkParser.RESET);
                break;
            case 55:
                localctx = new FailNativeCommandContext(this, localctx);
                this.enterOuterAlt(localctx, 55);
                this.state = 826;
                this.unsupportedHiveNativeCommands();
                this.state = 830;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input, 95, this._ctx);
                while (_alt != 1 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1 + 1) {
                        this.state = 827;
                        this.matchWildcard();
                    }
                    this.state = 832;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input, 95, this._ctx);
                }
                break;
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function UnsupportedHiveNativeCommandsContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_unsupportedHiveNativeCommands;
    this.kw1 = null; // Token
    this.kw2 = null; // Token
    this.kw3 = null; // Token
    this.kw4 = null; // Token
    this.kw5 = null; // Token
    this.kw6 = null; // Token
    return this;
}
UnsupportedHiveNativeCommandsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnsupportedHiveNativeCommandsContext.prototype.constructor = UnsupportedHiveNativeCommandsContext;
UnsupportedHiveNativeCommandsContext.prototype.CREATE = function () {
    return this.getToken(sparkParser.CREATE, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.ROLE = function () {
    return this.getToken(sparkParser.ROLE, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.DROP = function () {
    return this.getToken(sparkParser.DROP, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.GRANT = function () {
    return this.getToken(sparkParser.GRANT, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.REVOKE = function () {
    return this.getToken(sparkParser.REVOKE, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.SHOW = function () {
    return this.getToken(sparkParser.SHOW, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.PRINCIPALS = function () {
    return this.getToken(sparkParser.PRINCIPALS, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.ROLES = function () {
    return this.getToken(sparkParser.ROLES, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.CURRENT = function () {
    return this.getToken(sparkParser.CURRENT, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.EXPORT = function () {
    return this.getToken(sparkParser.EXPORT, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.TABLE = function () {
    return this.getToken(sparkParser.TABLE, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.IMPORT = function () {
    return this.getToken(sparkParser.IMPORT, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.COMPACTIONS = function () {
    return this.getToken(sparkParser.COMPACTIONS, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.TRANSACTIONS = function () {
    return this.getToken(sparkParser.TRANSACTIONS, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.INDEXES = function () {
    return this.getToken(sparkParser.INDEXES, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.LOCKS = function () {
    return this.getToken(sparkParser.LOCKS, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.INDEX = function () {
    return this.getToken(sparkParser.INDEX, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.ALTER = function () {
    return this.getToken(sparkParser.ALTER, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.LOCK = function () {
    return this.getToken(sparkParser.LOCK, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.DATABASE = function () {
    return this.getToken(sparkParser.DATABASE, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.UNLOCK = function () {
    return this.getToken(sparkParser.UNLOCK, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.TEMPORARY = function () {
    return this.getToken(sparkParser.TEMPORARY, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.MACRO = function () {
    return this.getToken(sparkParser.MACRO, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.tableIdentifier = function () {
    return this.getTypedRuleContext(TableIdentifierContext, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.NOT = function () {
    return this.getToken(sparkParser.NOT, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.CLUSTERED = function () {
    return this.getToken(sparkParser.CLUSTERED, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.BY = function () {
    return this.getToken(sparkParser.BY, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.SORTED = function () {
    return this.getToken(sparkParser.SORTED, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.SKEWED = function () {
    return this.getToken(sparkParser.SKEWED, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.STORED = function () {
    return this.getToken(sparkParser.STORED, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.AS = function () {
    return this.getToken(sparkParser.AS, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.DIRECTORIES = function () {
    return this.getToken(sparkParser.DIRECTORIES, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.SET = function () {
    return this.getToken(sparkParser.SET, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.LOCATION = function () {
    return this.getToken(sparkParser.LOCATION, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.EXCHANGE = function () {
    return this.getToken(sparkParser.EXCHANGE, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.PARTITION = function () {
    return this.getToken(sparkParser.PARTITION, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.ARCHIVE = function () {
    return this.getToken(sparkParser.ARCHIVE, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.UNARCHIVE = function () {
    return this.getToken(sparkParser.UNARCHIVE, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.TOUCH = function () {
    return this.getToken(sparkParser.TOUCH, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.COMPACT = function () {
    return this.getToken(sparkParser.COMPACT, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.partitionSpec = function () {
    return this.getTypedRuleContext(PartitionSpecContext, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.CONCATENATE = function () {
    return this.getToken(sparkParser.CONCATENATE, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.FILEFORMAT = function () {
    return this.getToken(sparkParser.FILEFORMAT, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.REPLACE = function () {
    return this.getToken(sparkParser.REPLACE, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.COLUMNS = function () {
    return this.getToken(sparkParser.COLUMNS, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.START = function () {
    return this.getToken(sparkParser.START, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.TRANSACTION = function () {
    return this.getToken(sparkParser.TRANSACTION, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.COMMIT = function () {
    return this.getToken(sparkParser.COMMIT, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.ROLLBACK = function () {
    return this.getToken(sparkParser.ROLLBACK, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.DFS = function () {
    return this.getToken(sparkParser.DFS, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.DELETE = function () {
    return this.getToken(sparkParser.DELETE, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.FROM = function () {
    return this.getToken(sparkParser.FROM, 0);
};
UnsupportedHiveNativeCommandsContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterUnsupportedHiveNativeCommands(this);
    }
};
UnsupportedHiveNativeCommandsContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitUnsupportedHiveNativeCommands(this);
    }
};
UnsupportedHiveNativeCommandsContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitUnsupportedHiveNativeCommands(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.UnsupportedHiveNativeCommandsContext = UnsupportedHiveNativeCommandsContext;
sparkParser.prototype.unsupportedHiveNativeCommands = function () {
    var localctx = new UnsupportedHiveNativeCommandsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, sparkParser.RULE_unsupportedHiveNativeCommands);
    var _la = 0; // Token type
    try {
        this.state = 1005;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 104, this._ctx);
        switch (la_) {
            case 1:
                this.enterOuterAlt(localctx, 1);
                this.state = 835;
                localctx.kw1 = this.match(sparkParser.CREATE);
                this.state = 836;
                localctx.kw2 = this.match(sparkParser.ROLE);
                break;
            case 2:
                this.enterOuterAlt(localctx, 2);
                this.state = 837;
                localctx.kw1 = this.match(sparkParser.DROP);
                this.state = 838;
                localctx.kw2 = this.match(sparkParser.ROLE);
                break;
            case 3:
                this.enterOuterAlt(localctx, 3);
                this.state = 839;
                localctx.kw1 = this.match(sparkParser.GRANT);
                this.state = 841;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 97, this._ctx);
                if (la_ === 1) {
                    this.state = 840;
                    localctx.kw2 = this.match(sparkParser.ROLE);
                }
                break;
            case 4:
                this.enterOuterAlt(localctx, 4);
                this.state = 843;
                localctx.kw1 = this.match(sparkParser.REVOKE);
                this.state = 845;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 98, this._ctx);
                if (la_ === 1) {
                    this.state = 844;
                    localctx.kw2 = this.match(sparkParser.ROLE);
                }
                break;
            case 5:
                this.enterOuterAlt(localctx, 5);
                this.state = 847;
                localctx.kw1 = this.match(sparkParser.SHOW);
                this.state = 848;
                localctx.kw2 = this.match(sparkParser.GRANT);
                break;
            case 6:
                this.enterOuterAlt(localctx, 6);
                this.state = 849;
                localctx.kw1 = this.match(sparkParser.SHOW);
                this.state = 850;
                localctx.kw2 = this.match(sparkParser.ROLE);
                this.state = 852;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 99, this._ctx);
                if (la_ === 1) {
                    this.state = 851;
                    localctx.kw3 = this.match(sparkParser.GRANT);
                }
                break;
            case 7:
                this.enterOuterAlt(localctx, 7);
                this.state = 854;
                localctx.kw1 = this.match(sparkParser.SHOW);
                this.state = 855;
                localctx.kw2 = this.match(sparkParser.PRINCIPALS);
                break;
            case 8:
                this.enterOuterAlt(localctx, 8);
                this.state = 856;
                localctx.kw1 = this.match(sparkParser.SHOW);
                this.state = 857;
                localctx.kw2 = this.match(sparkParser.ROLES);
                break;
            case 9:
                this.enterOuterAlt(localctx, 9);
                this.state = 858;
                localctx.kw1 = this.match(sparkParser.SHOW);
                this.state = 859;
                localctx.kw2 = this.match(sparkParser.CURRENT);
                this.state = 860;
                localctx.kw3 = this.match(sparkParser.ROLES);
                break;
            case 10:
                this.enterOuterAlt(localctx, 10);
                this.state = 861;
                localctx.kw1 = this.match(sparkParser.EXPORT);
                this.state = 862;
                localctx.kw2 = this.match(sparkParser.TABLE);
                break;
            case 11:
                this.enterOuterAlt(localctx, 11);
                this.state = 863;
                localctx.kw1 = this.match(sparkParser.IMPORT);
                this.state = 864;
                localctx.kw2 = this.match(sparkParser.TABLE);
                break;
            case 12:
                this.enterOuterAlt(localctx, 12);
                this.state = 865;
                localctx.kw1 = this.match(sparkParser.SHOW);
                this.state = 866;
                localctx.kw2 = this.match(sparkParser.COMPACTIONS);
                break;
            case 13:
                this.enterOuterAlt(localctx, 13);
                this.state = 867;
                localctx.kw1 = this.match(sparkParser.SHOW);
                this.state = 868;
                localctx.kw2 = this.match(sparkParser.CREATE);
                this.state = 869;
                localctx.kw3 = this.match(sparkParser.TABLE);
                break;
            case 14:
                this.enterOuterAlt(localctx, 14);
                this.state = 870;
                localctx.kw1 = this.match(sparkParser.SHOW);
                this.state = 871;
                localctx.kw2 = this.match(sparkParser.TRANSACTIONS);
                break;
            case 15:
                this.enterOuterAlt(localctx, 15);
                this.state = 872;
                localctx.kw1 = this.match(sparkParser.SHOW);
                this.state = 873;
                localctx.kw2 = this.match(sparkParser.INDEXES);
                break;
            case 16:
                this.enterOuterAlt(localctx, 16);
                this.state = 874;
                localctx.kw1 = this.match(sparkParser.SHOW);
                this.state = 875;
                localctx.kw2 = this.match(sparkParser.LOCKS);
                break;
            case 17:
                this.enterOuterAlt(localctx, 17);
                this.state = 876;
                localctx.kw1 = this.match(sparkParser.CREATE);
                this.state = 877;
                localctx.kw2 = this.match(sparkParser.INDEX);
                break;
            case 18:
                this.enterOuterAlt(localctx, 18);
                this.state = 878;
                localctx.kw1 = this.match(sparkParser.DROP);
                this.state = 879;
                localctx.kw2 = this.match(sparkParser.INDEX);
                break;
            case 19:
                this.enterOuterAlt(localctx, 19);
                this.state = 880;
                localctx.kw1 = this.match(sparkParser.ALTER);
                this.state = 881;
                localctx.kw2 = this.match(sparkParser.INDEX);
                break;
            case 20:
                this.enterOuterAlt(localctx, 20);
                this.state = 882;
                localctx.kw1 = this.match(sparkParser.LOCK);
                this.state = 883;
                localctx.kw2 = this.match(sparkParser.TABLE);
                break;
            case 21:
                this.enterOuterAlt(localctx, 21);
                this.state = 884;
                localctx.kw1 = this.match(sparkParser.LOCK);
                this.state = 885;
                localctx.kw2 = this.match(sparkParser.DATABASE);
                break;
            case 22:
                this.enterOuterAlt(localctx, 22);
                this.state = 886;
                localctx.kw1 = this.match(sparkParser.UNLOCK);
                this.state = 887;
                localctx.kw2 = this.match(sparkParser.TABLE);
                break;
            case 23:
                this.enterOuterAlt(localctx, 23);
                this.state = 888;
                localctx.kw1 = this.match(sparkParser.UNLOCK);
                this.state = 889;
                localctx.kw2 = this.match(sparkParser.DATABASE);
                break;
            case 24:
                this.enterOuterAlt(localctx, 24);
                this.state = 890;
                localctx.kw1 = this.match(sparkParser.CREATE);
                this.state = 891;
                localctx.kw2 = this.match(sparkParser.TEMPORARY);
                this.state = 892;
                localctx.kw3 = this.match(sparkParser.MACRO);
                break;
            case 25:
                this.enterOuterAlt(localctx, 25);
                this.state = 893;
                localctx.kw1 = this.match(sparkParser.DROP);
                this.state = 894;
                localctx.kw2 = this.match(sparkParser.TEMPORARY);
                this.state = 895;
                localctx.kw3 = this.match(sparkParser.MACRO);
                break;
            case 26:
                this.enterOuterAlt(localctx, 26);
                this.state = 896;
                localctx.kw1 = this.match(sparkParser.ALTER);
                this.state = 897;
                localctx.kw2 = this.match(sparkParser.TABLE);
                this.state = 898;
                this.tableIdentifier();
                this.state = 899;
                localctx.kw3 = this.match(sparkParser.NOT);
                this.state = 900;
                localctx.kw4 = this.match(sparkParser.CLUSTERED);
                break;
            case 27:
                this.enterOuterAlt(localctx, 27);
                this.state = 902;
                localctx.kw1 = this.match(sparkParser.ALTER);
                this.state = 903;
                localctx.kw2 = this.match(sparkParser.TABLE);
                this.state = 904;
                this.tableIdentifier();
                this.state = 905;
                localctx.kw3 = this.match(sparkParser.CLUSTERED);
                this.state = 906;
                localctx.kw4 = this.match(sparkParser.BY);
                break;
            case 28:
                this.enterOuterAlt(localctx, 28);
                this.state = 908;
                localctx.kw1 = this.match(sparkParser.ALTER);
                this.state = 909;
                localctx.kw2 = this.match(sparkParser.TABLE);
                this.state = 910;
                this.tableIdentifier();
                this.state = 911;
                localctx.kw3 = this.match(sparkParser.NOT);
                this.state = 912;
                localctx.kw4 = this.match(sparkParser.SORTED);
                break;
            case 29:
                this.enterOuterAlt(localctx, 29);
                this.state = 914;
                localctx.kw1 = this.match(sparkParser.ALTER);
                this.state = 915;
                localctx.kw2 = this.match(sparkParser.TABLE);
                this.state = 916;
                this.tableIdentifier();
                this.state = 917;
                localctx.kw3 = this.match(sparkParser.SKEWED);
                this.state = 918;
                localctx.kw4 = this.match(sparkParser.BY);
                break;
            case 30:
                this.enterOuterAlt(localctx, 30);
                this.state = 920;
                localctx.kw1 = this.match(sparkParser.ALTER);
                this.state = 921;
                localctx.kw2 = this.match(sparkParser.TABLE);
                this.state = 922;
                this.tableIdentifier();
                this.state = 923;
                localctx.kw3 = this.match(sparkParser.NOT);
                this.state = 924;
                localctx.kw4 = this.match(sparkParser.SKEWED);
                break;
            case 31:
                this.enterOuterAlt(localctx, 31);
                this.state = 926;
                localctx.kw1 = this.match(sparkParser.ALTER);
                this.state = 927;
                localctx.kw2 = this.match(sparkParser.TABLE);
                this.state = 928;
                this.tableIdentifier();
                this.state = 929;
                localctx.kw3 = this.match(sparkParser.NOT);
                this.state = 930;
                localctx.kw4 = this.match(sparkParser.STORED);
                this.state = 931;
                localctx.kw5 = this.match(sparkParser.AS);
                this.state = 932;
                localctx.kw6 = this.match(sparkParser.DIRECTORIES);
                break;
            case 32:
                this.enterOuterAlt(localctx, 32);
                this.state = 934;
                localctx.kw1 = this.match(sparkParser.ALTER);
                this.state = 935;
                localctx.kw2 = this.match(sparkParser.TABLE);
                this.state = 936;
                this.tableIdentifier();
                this.state = 937;
                localctx.kw3 = this.match(sparkParser.SET);
                this.state = 938;
                localctx.kw4 = this.match(sparkParser.SKEWED);
                this.state = 939;
                localctx.kw5 = this.match(sparkParser.LOCATION);
                break;
            case 33:
                this.enterOuterAlt(localctx, 33);
                this.state = 941;
                localctx.kw1 = this.match(sparkParser.ALTER);
                this.state = 942;
                localctx.kw2 = this.match(sparkParser.TABLE);
                this.state = 943;
                this.tableIdentifier();
                this.state = 944;
                localctx.kw3 = this.match(sparkParser.EXCHANGE);
                this.state = 945;
                localctx.kw4 = this.match(sparkParser.PARTITION);
                break;
            case 34:
                this.enterOuterAlt(localctx, 34);
                this.state = 947;
                localctx.kw1 = this.match(sparkParser.ALTER);
                this.state = 948;
                localctx.kw2 = this.match(sparkParser.TABLE);
                this.state = 949;
                this.tableIdentifier();
                this.state = 950;
                localctx.kw3 = this.match(sparkParser.ARCHIVE);
                this.state = 951;
                localctx.kw4 = this.match(sparkParser.PARTITION);
                break;
            case 35:
                this.enterOuterAlt(localctx, 35);
                this.state = 953;
                localctx.kw1 = this.match(sparkParser.ALTER);
                this.state = 954;
                localctx.kw2 = this.match(sparkParser.TABLE);
                this.state = 955;
                this.tableIdentifier();
                this.state = 956;
                localctx.kw3 = this.match(sparkParser.UNARCHIVE);
                this.state = 957;
                localctx.kw4 = this.match(sparkParser.PARTITION);
                break;
            case 36:
                this.enterOuterAlt(localctx, 36);
                this.state = 959;
                localctx.kw1 = this.match(sparkParser.ALTER);
                this.state = 960;
                localctx.kw2 = this.match(sparkParser.TABLE);
                this.state = 961;
                this.tableIdentifier();
                this.state = 962;
                localctx.kw3 = this.match(sparkParser.TOUCH);
                break;
            case 37:
                this.enterOuterAlt(localctx, 37);
                this.state = 964;
                localctx.kw1 = this.match(sparkParser.ALTER);
                this.state = 965;
                localctx.kw2 = this.match(sparkParser.TABLE);
                this.state = 966;
                this.tableIdentifier();
                this.state = 968;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.PARTITION) {
                    this.state = 967;
                    this.partitionSpec();
                }
                this.state = 970;
                localctx.kw3 = this.match(sparkParser.COMPACT);
                break;
            case 38:
                this.enterOuterAlt(localctx, 38);
                this.state = 972;
                localctx.kw1 = this.match(sparkParser.ALTER);
                this.state = 973;
                localctx.kw2 = this.match(sparkParser.TABLE);
                this.state = 974;
                this.tableIdentifier();
                this.state = 976;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.PARTITION) {
                    this.state = 975;
                    this.partitionSpec();
                }
                this.state = 978;
                localctx.kw3 = this.match(sparkParser.CONCATENATE);
                break;
            case 39:
                this.enterOuterAlt(localctx, 39);
                this.state = 980;
                localctx.kw1 = this.match(sparkParser.ALTER);
                this.state = 981;
                localctx.kw2 = this.match(sparkParser.TABLE);
                this.state = 982;
                this.tableIdentifier();
                this.state = 984;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.PARTITION) {
                    this.state = 983;
                    this.partitionSpec();
                }
                this.state = 986;
                localctx.kw3 = this.match(sparkParser.SET);
                this.state = 987;
                localctx.kw4 = this.match(sparkParser.FILEFORMAT);
                break;
            case 40:
                this.enterOuterAlt(localctx, 40);
                this.state = 989;
                localctx.kw1 = this.match(sparkParser.ALTER);
                this.state = 990;
                localctx.kw2 = this.match(sparkParser.TABLE);
                this.state = 991;
                this.tableIdentifier();
                this.state = 993;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.PARTITION) {
                    this.state = 992;
                    this.partitionSpec();
                }
                this.state = 995;
                localctx.kw3 = this.match(sparkParser.REPLACE);
                this.state = 996;
                localctx.kw4 = this.match(sparkParser.COLUMNS);
                break;
            case 41:
                this.enterOuterAlt(localctx, 41);
                this.state = 998;
                localctx.kw1 = this.match(sparkParser.START);
                this.state = 999;
                localctx.kw2 = this.match(sparkParser.TRANSACTION);
                break;
            case 42:
                this.enterOuterAlt(localctx, 42);
                this.state = 1000;
                localctx.kw1 = this.match(sparkParser.COMMIT);
                break;
            case 43:
                this.enterOuterAlt(localctx, 43);
                this.state = 1001;
                localctx.kw1 = this.match(sparkParser.ROLLBACK);
                break;
            case 44:
                this.enterOuterAlt(localctx, 44);
                this.state = 1002;
                localctx.kw1 = this.match(sparkParser.DFS);
                break;
            case 45:
                this.enterOuterAlt(localctx, 45);
                this.state = 1003;
                localctx.kw1 = this.match(sparkParser.DELETE);
                this.state = 1004;
                localctx.kw2 = this.match(sparkParser.FROM);
                break;
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function CreateTableHeaderContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_createTableHeader;
    return this;
}
CreateTableHeaderContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateTableHeaderContext.prototype.constructor = CreateTableHeaderContext;
CreateTableHeaderContext.prototype.CREATE = function () {
    return this.getToken(sparkParser.CREATE, 0);
};
CreateTableHeaderContext.prototype.TABLE = function () {
    return this.getToken(sparkParser.TABLE, 0);
};
CreateTableHeaderContext.prototype.tableIdentifier = function () {
    return this.getTypedRuleContext(TableIdentifierContext, 0);
};
CreateTableHeaderContext.prototype.TEMPORARY = function () {
    return this.getToken(sparkParser.TEMPORARY, 0);
};
CreateTableHeaderContext.prototype.EXTERNAL = function () {
    return this.getToken(sparkParser.EXTERNAL, 0);
};
CreateTableHeaderContext.prototype.IF = function () {
    return this.getToken(sparkParser.IF, 0);
};
CreateTableHeaderContext.prototype.NOT = function () {
    return this.getToken(sparkParser.NOT, 0);
};
CreateTableHeaderContext.prototype.EXISTS = function () {
    return this.getToken(sparkParser.EXISTS, 0);
};
CreateTableHeaderContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterCreateTableHeader(this);
    }
};
CreateTableHeaderContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitCreateTableHeader(this);
    }
};
CreateTableHeaderContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitCreateTableHeader(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.CreateTableHeaderContext = CreateTableHeaderContext;
sparkParser.prototype.createTableHeader = function () {
    var localctx = new CreateTableHeaderContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, sparkParser.RULE_createTableHeader);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1007;
        this.match(sparkParser.CREATE);
        this.state = 1009;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === sparkParser.TEMPORARY) {
            this.state = 1008;
            this.match(sparkParser.TEMPORARY);
        }
        this.state = 1012;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === sparkParser.EXTERNAL) {
            this.state = 1011;
            this.match(sparkParser.EXTERNAL);
        }
        this.state = 1014;
        this.match(sparkParser.TABLE);
        this.state = 1018;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 107, this._ctx);
        if (la_ === 1) {
            this.state = 1015;
            this.match(sparkParser.IF);
            this.state = 1016;
            this.match(sparkParser.NOT);
            this.state = 1017;
            this.match(sparkParser.EXISTS);
        }
        this.state = 1020;
        this.tableIdentifier();
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function BucketSpecContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_bucketSpec;
    return this;
}
BucketSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BucketSpecContext.prototype.constructor = BucketSpecContext;
BucketSpecContext.prototype.CLUSTERED = function () {
    return this.getToken(sparkParser.CLUSTERED, 0);
};
BucketSpecContext.prototype.BY = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(sparkParser.BY);
    }
    else {
        return this.getToken(sparkParser.BY, i);
    }
};
BucketSpecContext.prototype.identifierList = function () {
    return this.getTypedRuleContext(IdentifierListContext, 0);
};
BucketSpecContext.prototype.INTO = function () {
    return this.getToken(sparkParser.INTO, 0);
};
BucketSpecContext.prototype.INTEGER_VALUE = function () {
    return this.getToken(sparkParser.INTEGER_VALUE, 0);
};
BucketSpecContext.prototype.BUCKETS = function () {
    return this.getToken(sparkParser.BUCKETS, 0);
};
BucketSpecContext.prototype.SORTED = function () {
    return this.getToken(sparkParser.SORTED, 0);
};
BucketSpecContext.prototype.orderedIdentifierList = function () {
    return this.getTypedRuleContext(OrderedIdentifierListContext, 0);
};
BucketSpecContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterBucketSpec(this);
    }
};
BucketSpecContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitBucketSpec(this);
    }
};
BucketSpecContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitBucketSpec(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.BucketSpecContext = BucketSpecContext;
sparkParser.prototype.bucketSpec = function () {
    var localctx = new BucketSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, sparkParser.RULE_bucketSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1022;
        this.match(sparkParser.CLUSTERED);
        this.state = 1023;
        this.match(sparkParser.BY);
        this.state = 1024;
        this.identifierList();
        this.state = 1028;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === sparkParser.SORTED) {
            this.state = 1025;
            this.match(sparkParser.SORTED);
            this.state = 1026;
            this.match(sparkParser.BY);
            this.state = 1027;
            this.orderedIdentifierList();
        }
        this.state = 1030;
        this.match(sparkParser.INTO);
        this.state = 1031;
        this.match(sparkParser.INTEGER_VALUE);
        this.state = 1032;
        this.match(sparkParser.BUCKETS);
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function SkewSpecContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_skewSpec;
    return this;
}
SkewSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SkewSpecContext.prototype.constructor = SkewSpecContext;
SkewSpecContext.prototype.SKEWED = function () {
    return this.getToken(sparkParser.SKEWED, 0);
};
SkewSpecContext.prototype.BY = function () {
    return this.getToken(sparkParser.BY, 0);
};
SkewSpecContext.prototype.identifierList = function () {
    return this.getTypedRuleContext(IdentifierListContext, 0);
};
SkewSpecContext.prototype.ON = function () {
    return this.getToken(sparkParser.ON, 0);
};
SkewSpecContext.prototype.constantList = function () {
    return this.getTypedRuleContext(ConstantListContext, 0);
};
SkewSpecContext.prototype.nestedConstantList = function () {
    return this.getTypedRuleContext(NestedConstantListContext, 0);
};
SkewSpecContext.prototype.STORED = function () {
    return this.getToken(sparkParser.STORED, 0);
};
SkewSpecContext.prototype.AS = function () {
    return this.getToken(sparkParser.AS, 0);
};
SkewSpecContext.prototype.DIRECTORIES = function () {
    return this.getToken(sparkParser.DIRECTORIES, 0);
};
SkewSpecContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterSkewSpec(this);
    }
};
SkewSpecContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitSkewSpec(this);
    }
};
SkewSpecContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitSkewSpec(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.SkewSpecContext = SkewSpecContext;
sparkParser.prototype.skewSpec = function () {
    var localctx = new SkewSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, sparkParser.RULE_skewSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1034;
        this.match(sparkParser.SKEWED);
        this.state = 1035;
        this.match(sparkParser.BY);
        this.state = 1036;
        this.identifierList();
        this.state = 1037;
        this.match(sparkParser.ON);
        this.state = 1040;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 109, this._ctx);
        switch (la_) {
            case 1:
                this.state = 1038;
                this.constantList();
                break;
            case 2:
                this.state = 1039;
                this.nestedConstantList();
                break;
        }
        this.state = 1045;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 110, this._ctx);
        if (la_ === 1) {
            this.state = 1042;
            this.match(sparkParser.STORED);
            this.state = 1043;
            this.match(sparkParser.AS);
            this.state = 1044;
            this.match(sparkParser.DIRECTORIES);
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function LocationSpecContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_locationSpec;
    return this;
}
LocationSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocationSpecContext.prototype.constructor = LocationSpecContext;
LocationSpecContext.prototype.LOCATION = function () {
    return this.getToken(sparkParser.LOCATION, 0);
};
LocationSpecContext.prototype.STRING = function () {
    return this.getToken(sparkParser.STRING, 0);
};
LocationSpecContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterLocationSpec(this);
    }
};
LocationSpecContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitLocationSpec(this);
    }
};
LocationSpecContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitLocationSpec(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.LocationSpecContext = LocationSpecContext;
sparkParser.prototype.locationSpec = function () {
    var localctx = new LocationSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, sparkParser.RULE_locationSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1047;
        this.match(sparkParser.LOCATION);
        this.state = 1048;
        this.match(sparkParser.STRING);
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function QueryContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_query;
    return this;
}
QueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryContext.prototype.constructor = QueryContext;
QueryContext.prototype.queryNoWith = function () {
    return this.getTypedRuleContext(QueryNoWithContext, 0);
};
QueryContext.prototype.ctes = function () {
    return this.getTypedRuleContext(CtesContext, 0);
};
QueryContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterQuery(this);
    }
};
QueryContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitQuery(this);
    }
};
QueryContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitQuery(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.QueryContext = QueryContext;
sparkParser.prototype.query = function () {
    var localctx = new QueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, sparkParser.RULE_query);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1051;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === sparkParser.WITH) {
            this.state = 1050;
            this.ctes();
        }
        this.state = 1053;
        this.queryNoWith();
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function InsertIntoContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_insertInto;
    return this;
}
InsertIntoContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InsertIntoContext.prototype.constructor = InsertIntoContext;
InsertIntoContext.prototype.copyFrom = function (ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};
function InsertOverwriteHiveDirContext(parser, ctx) {
    InsertIntoContext.call(this, parser);
    this.path = null; // Token;
    InsertIntoContext.prototype.copyFrom.call(this, ctx);
    return this;
}
InsertOverwriteHiveDirContext.prototype = Object.create(InsertIntoContext.prototype);
InsertOverwriteHiveDirContext.prototype.constructor = InsertOverwriteHiveDirContext;
sparkParser.InsertOverwriteHiveDirContext = InsertOverwriteHiveDirContext;
InsertOverwriteHiveDirContext.prototype.INSERT = function () {
    return this.getToken(sparkParser.INSERT, 0);
};
InsertOverwriteHiveDirContext.prototype.OVERWRITE = function () {
    return this.getToken(sparkParser.OVERWRITE, 0);
};
InsertOverwriteHiveDirContext.prototype.DIRECTORY = function () {
    return this.getToken(sparkParser.DIRECTORY, 0);
};
InsertOverwriteHiveDirContext.prototype.STRING = function () {
    return this.getToken(sparkParser.STRING, 0);
};
InsertOverwriteHiveDirContext.prototype.LOCAL = function () {
    return this.getToken(sparkParser.LOCAL, 0);
};
InsertOverwriteHiveDirContext.prototype.rowFormat = function () {
    return this.getTypedRuleContext(RowFormatContext, 0);
};
InsertOverwriteHiveDirContext.prototype.createFileFormat = function () {
    return this.getTypedRuleContext(CreateFileFormatContext, 0);
};
InsertOverwriteHiveDirContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterInsertOverwriteHiveDir(this);
    }
};
InsertOverwriteHiveDirContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitInsertOverwriteHiveDir(this);
    }
};
InsertOverwriteHiveDirContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitInsertOverwriteHiveDir(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function InsertOverwriteDirContext(parser, ctx) {
    InsertIntoContext.call(this, parser);
    this.path = null; // Token;
    this.options = null; // TablePropertyListContext;
    InsertIntoContext.prototype.copyFrom.call(this, ctx);
    return this;
}
InsertOverwriteDirContext.prototype = Object.create(InsertIntoContext.prototype);
InsertOverwriteDirContext.prototype.constructor = InsertOverwriteDirContext;
sparkParser.InsertOverwriteDirContext = InsertOverwriteDirContext;
InsertOverwriteDirContext.prototype.INSERT = function () {
    return this.getToken(sparkParser.INSERT, 0);
};
InsertOverwriteDirContext.prototype.OVERWRITE = function () {
    return this.getToken(sparkParser.OVERWRITE, 0);
};
InsertOverwriteDirContext.prototype.DIRECTORY = function () {
    return this.getToken(sparkParser.DIRECTORY, 0);
};
InsertOverwriteDirContext.prototype.tableProvider = function () {
    return this.getTypedRuleContext(TableProviderContext, 0);
};
InsertOverwriteDirContext.prototype.LOCAL = function () {
    return this.getToken(sparkParser.LOCAL, 0);
};
InsertOverwriteDirContext.prototype.OPTIONS = function () {
    return this.getToken(sparkParser.OPTIONS, 0);
};
InsertOverwriteDirContext.prototype.STRING = function () {
    return this.getToken(sparkParser.STRING, 0);
};
InsertOverwriteDirContext.prototype.tablePropertyList = function () {
    return this.getTypedRuleContext(TablePropertyListContext, 0);
};
InsertOverwriteDirContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterInsertOverwriteDir(this);
    }
};
InsertOverwriteDirContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitInsertOverwriteDir(this);
    }
};
InsertOverwriteDirContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitInsertOverwriteDir(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function InsertOverwriteTableContext(parser, ctx) {
    InsertIntoContext.call(this, parser);
    InsertIntoContext.prototype.copyFrom.call(this, ctx);
    return this;
}
InsertOverwriteTableContext.prototype = Object.create(InsertIntoContext.prototype);
InsertOverwriteTableContext.prototype.constructor = InsertOverwriteTableContext;
sparkParser.InsertOverwriteTableContext = InsertOverwriteTableContext;
InsertOverwriteTableContext.prototype.INSERT = function () {
    return this.getToken(sparkParser.INSERT, 0);
};
InsertOverwriteTableContext.prototype.OVERWRITE = function () {
    return this.getToken(sparkParser.OVERWRITE, 0);
};
InsertOverwriteTableContext.prototype.TABLE = function () {
    return this.getToken(sparkParser.TABLE, 0);
};
InsertOverwriteTableContext.prototype.tableIdentifier = function () {
    return this.getTypedRuleContext(TableIdentifierContext, 0);
};
InsertOverwriteTableContext.prototype.partitionSpec = function () {
    return this.getTypedRuleContext(PartitionSpecContext, 0);
};
InsertOverwriteTableContext.prototype.IF = function () {
    return this.getToken(sparkParser.IF, 0);
};
InsertOverwriteTableContext.prototype.NOT = function () {
    return this.getToken(sparkParser.NOT, 0);
};
InsertOverwriteTableContext.prototype.EXISTS = function () {
    return this.getToken(sparkParser.EXISTS, 0);
};
InsertOverwriteTableContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterInsertOverwriteTable(this);
    }
};
InsertOverwriteTableContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitInsertOverwriteTable(this);
    }
};
InsertOverwriteTableContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitInsertOverwriteTable(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function InsertIntoTableContext(parser, ctx) {
    InsertIntoContext.call(this, parser);
    InsertIntoContext.prototype.copyFrom.call(this, ctx);
    return this;
}
InsertIntoTableContext.prototype = Object.create(InsertIntoContext.prototype);
InsertIntoTableContext.prototype.constructor = InsertIntoTableContext;
sparkParser.InsertIntoTableContext = InsertIntoTableContext;
InsertIntoTableContext.prototype.INSERT = function () {
    return this.getToken(sparkParser.INSERT, 0);
};
InsertIntoTableContext.prototype.INTO = function () {
    return this.getToken(sparkParser.INTO, 0);
};
InsertIntoTableContext.prototype.tableIdentifier = function () {
    return this.getTypedRuleContext(TableIdentifierContext, 0);
};
InsertIntoTableContext.prototype.TABLE = function () {
    return this.getToken(sparkParser.TABLE, 0);
};
InsertIntoTableContext.prototype.partitionSpec = function () {
    return this.getTypedRuleContext(PartitionSpecContext, 0);
};
InsertIntoTableContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterInsertIntoTable(this);
    }
};
InsertIntoTableContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitInsertIntoTable(this);
    }
};
InsertIntoTableContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitInsertIntoTable(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.InsertIntoContext = InsertIntoContext;
sparkParser.prototype.insertInto = function () {
    var localctx = new InsertIntoContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, sparkParser.RULE_insertInto);
    var _la = 0; // Token type
    try {
        this.state = 1103;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 122, this._ctx);
        switch (la_) {
            case 1:
                localctx = new InsertOverwriteTableContext(this, localctx);
                this.enterOuterAlt(localctx, 1);
                this.state = 1055;
                this.match(sparkParser.INSERT);
                this.state = 1056;
                this.match(sparkParser.OVERWRITE);
                this.state = 1057;
                this.match(sparkParser.TABLE);
                this.state = 1058;
                this.tableIdentifier();
                this.state = 1065;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.PARTITION) {
                    this.state = 1059;
                    this.partitionSpec();
                    this.state = 1063;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === sparkParser.IF) {
                        this.state = 1060;
                        this.match(sparkParser.IF);
                        this.state = 1061;
                        this.match(sparkParser.NOT);
                        this.state = 1062;
                        this.match(sparkParser.EXISTS);
                    }
                }
                break;
            case 2:
                localctx = new InsertIntoTableContext(this, localctx);
                this.enterOuterAlt(localctx, 2);
                this.state = 1067;
                this.match(sparkParser.INSERT);
                this.state = 1068;
                this.match(sparkParser.INTO);
                this.state = 1070;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 114, this._ctx);
                if (la_ === 1) {
                    this.state = 1069;
                    this.match(sparkParser.TABLE);
                }
                this.state = 1072;
                this.tableIdentifier();
                this.state = 1074;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.PARTITION) {
                    this.state = 1073;
                    this.partitionSpec();
                }
                break;
            case 3:
                localctx = new InsertOverwriteHiveDirContext(this, localctx);
                this.enterOuterAlt(localctx, 3);
                this.state = 1076;
                this.match(sparkParser.INSERT);
                this.state = 1077;
                this.match(sparkParser.OVERWRITE);
                this.state = 1079;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.LOCAL) {
                    this.state = 1078;
                    this.match(sparkParser.LOCAL);
                }
                this.state = 1081;
                this.match(sparkParser.DIRECTORY);
                this.state = 1082;
                localctx.path = this.match(sparkParser.STRING);
                this.state = 1084;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.ROW) {
                    this.state = 1083;
                    this.rowFormat();
                }
                this.state = 1087;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.STORED) {
                    this.state = 1086;
                    this.createFileFormat();
                }
                break;
            case 4:
                localctx = new InsertOverwriteDirContext(this, localctx);
                this.enterOuterAlt(localctx, 4);
                this.state = 1089;
                this.match(sparkParser.INSERT);
                this.state = 1090;
                this.match(sparkParser.OVERWRITE);
                this.state = 1092;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.LOCAL) {
                    this.state = 1091;
                    this.match(sparkParser.LOCAL);
                }
                this.state = 1094;
                this.match(sparkParser.DIRECTORY);
                this.state = 1096;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.STRING) {
                    this.state = 1095;
                    localctx.path = this.match(sparkParser.STRING);
                }
                this.state = 1098;
                this.tableProvider();
                this.state = 1101;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.OPTIONS) {
                    this.state = 1099;
                    this.match(sparkParser.OPTIONS);
                    this.state = 1100;
                    localctx.options = this.tablePropertyList();
                }
                break;
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function PartitionSpecLocationContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_partitionSpecLocation;
    return this;
}
PartitionSpecLocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionSpecLocationContext.prototype.constructor = PartitionSpecLocationContext;
PartitionSpecLocationContext.prototype.partitionSpec = function () {
    return this.getTypedRuleContext(PartitionSpecContext, 0);
};
PartitionSpecLocationContext.prototype.locationSpec = function () {
    return this.getTypedRuleContext(LocationSpecContext, 0);
};
PartitionSpecLocationContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterPartitionSpecLocation(this);
    }
};
PartitionSpecLocationContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitPartitionSpecLocation(this);
    }
};
PartitionSpecLocationContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitPartitionSpecLocation(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.PartitionSpecLocationContext = PartitionSpecLocationContext;
sparkParser.prototype.partitionSpecLocation = function () {
    var localctx = new PartitionSpecLocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, sparkParser.RULE_partitionSpecLocation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1105;
        this.partitionSpec();
        this.state = 1107;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === sparkParser.LOCATION) {
            this.state = 1106;
            this.locationSpec();
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function PartitionSpecContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_partitionSpec;
    return this;
}
PartitionSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionSpecContext.prototype.constructor = PartitionSpecContext;
PartitionSpecContext.prototype.PARTITION = function () {
    return this.getToken(sparkParser.PARTITION, 0);
};
PartitionSpecContext.prototype.partitionVal = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(PartitionValContext);
    }
    else {
        return this.getTypedRuleContext(PartitionValContext, i);
    }
};
PartitionSpecContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterPartitionSpec(this);
    }
};
PartitionSpecContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitPartitionSpec(this);
    }
};
PartitionSpecContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitPartitionSpec(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.PartitionSpecContext = PartitionSpecContext;
sparkParser.prototype.partitionSpec = function () {
    var localctx = new PartitionSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, sparkParser.RULE_partitionSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1109;
        this.match(sparkParser.PARTITION);
        this.state = 1110;
        this.match(sparkParser.T__0);
        this.state = 1111;
        this.partitionVal();
        this.state = 1116;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === sparkParser.T__2) {
            this.state = 1112;
            this.match(sparkParser.T__2);
            this.state = 1113;
            this.partitionVal();
            this.state = 1118;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1119;
        this.match(sparkParser.T__1);
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function PartitionValContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_partitionVal;
    return this;
}
PartitionValContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionValContext.prototype.constructor = PartitionValContext;
PartitionValContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};
PartitionValContext.prototype.EQ = function () {
    return this.getToken(sparkParser.EQ, 0);
};
PartitionValContext.prototype.constant = function () {
    return this.getTypedRuleContext(ConstantContext, 0);
};
PartitionValContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterPartitionVal(this);
    }
};
PartitionValContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitPartitionVal(this);
    }
};
PartitionValContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitPartitionVal(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.PartitionValContext = PartitionValContext;
sparkParser.prototype.partitionVal = function () {
    var localctx = new PartitionValContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, sparkParser.RULE_partitionVal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1121;
        this.identifier();
        this.state = 1124;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === sparkParser.EQ) {
            this.state = 1122;
            this.match(sparkParser.EQ);
            this.state = 1123;
            this.constant();
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function DescribeFuncNameContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_describeFuncName;
    return this;
}
DescribeFuncNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DescribeFuncNameContext.prototype.constructor = DescribeFuncNameContext;
DescribeFuncNameContext.prototype.qualifiedName = function () {
    return this.getTypedRuleContext(QualifiedNameContext, 0);
};
DescribeFuncNameContext.prototype.STRING = function () {
    return this.getToken(sparkParser.STRING, 0);
};
DescribeFuncNameContext.prototype.comparisonOperator = function () {
    return this.getTypedRuleContext(ComparisonOperatorContext, 0);
};
DescribeFuncNameContext.prototype.arithmeticOperator = function () {
    return this.getTypedRuleContext(ArithmeticOperatorContext, 0);
};
DescribeFuncNameContext.prototype.predicateOperator = function () {
    return this.getTypedRuleContext(PredicateOperatorContext, 0);
};
DescribeFuncNameContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterDescribeFuncName(this);
    }
};
DescribeFuncNameContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitDescribeFuncName(this);
    }
};
DescribeFuncNameContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitDescribeFuncName(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.DescribeFuncNameContext = DescribeFuncNameContext;
sparkParser.prototype.describeFuncName = function () {
    var localctx = new DescribeFuncNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, sparkParser.RULE_describeFuncName);
    try {
        this.state = 1131;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 126, this._ctx);
        switch (la_) {
            case 1:
                this.enterOuterAlt(localctx, 1);
                this.state = 1126;
                this.qualifiedName();
                break;
            case 2:
                this.enterOuterAlt(localctx, 2);
                this.state = 1127;
                this.match(sparkParser.STRING);
                break;
            case 3:
                this.enterOuterAlt(localctx, 3);
                this.state = 1128;
                this.comparisonOperator();
                break;
            case 4:
                this.enterOuterAlt(localctx, 4);
                this.state = 1129;
                this.arithmeticOperator();
                break;
            case 5:
                this.enterOuterAlt(localctx, 5);
                this.state = 1130;
                this.predicateOperator();
                break;
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function DescribeColNameContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_describeColName;
    this._identifier = null; // IdentifierContext
    this.nameParts = []; // of IdentifierContexts
    return this;
}
DescribeColNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DescribeColNameContext.prototype.constructor = DescribeColNameContext;
DescribeColNameContext.prototype.identifier = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(IdentifierContext);
    }
    else {
        return this.getTypedRuleContext(IdentifierContext, i);
    }
};
DescribeColNameContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterDescribeColName(this);
    }
};
DescribeColNameContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitDescribeColName(this);
    }
};
DescribeColNameContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitDescribeColName(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.DescribeColNameContext = DescribeColNameContext;
sparkParser.prototype.describeColName = function () {
    var localctx = new DescribeColNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, sparkParser.RULE_describeColName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1133;
        localctx._identifier = this.identifier();
        localctx.nameParts.push(localctx._identifier);
        this.state = 1138;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === sparkParser.T__3) {
            this.state = 1134;
            this.match(sparkParser.T__3);
            this.state = 1135;
            localctx._identifier = this.identifier();
            localctx.nameParts.push(localctx._identifier);
            this.state = 1140;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function CtesContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_ctes;
    return this;
}
CtesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CtesContext.prototype.constructor = CtesContext;
CtesContext.prototype.WITH = function () {
    return this.getToken(sparkParser.WITH, 0);
};
CtesContext.prototype.namedQuery = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(NamedQueryContext);
    }
    else {
        return this.getTypedRuleContext(NamedQueryContext, i);
    }
};
CtesContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterCtes(this);
    }
};
CtesContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitCtes(this);
    }
};
CtesContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitCtes(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.CtesContext = CtesContext;
sparkParser.prototype.ctes = function () {
    var localctx = new CtesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, sparkParser.RULE_ctes);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1141;
        this.match(sparkParser.WITH);
        this.state = 1142;
        this.namedQuery();
        this.state = 1147;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === sparkParser.T__2) {
            this.state = 1143;
            this.match(sparkParser.T__2);
            this.state = 1144;
            this.namedQuery();
            this.state = 1149;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function NamedQueryContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_namedQuery;
    this.name = null; // IdentifierContext
    return this;
}
NamedQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedQueryContext.prototype.constructor = NamedQueryContext;
NamedQueryContext.prototype.query = function () {
    return this.getTypedRuleContext(QueryContext, 0);
};
NamedQueryContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};
NamedQueryContext.prototype.AS = function () {
    return this.getToken(sparkParser.AS, 0);
};
NamedQueryContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterNamedQuery(this);
    }
};
NamedQueryContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitNamedQuery(this);
    }
};
NamedQueryContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitNamedQuery(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.NamedQueryContext = NamedQueryContext;
sparkParser.prototype.namedQuery = function () {
    var localctx = new NamedQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, sparkParser.RULE_namedQuery);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1150;
        localctx.name = this.identifier();
        this.state = 1152;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === sparkParser.AS) {
            this.state = 1151;
            this.match(sparkParser.AS);
        }
        this.state = 1154;
        this.match(sparkParser.T__0);
        this.state = 1155;
        this.query();
        this.state = 1156;
        this.match(sparkParser.T__1);
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function TableProviderContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_tableProvider;
    return this;
}
TableProviderContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableProviderContext.prototype.constructor = TableProviderContext;
TableProviderContext.prototype.USING = function () {
    return this.getToken(sparkParser.USING, 0);
};
TableProviderContext.prototype.qualifiedName = function () {
    return this.getTypedRuleContext(QualifiedNameContext, 0);
};
TableProviderContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterTableProvider(this);
    }
};
TableProviderContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitTableProvider(this);
    }
};
TableProviderContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitTableProvider(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.TableProviderContext = TableProviderContext;
sparkParser.prototype.tableProvider = function () {
    var localctx = new TableProviderContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, sparkParser.RULE_tableProvider);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1158;
        this.match(sparkParser.USING);
        this.state = 1159;
        this.qualifiedName();
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function TablePropertyListContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_tablePropertyList;
    return this;
}
TablePropertyListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablePropertyListContext.prototype.constructor = TablePropertyListContext;
TablePropertyListContext.prototype.tableProperty = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(TablePropertyContext);
    }
    else {
        return this.getTypedRuleContext(TablePropertyContext, i);
    }
};
TablePropertyListContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterTablePropertyList(this);
    }
};
TablePropertyListContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitTablePropertyList(this);
    }
};
TablePropertyListContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitTablePropertyList(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.TablePropertyListContext = TablePropertyListContext;
sparkParser.prototype.tablePropertyList = function () {
    var localctx = new TablePropertyListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, sparkParser.RULE_tablePropertyList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1161;
        this.match(sparkParser.T__0);
        this.state = 1162;
        this.tableProperty();
        this.state = 1167;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === sparkParser.T__2) {
            this.state = 1163;
            this.match(sparkParser.T__2);
            this.state = 1164;
            this.tableProperty();
            this.state = 1169;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1170;
        this.match(sparkParser.T__1);
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function TablePropertyContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_tableProperty;
    this.key = null; // TablePropertyKeyContext
    this.value = null; // TablePropertyValueContext
    return this;
}
TablePropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablePropertyContext.prototype.constructor = TablePropertyContext;
TablePropertyContext.prototype.tablePropertyKey = function () {
    return this.getTypedRuleContext(TablePropertyKeyContext, 0);
};
TablePropertyContext.prototype.tablePropertyValue = function () {
    return this.getTypedRuleContext(TablePropertyValueContext, 0);
};
TablePropertyContext.prototype.EQ = function () {
    return this.getToken(sparkParser.EQ, 0);
};
TablePropertyContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterTableProperty(this);
    }
};
TablePropertyContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitTableProperty(this);
    }
};
TablePropertyContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitTableProperty(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.TablePropertyContext = TablePropertyContext;
sparkParser.prototype.tableProperty = function () {
    var localctx = new TablePropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, sparkParser.RULE_tableProperty);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1172;
        localctx.key = this.tablePropertyKey();
        this.state = 1177;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === sparkParser.TRUE || _la === sparkParser.FALSE || _la === sparkParser.EQ || ((((_la - 240)) & ~0x1f) == 0 && ((1 << (_la - 240)) & ((1 << (sparkParser.STRING - 240)) | (1 << (sparkParser.INTEGER_VALUE - 240)) | (1 << (sparkParser.DECIMAL_VALUE - 240)))) !== 0)) {
            this.state = 1174;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === sparkParser.EQ) {
                this.state = 1173;
                this.match(sparkParser.EQ);
            }
            this.state = 1176;
            localctx.value = this.tablePropertyValue();
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function TablePropertyKeyContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_tablePropertyKey;
    return this;
}
TablePropertyKeyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablePropertyKeyContext.prototype.constructor = TablePropertyKeyContext;
TablePropertyKeyContext.prototype.identifier = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(IdentifierContext);
    }
    else {
        return this.getTypedRuleContext(IdentifierContext, i);
    }
};
TablePropertyKeyContext.prototype.STRING = function () {
    return this.getToken(sparkParser.STRING, 0);
};
TablePropertyKeyContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterTablePropertyKey(this);
    }
};
TablePropertyKeyContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitTablePropertyKey(this);
    }
};
TablePropertyKeyContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitTablePropertyKey(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.TablePropertyKeyContext = TablePropertyKeyContext;
sparkParser.prototype.tablePropertyKey = function () {
    var localctx = new TablePropertyKeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, sparkParser.RULE_tablePropertyKey);
    var _la = 0; // Token type
    try {
        this.state = 1188;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
            case sparkParser.SELECT:
            case sparkParser.FROM:
            case sparkParser.ADD:
            case sparkParser.AS:
            case sparkParser.ALL:
            case sparkParser.ANY:
            case sparkParser.DISTINCT:
            case sparkParser.WHERE:
            case sparkParser.GROUP:
            case sparkParser.BY:
            case sparkParser.GROUPING:
            case sparkParser.SETS:
            case sparkParser.CUBE:
            case sparkParser.ROLLUP:
            case sparkParser.ORDER:
            case sparkParser.HAVING:
            case sparkParser.LIMIT:
            case sparkParser.AT:
            case sparkParser.OR:
            case sparkParser.AND:
            case sparkParser.IN:
            case sparkParser.NOT:
            case sparkParser.NO:
            case sparkParser.EXISTS:
            case sparkParser.BETWEEN:
            case sparkParser.LIKE:
            case sparkParser.RLIKE:
            case sparkParser.IS:
            case sparkParser.NULL:
            case sparkParser.TRUE:
            case sparkParser.FALSE:
            case sparkParser.NULLS:
            case sparkParser.ASC:
            case sparkParser.DESC:
            case sparkParser.FOR:
            case sparkParser.INTERVAL:
            case sparkParser.CASE:
            case sparkParser.WHEN:
            case sparkParser.THEN:
            case sparkParser.ELSE:
            case sparkParser.END:
            case sparkParser.JOIN:
            case sparkParser.CROSS:
            case sparkParser.OUTER:
            case sparkParser.INNER:
            case sparkParser.LEFT:
            case sparkParser.SEMI:
            case sparkParser.RIGHT:
            case sparkParser.FULL:
            case sparkParser.NATURAL:
            case sparkParser.ON:
            case sparkParser.PIVOT:
            case sparkParser.LATERAL:
            case sparkParser.WINDOW:
            case sparkParser.OVER:
            case sparkParser.PARTITION:
            case sparkParser.RANGE:
            case sparkParser.ROWS:
            case sparkParser.UNBOUNDED:
            case sparkParser.PRECEDING:
            case sparkParser.FOLLOWING:
            case sparkParser.CURRENT:
            case sparkParser.FIRST:
            case sparkParser.AFTER:
            case sparkParser.LAST:
            case sparkParser.ROW:
            case sparkParser.WITH:
            case sparkParser.VALUES:
            case sparkParser.CREATE:
            case sparkParser.TABLE:
            case sparkParser.DIRECTORY:
            case sparkParser.VIEW:
            case sparkParser.REPLACE:
            case sparkParser.INSERT:
            case sparkParser.DELETE:
            case sparkParser.INTO:
            case sparkParser.DESCRIBE:
            case sparkParser.EXPLAIN:
            case sparkParser.FORMAT:
            case sparkParser.LOGICAL:
            case sparkParser.CODEGEN:
            case sparkParser.COST:
            case sparkParser.CAST:
            case sparkParser.SHOW:
            case sparkParser.TABLES:
            case sparkParser.COLUMNS:
            case sparkParser.COLUMN:
            case sparkParser.USE:
            case sparkParser.PARTITIONS:
            case sparkParser.FUNCTIONS:
            case sparkParser.DROP:
            case sparkParser.UNION:
            case sparkParser.EXCEPT:
            case sparkParser.SETMINUS:
            case sparkParser.INTERSECT:
            case sparkParser.TO:
            case sparkParser.TABLESAMPLE:
            case sparkParser.STRATIFY:
            case sparkParser.ALTER:
            case sparkParser.RENAME:
            case sparkParser.ARRAY:
            case sparkParser.MAP:
            case sparkParser.STRUCT:
            case sparkParser.COMMENT:
            case sparkParser.SET:
            case sparkParser.RESET:
            case sparkParser.DATA:
            case sparkParser.START:
            case sparkParser.TRANSACTION:
            case sparkParser.COMMIT:
            case sparkParser.ROLLBACK:
            case sparkParser.MACRO:
            case sparkParser.IGNORE:
            case sparkParser.BOTH:
            case sparkParser.LEADING:
            case sparkParser.TRAILING:
            case sparkParser.IF:
            case sparkParser.POSITION:
            case sparkParser.EXTRACT:
            case sparkParser.DIV:
            case sparkParser.PERCENTLIT:
            case sparkParser.BUCKET:
            case sparkParser.OUT:
            case sparkParser.OF:
            case sparkParser.SORT:
            case sparkParser.CLUSTER:
            case sparkParser.DISTRIBUTE:
            case sparkParser.OVERWRITE:
            case sparkParser.TRANSFORM:
            case sparkParser.REDUCE:
            case sparkParser.SERDE:
            case sparkParser.SERDEPROPERTIES:
            case sparkParser.RECORDREADER:
            case sparkParser.RECORDWRITER:
            case sparkParser.DELIMITED:
            case sparkParser.FIELDS:
            case sparkParser.TERMINATED:
            case sparkParser.COLLECTION:
            case sparkParser.ITEMS:
            case sparkParser.KEYS:
            case sparkParser.ESCAPED:
            case sparkParser.LINES:
            case sparkParser.SEPARATED:
            case sparkParser.FUNCTION:
            case sparkParser.EXTENDED:
            case sparkParser.REFRESH:
            case sparkParser.CLEAR:
            case sparkParser.CACHE:
            case sparkParser.UNCACHE:
            case sparkParser.LAZY:
            case sparkParser.FORMATTED:
            case sparkParser.GLOBAL:
            case sparkParser.TEMPORARY:
            case sparkParser.OPTIONS:
            case sparkParser.UNSET:
            case sparkParser.TBLPROPERTIES:
            case sparkParser.DBPROPERTIES:
            case sparkParser.BUCKETS:
            case sparkParser.SKEWED:
            case sparkParser.STORED:
            case sparkParser.DIRECTORIES:
            case sparkParser.LOCATION:
            case sparkParser.EXCHANGE:
            case sparkParser.ARCHIVE:
            case sparkParser.UNARCHIVE:
            case sparkParser.FILEFORMAT:
            case sparkParser.TOUCH:
            case sparkParser.COMPACT:
            case sparkParser.CONCATENATE:
            case sparkParser.CHANGE:
            case sparkParser.CASCADE:
            case sparkParser.RESTRICT:
            case sparkParser.CLUSTERED:
            case sparkParser.SORTED:
            case sparkParser.PURGE:
            case sparkParser.INPUTFORMAT:
            case sparkParser.OUTPUTFORMAT:
            case sparkParser.DATABASE:
            case sparkParser.DATABASES:
            case sparkParser.DFS:
            case sparkParser.TRUNCATE:
            case sparkParser.ANALYZE:
            case sparkParser.COMPUTE:
            case sparkParser.LIST:
            case sparkParser.STATISTICS:
            case sparkParser.PARTITIONED:
            case sparkParser.EXTERNAL:
            case sparkParser.DEFINED:
            case sparkParser.REVOKE:
            case sparkParser.GRANT:
            case sparkParser.LOCK:
            case sparkParser.UNLOCK:
            case sparkParser.MSCK:
            case sparkParser.REPAIR:
            case sparkParser.RECOVER:
            case sparkParser.EXPORT:
            case sparkParser.IMPORT:
            case sparkParser.LOAD:
            case sparkParser.ROLE:
            case sparkParser.ROLES:
            case sparkParser.COMPACTIONS:
            case sparkParser.PRINCIPALS:
            case sparkParser.TRANSACTIONS:
            case sparkParser.INDEX:
            case sparkParser.INDEXES:
            case sparkParser.LOCKS:
            case sparkParser.OPTION:
            case sparkParser.ANTI:
            case sparkParser.LOCAL:
            case sparkParser.INPATH:
            case sparkParser.IDENTIFIER:
            case sparkParser.BACKQUOTED_IDENTIFIER:
                this.enterOuterAlt(localctx, 1);
                this.state = 1179;
                this.identifier();
                this.state = 1184;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === sparkParser.T__3) {
                    this.state = 1180;
                    this.match(sparkParser.T__3);
                    this.state = 1181;
                    this.identifier();
                    this.state = 1186;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                break;
            case sparkParser.STRING:
                this.enterOuterAlt(localctx, 2);
                this.state = 1187;
                this.match(sparkParser.STRING);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function TablePropertyValueContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_tablePropertyValue;
    return this;
}
TablePropertyValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablePropertyValueContext.prototype.constructor = TablePropertyValueContext;
TablePropertyValueContext.prototype.INTEGER_VALUE = function () {
    return this.getToken(sparkParser.INTEGER_VALUE, 0);
};
TablePropertyValueContext.prototype.DECIMAL_VALUE = function () {
    return this.getToken(sparkParser.DECIMAL_VALUE, 0);
};
TablePropertyValueContext.prototype.booleanValue = function () {
    return this.getTypedRuleContext(BooleanValueContext, 0);
};
TablePropertyValueContext.prototype.STRING = function () {
    return this.getToken(sparkParser.STRING, 0);
};
TablePropertyValueContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterTablePropertyValue(this);
    }
};
TablePropertyValueContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitTablePropertyValue(this);
    }
};
TablePropertyValueContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitTablePropertyValue(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.TablePropertyValueContext = TablePropertyValueContext;
sparkParser.prototype.tablePropertyValue = function () {
    var localctx = new TablePropertyValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, sparkParser.RULE_tablePropertyValue);
    try {
        this.state = 1194;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
            case sparkParser.INTEGER_VALUE:
                this.enterOuterAlt(localctx, 1);
                this.state = 1190;
                this.match(sparkParser.INTEGER_VALUE);
                break;
            case sparkParser.DECIMAL_VALUE:
                this.enterOuterAlt(localctx, 2);
                this.state = 1191;
                this.match(sparkParser.DECIMAL_VALUE);
                break;
            case sparkParser.TRUE:
            case sparkParser.FALSE:
                this.enterOuterAlt(localctx, 3);
                this.state = 1192;
                this.booleanValue();
                break;
            case sparkParser.STRING:
                this.enterOuterAlt(localctx, 4);
                this.state = 1193;
                this.match(sparkParser.STRING);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function ConstantListContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_constantList;
    return this;
}
ConstantListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantListContext.prototype.constructor = ConstantListContext;
ConstantListContext.prototype.constant = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(ConstantContext);
    }
    else {
        return this.getTypedRuleContext(ConstantContext, i);
    }
};
ConstantListContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterConstantList(this);
    }
};
ConstantListContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitConstantList(this);
    }
};
ConstantListContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitConstantList(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.ConstantListContext = ConstantListContext;
sparkParser.prototype.constantList = function () {
    var localctx = new ConstantListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, sparkParser.RULE_constantList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1196;
        this.match(sparkParser.T__0);
        this.state = 1197;
        this.constant();
        this.state = 1202;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === sparkParser.T__2) {
            this.state = 1198;
            this.match(sparkParser.T__2);
            this.state = 1199;
            this.constant();
            this.state = 1204;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1205;
        this.match(sparkParser.T__1);
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function NestedConstantListContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_nestedConstantList;
    return this;
}
NestedConstantListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NestedConstantListContext.prototype.constructor = NestedConstantListContext;
NestedConstantListContext.prototype.constantList = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(ConstantListContext);
    }
    else {
        return this.getTypedRuleContext(ConstantListContext, i);
    }
};
NestedConstantListContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterNestedConstantList(this);
    }
};
NestedConstantListContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitNestedConstantList(this);
    }
};
NestedConstantListContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitNestedConstantList(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.NestedConstantListContext = NestedConstantListContext;
sparkParser.prototype.nestedConstantList = function () {
    var localctx = new NestedConstantListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, sparkParser.RULE_nestedConstantList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1207;
        this.match(sparkParser.T__0);
        this.state = 1208;
        this.constantList();
        this.state = 1213;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === sparkParser.T__2) {
            this.state = 1209;
            this.match(sparkParser.T__2);
            this.state = 1210;
            this.constantList();
            this.state = 1215;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1216;
        this.match(sparkParser.T__1);
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function CreateFileFormatContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_createFileFormat;
    return this;
}
CreateFileFormatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateFileFormatContext.prototype.constructor = CreateFileFormatContext;
CreateFileFormatContext.prototype.STORED = function () {
    return this.getToken(sparkParser.STORED, 0);
};
CreateFileFormatContext.prototype.AS = function () {
    return this.getToken(sparkParser.AS, 0);
};
CreateFileFormatContext.prototype.fileFormat = function () {
    return this.getTypedRuleContext(FileFormatContext, 0);
};
CreateFileFormatContext.prototype.BY = function () {
    return this.getToken(sparkParser.BY, 0);
};
CreateFileFormatContext.prototype.storageHandler = function () {
    return this.getTypedRuleContext(StorageHandlerContext, 0);
};
CreateFileFormatContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterCreateFileFormat(this);
    }
};
CreateFileFormatContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitCreateFileFormat(this);
    }
};
CreateFileFormatContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitCreateFileFormat(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.CreateFileFormatContext = CreateFileFormatContext;
sparkParser.prototype.createFileFormat = function () {
    var localctx = new CreateFileFormatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, sparkParser.RULE_createFileFormat);
    try {
        this.state = 1224;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 138, this._ctx);
        switch (la_) {
            case 1:
                this.enterOuterAlt(localctx, 1);
                this.state = 1218;
                this.match(sparkParser.STORED);
                this.state = 1219;
                this.match(sparkParser.AS);
                this.state = 1220;
                this.fileFormat();
                break;
            case 2:
                this.enterOuterAlt(localctx, 2);
                this.state = 1221;
                this.match(sparkParser.STORED);
                this.state = 1222;
                this.match(sparkParser.BY);
                this.state = 1223;
                this.storageHandler();
                break;
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function FileFormatContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_fileFormat;
    return this;
}
FileFormatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FileFormatContext.prototype.constructor = FileFormatContext;
FileFormatContext.prototype.copyFrom = function (ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};
function TableFileFormatContext(parser, ctx) {
    FileFormatContext.call(this, parser);
    this.inFmt = null; // Token;
    this.outFmt = null; // Token;
    FileFormatContext.prototype.copyFrom.call(this, ctx);
    return this;
}
TableFileFormatContext.prototype = Object.create(FileFormatContext.prototype);
TableFileFormatContext.prototype.constructor = TableFileFormatContext;
sparkParser.TableFileFormatContext = TableFileFormatContext;
TableFileFormatContext.prototype.INPUTFORMAT = function () {
    return this.getToken(sparkParser.INPUTFORMAT, 0);
};
TableFileFormatContext.prototype.OUTPUTFORMAT = function () {
    return this.getToken(sparkParser.OUTPUTFORMAT, 0);
};
TableFileFormatContext.prototype.STRING = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(sparkParser.STRING);
    }
    else {
        return this.getToken(sparkParser.STRING, i);
    }
};
TableFileFormatContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterTableFileFormat(this);
    }
};
TableFileFormatContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitTableFileFormat(this);
    }
};
TableFileFormatContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitTableFileFormat(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function GenericFileFormatContext(parser, ctx) {
    FileFormatContext.call(this, parser);
    FileFormatContext.prototype.copyFrom.call(this, ctx);
    return this;
}
GenericFileFormatContext.prototype = Object.create(FileFormatContext.prototype);
GenericFileFormatContext.prototype.constructor = GenericFileFormatContext;
sparkParser.GenericFileFormatContext = GenericFileFormatContext;
GenericFileFormatContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};
GenericFileFormatContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterGenericFileFormat(this);
    }
};
GenericFileFormatContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitGenericFileFormat(this);
    }
};
GenericFileFormatContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitGenericFileFormat(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.FileFormatContext = FileFormatContext;
sparkParser.prototype.fileFormat = function () {
    var localctx = new FileFormatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, sparkParser.RULE_fileFormat);
    try {
        this.state = 1231;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 139, this._ctx);
        switch (la_) {
            case 1:
                localctx = new TableFileFormatContext(this, localctx);
                this.enterOuterAlt(localctx, 1);
                this.state = 1226;
                this.match(sparkParser.INPUTFORMAT);
                this.state = 1227;
                localctx.inFmt = this.match(sparkParser.STRING);
                this.state = 1228;
                this.match(sparkParser.OUTPUTFORMAT);
                this.state = 1229;
                localctx.outFmt = this.match(sparkParser.STRING);
                break;
            case 2:
                localctx = new GenericFileFormatContext(this, localctx);
                this.enterOuterAlt(localctx, 2);
                this.state = 1230;
                this.identifier();
                break;
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function StorageHandlerContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_storageHandler;
    return this;
}
StorageHandlerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StorageHandlerContext.prototype.constructor = StorageHandlerContext;
StorageHandlerContext.prototype.STRING = function () {
    return this.getToken(sparkParser.STRING, 0);
};
StorageHandlerContext.prototype.WITH = function () {
    return this.getToken(sparkParser.WITH, 0);
};
StorageHandlerContext.prototype.SERDEPROPERTIES = function () {
    return this.getToken(sparkParser.SERDEPROPERTIES, 0);
};
StorageHandlerContext.prototype.tablePropertyList = function () {
    return this.getTypedRuleContext(TablePropertyListContext, 0);
};
StorageHandlerContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterStorageHandler(this);
    }
};
StorageHandlerContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitStorageHandler(this);
    }
};
StorageHandlerContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitStorageHandler(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.StorageHandlerContext = StorageHandlerContext;
sparkParser.prototype.storageHandler = function () {
    var localctx = new StorageHandlerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, sparkParser.RULE_storageHandler);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1233;
        this.match(sparkParser.STRING);
        this.state = 1237;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 140, this._ctx);
        if (la_ === 1) {
            this.state = 1234;
            this.match(sparkParser.WITH);
            this.state = 1235;
            this.match(sparkParser.SERDEPROPERTIES);
            this.state = 1236;
            this.tablePropertyList();
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function ResourceContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_resource;
    return this;
}
ResourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResourceContext.prototype.constructor = ResourceContext;
ResourceContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};
ResourceContext.prototype.STRING = function () {
    return this.getToken(sparkParser.STRING, 0);
};
ResourceContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterResource(this);
    }
};
ResourceContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitResource(this);
    }
};
ResourceContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitResource(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.ResourceContext = ResourceContext;
sparkParser.prototype.resource = function () {
    var localctx = new ResourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, sparkParser.RULE_resource);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1239;
        this.identifier();
        this.state = 1240;
        this.match(sparkParser.STRING);
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function QueryNoWithContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_queryNoWith;
    return this;
}
QueryNoWithContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryNoWithContext.prototype.constructor = QueryNoWithContext;
QueryNoWithContext.prototype.copyFrom = function (ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};
function SingleInsertQueryContext(parser, ctx) {
    QueryNoWithContext.call(this, parser);
    QueryNoWithContext.prototype.copyFrom.call(this, ctx);
    return this;
}
SingleInsertQueryContext.prototype = Object.create(QueryNoWithContext.prototype);
SingleInsertQueryContext.prototype.constructor = SingleInsertQueryContext;
sparkParser.SingleInsertQueryContext = SingleInsertQueryContext;
SingleInsertQueryContext.prototype.queryTerm = function () {
    return this.getTypedRuleContext(QueryTermContext, 0);
};
SingleInsertQueryContext.prototype.queryOrganization = function () {
    return this.getTypedRuleContext(QueryOrganizationContext, 0);
};
SingleInsertQueryContext.prototype.insertInto = function () {
    return this.getTypedRuleContext(InsertIntoContext, 0);
};
SingleInsertQueryContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterSingleInsertQuery(this);
    }
};
SingleInsertQueryContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitSingleInsertQuery(this);
    }
};
SingleInsertQueryContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitSingleInsertQuery(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function MultiInsertQueryContext(parser, ctx) {
    QueryNoWithContext.call(this, parser);
    QueryNoWithContext.prototype.copyFrom.call(this, ctx);
    return this;
}
MultiInsertQueryContext.prototype = Object.create(QueryNoWithContext.prototype);
MultiInsertQueryContext.prototype.constructor = MultiInsertQueryContext;
sparkParser.MultiInsertQueryContext = MultiInsertQueryContext;
MultiInsertQueryContext.prototype.fromClause = function () {
    return this.getTypedRuleContext(FromClauseContext, 0);
};
MultiInsertQueryContext.prototype.multiInsertQueryBody = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(MultiInsertQueryBodyContext);
    }
    else {
        return this.getTypedRuleContext(MultiInsertQueryBodyContext, i);
    }
};
MultiInsertQueryContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterMultiInsertQuery(this);
    }
};
MultiInsertQueryContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitMultiInsertQuery(this);
    }
};
MultiInsertQueryContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitMultiInsertQuery(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.QueryNoWithContext = QueryNoWithContext;
sparkParser.prototype.queryNoWith = function () {
    var localctx = new QueryNoWithContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, sparkParser.RULE_queryNoWith);
    var _la = 0; // Token type
    try {
        this.state = 1254;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 143, this._ctx);
        switch (la_) {
            case 1:
                localctx = new SingleInsertQueryContext(this, localctx);
                this.enterOuterAlt(localctx, 1);
                this.state = 1243;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.INSERT) {
                    this.state = 1242;
                    this.insertInto();
                }
                this.state = 1245;
                this.queryTerm(0);
                this.state = 1246;
                this.queryOrganization();
                break;
            case 2:
                localctx = new MultiInsertQueryContext(this, localctx);
                this.enterOuterAlt(localctx, 2);
                this.state = 1248;
                this.fromClause();
                this.state = 1250;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 1249;
                    this.multiInsertQueryBody();
                    this.state = 1252;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === sparkParser.SELECT || _la === sparkParser.FROM || _la === sparkParser.INSERT || _la === sparkParser.MAP || _la === sparkParser.REDUCE);
                break;
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function QueryOrganizationContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_queryOrganization;
    this._sortItem = null; // SortItemContext
    this.order = []; // of SortItemContexts
    this._expression = null; // ExpressionContext
    this.clusterBy = []; // of ExpressionContexts
    this.distributeBy = []; // of ExpressionContexts
    this.sort = []; // of SortItemContexts
    this.limit = null; // ExpressionContext
    return this;
}
QueryOrganizationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryOrganizationContext.prototype.constructor = QueryOrganizationContext;
QueryOrganizationContext.prototype.ORDER = function () {
    return this.getToken(sparkParser.ORDER, 0);
};
QueryOrganizationContext.prototype.BY = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(sparkParser.BY);
    }
    else {
        return this.getToken(sparkParser.BY, i);
    }
};
QueryOrganizationContext.prototype.CLUSTER = function () {
    return this.getToken(sparkParser.CLUSTER, 0);
};
QueryOrganizationContext.prototype.DISTRIBUTE = function () {
    return this.getToken(sparkParser.DISTRIBUTE, 0);
};
QueryOrganizationContext.prototype.SORT = function () {
    return this.getToken(sparkParser.SORT, 0);
};
QueryOrganizationContext.prototype.windows = function () {
    return this.getTypedRuleContext(WindowsContext, 0);
};
QueryOrganizationContext.prototype.LIMIT = function () {
    return this.getToken(sparkParser.LIMIT, 0);
};
QueryOrganizationContext.prototype.sortItem = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(SortItemContext);
    }
    else {
        return this.getTypedRuleContext(SortItemContext, i);
    }
};
QueryOrganizationContext.prototype.expression = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(ExpressionContext);
    }
    else {
        return this.getTypedRuleContext(ExpressionContext, i);
    }
};
QueryOrganizationContext.prototype.ALL = function () {
    return this.getToken(sparkParser.ALL, 0);
};
QueryOrganizationContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterQueryOrganization(this);
    }
};
QueryOrganizationContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitQueryOrganization(this);
    }
};
QueryOrganizationContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitQueryOrganization(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.QueryOrganizationContext = QueryOrganizationContext;
sparkParser.prototype.queryOrganization = function () {
    var localctx = new QueryOrganizationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, sparkParser.RULE_queryOrganization);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1266;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === sparkParser.ORDER) {
            this.state = 1256;
            this.match(sparkParser.ORDER);
            this.state = 1257;
            this.match(sparkParser.BY);
            this.state = 1258;
            localctx._sortItem = this.sortItem();
            localctx.order.push(localctx._sortItem);
            this.state = 1263;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === sparkParser.T__2) {
                this.state = 1259;
                this.match(sparkParser.T__2);
                this.state = 1260;
                localctx._sortItem = this.sortItem();
                localctx.order.push(localctx._sortItem);
                this.state = 1265;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        this.state = 1278;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === sparkParser.CLUSTER) {
            this.state = 1268;
            this.match(sparkParser.CLUSTER);
            this.state = 1269;
            this.match(sparkParser.BY);
            this.state = 1270;
            localctx._expression = this.expression();
            localctx.clusterBy.push(localctx._expression);
            this.state = 1275;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === sparkParser.T__2) {
                this.state = 1271;
                this.match(sparkParser.T__2);
                this.state = 1272;
                localctx._expression = this.expression();
                localctx.clusterBy.push(localctx._expression);
                this.state = 1277;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        this.state = 1290;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === sparkParser.DISTRIBUTE) {
            this.state = 1280;
            this.match(sparkParser.DISTRIBUTE);
            this.state = 1281;
            this.match(sparkParser.BY);
            this.state = 1282;
            localctx._expression = this.expression();
            localctx.distributeBy.push(localctx._expression);
            this.state = 1287;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === sparkParser.T__2) {
                this.state = 1283;
                this.match(sparkParser.T__2);
                this.state = 1284;
                localctx._expression = this.expression();
                localctx.distributeBy.push(localctx._expression);
                this.state = 1289;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        this.state = 1302;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === sparkParser.SORT) {
            this.state = 1292;
            this.match(sparkParser.SORT);
            this.state = 1293;
            this.match(sparkParser.BY);
            this.state = 1294;
            localctx._sortItem = this.sortItem();
            localctx.sort.push(localctx._sortItem);
            this.state = 1299;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === sparkParser.T__2) {
                this.state = 1295;
                this.match(sparkParser.T__2);
                this.state = 1296;
                localctx._sortItem = this.sortItem();
                localctx.sort.push(localctx._sortItem);
                this.state = 1301;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        this.state = 1305;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === sparkParser.WINDOW) {
            this.state = 1304;
            this.windows();
        }
        this.state = 1312;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === sparkParser.LIMIT) {
            this.state = 1307;
            this.match(sparkParser.LIMIT);
            this.state = 1310;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 153, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 1308;
                    this.match(sparkParser.ALL);
                    break;
                case 2:
                    this.state = 1309;
                    localctx.limit = this.expression();
                    break;
            }
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function MultiInsertQueryBodyContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_multiInsertQueryBody;
    return this;
}
MultiInsertQueryBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiInsertQueryBodyContext.prototype.constructor = MultiInsertQueryBodyContext;
MultiInsertQueryBodyContext.prototype.querySpecification = function () {
    return this.getTypedRuleContext(QuerySpecificationContext, 0);
};
MultiInsertQueryBodyContext.prototype.queryOrganization = function () {
    return this.getTypedRuleContext(QueryOrganizationContext, 0);
};
MultiInsertQueryBodyContext.prototype.insertInto = function () {
    return this.getTypedRuleContext(InsertIntoContext, 0);
};
MultiInsertQueryBodyContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterMultiInsertQueryBody(this);
    }
};
MultiInsertQueryBodyContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitMultiInsertQueryBody(this);
    }
};
MultiInsertQueryBodyContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitMultiInsertQueryBody(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.MultiInsertQueryBodyContext = MultiInsertQueryBodyContext;
sparkParser.prototype.multiInsertQueryBody = function () {
    var localctx = new MultiInsertQueryBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, sparkParser.RULE_multiInsertQueryBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1315;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === sparkParser.INSERT) {
            this.state = 1314;
            this.insertInto();
        }
        this.state = 1317;
        this.querySpecification();
        this.state = 1318;
        this.queryOrganization();
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function QueryTermContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_queryTerm;
    return this;
}
QueryTermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryTermContext.prototype.constructor = QueryTermContext;
QueryTermContext.prototype.copyFrom = function (ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};
function QueryTermDefaultContext(parser, ctx) {
    QueryTermContext.call(this, parser);
    QueryTermContext.prototype.copyFrom.call(this, ctx);
    return this;
}
QueryTermDefaultContext.prototype = Object.create(QueryTermContext.prototype);
QueryTermDefaultContext.prototype.constructor = QueryTermDefaultContext;
sparkParser.QueryTermDefaultContext = QueryTermDefaultContext;
QueryTermDefaultContext.prototype.queryPrimary = function () {
    return this.getTypedRuleContext(QueryPrimaryContext, 0);
};
QueryTermDefaultContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterQueryTermDefault(this);
    }
};
QueryTermDefaultContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitQueryTermDefault(this);
    }
};
QueryTermDefaultContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitQueryTermDefault(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function SetOperationContext(parser, ctx) {
    QueryTermContext.call(this, parser);
    this.left = null; // QueryTermContext;
    this.operator = null; // Token;
    this.right = null; // QueryTermContext;
    QueryTermContext.prototype.copyFrom.call(this, ctx);
    return this;
}
SetOperationContext.prototype = Object.create(QueryTermContext.prototype);
SetOperationContext.prototype.constructor = SetOperationContext;
sparkParser.SetOperationContext = SetOperationContext;
SetOperationContext.prototype.queryTerm = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(QueryTermContext);
    }
    else {
        return this.getTypedRuleContext(QueryTermContext, i);
    }
};
SetOperationContext.prototype.INTERSECT = function () {
    return this.getToken(sparkParser.INTERSECT, 0);
};
SetOperationContext.prototype.UNION = function () {
    return this.getToken(sparkParser.UNION, 0);
};
SetOperationContext.prototype.EXCEPT = function () {
    return this.getToken(sparkParser.EXCEPT, 0);
};
SetOperationContext.prototype.SETMINUS = function () {
    return this.getToken(sparkParser.SETMINUS, 0);
};
SetOperationContext.prototype.setQuantifier = function () {
    return this.getTypedRuleContext(SetQuantifierContext, 0);
};
SetOperationContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterSetOperation(this);
    }
};
SetOperationContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitSetOperation(this);
    }
};
SetOperationContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitSetOperation(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.prototype.queryTerm = function (_p) {
    if (_p === undefined) {
        _p = 0;
    }
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new QueryTermContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 70;
    this.enterRecursionRule(localctx, 70, sparkParser.RULE_queryTerm, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new QueryTermDefaultContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;
        this.state = 1321;
        this.queryPrimary();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1346;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 160, this._ctx);
        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
                if (this._parseListeners !== null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1344;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 159, this._ctx);
                switch (la_) {
                    case 1:
                        localctx = new SetOperationContext(this, new QueryTermContext(this, _parentctx, _parentState));
                        localctx.left = _prevctx;
                        this.pushNewRecursionContext(localctx, _startState, sparkParser.RULE_queryTerm);
                        this.state = 1323;
                        if (!(this.precpred(this._ctx, 3))) {
                            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                        }
                        this.state = 1324;
                        if (!(this.legacy_setops_precedence_enbled)) {
                            throw new antlr4.error.FailedPredicateException(this, "this.legacy_setops_precedence_enbled");
                        }
                        this.state = 1325;
                        localctx.operator = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (!(((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (sparkParser.UNION - 102)) | (1 << (sparkParser.EXCEPT - 102)) | (1 << (sparkParser.SETMINUS - 102)) | (1 << (sparkParser.INTERSECT - 102)))) !== 0))) {
                            localctx.operator = this._errHandler.recoverInline(this);
                        }
                        else {
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 1327;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === sparkParser.ALL || _la === sparkParser.DISTINCT) {
                            this.state = 1326;
                            this.setQuantifier();
                        }
                        this.state = 1329;
                        localctx.right = this.queryTerm(4);
                        break;
                    case 2:
                        localctx = new SetOperationContext(this, new QueryTermContext(this, _parentctx, _parentState));
                        localctx.left = _prevctx;
                        this.pushNewRecursionContext(localctx, _startState, sparkParser.RULE_queryTerm);
                        this.state = 1330;
                        if (!(this.precpred(this._ctx, 2))) {
                            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                        }
                        this.state = 1331;
                        if (!(!this.legacy_setops_precedence_enbled)) {
                            throw new antlr4.error.FailedPredicateException(this, "!this.legacy_setops_precedence_enbled");
                        }
                        this.state = 1332;
                        localctx.operator = this.match(sparkParser.INTERSECT);
                        this.state = 1334;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === sparkParser.ALL || _la === sparkParser.DISTINCT) {
                            this.state = 1333;
                            this.setQuantifier();
                        }
                        this.state = 1336;
                        localctx.right = this.queryTerm(3);
                        break;
                    case 3:
                        localctx = new SetOperationContext(this, new QueryTermContext(this, _parentctx, _parentState));
                        localctx.left = _prevctx;
                        this.pushNewRecursionContext(localctx, _startState, sparkParser.RULE_queryTerm);
                        this.state = 1337;
                        if (!(this.precpred(this._ctx, 1))) {
                            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                        }
                        this.state = 1338;
                        if (!(!this.legacy_setops_precedence_enbled)) {
                            throw new antlr4.error.FailedPredicateException(this, "!this.legacy_setops_precedence_enbled");
                        }
                        this.state = 1339;
                        localctx.operator = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (!(((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (sparkParser.UNION - 102)) | (1 << (sparkParser.EXCEPT - 102)) | (1 << (sparkParser.SETMINUS - 102)))) !== 0))) {
                            localctx.operator = this._errHandler.recoverInline(this);
                        }
                        else {
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 1341;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === sparkParser.ALL || _la === sparkParser.DISTINCT) {
                            this.state = 1340;
                            this.setQuantifier();
                        }
                        this.state = 1343;
                        localctx.right = this.queryTerm(2);
                        break;
                }
            }
            this.state = 1348;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 160, this._ctx);
        }
    }
    catch (error) {
        if (error instanceof antlr4.error.RecognitionException) {
            localctx.exception = error;
            this._errHandler.reportError(this, error);
            this._errHandler.recover(this, error);
        }
        else {
            throw error;
        }
    }
    finally {
        this.unrollRecursionContexts(_parentctx);
    }
    return localctx;
};
function QueryPrimaryContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_queryPrimary;
    return this;
}
QueryPrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryPrimaryContext.prototype.constructor = QueryPrimaryContext;
QueryPrimaryContext.prototype.copyFrom = function (ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};
function SubqueryContext(parser, ctx) {
    QueryPrimaryContext.call(this, parser);
    QueryPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}
SubqueryContext.prototype = Object.create(QueryPrimaryContext.prototype);
SubqueryContext.prototype.constructor = SubqueryContext;
sparkParser.SubqueryContext = SubqueryContext;
SubqueryContext.prototype.queryNoWith = function () {
    return this.getTypedRuleContext(QueryNoWithContext, 0);
};
SubqueryContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterSubquery(this);
    }
};
SubqueryContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitSubquery(this);
    }
};
SubqueryContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitSubquery(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function QueryPrimaryDefaultContext(parser, ctx) {
    QueryPrimaryContext.call(this, parser);
    QueryPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}
QueryPrimaryDefaultContext.prototype = Object.create(QueryPrimaryContext.prototype);
QueryPrimaryDefaultContext.prototype.constructor = QueryPrimaryDefaultContext;
sparkParser.QueryPrimaryDefaultContext = QueryPrimaryDefaultContext;
QueryPrimaryDefaultContext.prototype.querySpecification = function () {
    return this.getTypedRuleContext(QuerySpecificationContext, 0);
};
QueryPrimaryDefaultContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterQueryPrimaryDefault(this);
    }
};
QueryPrimaryDefaultContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitQueryPrimaryDefault(this);
    }
};
QueryPrimaryDefaultContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitQueryPrimaryDefault(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function InlineTableDefault1Context(parser, ctx) {
    QueryPrimaryContext.call(this, parser);
    QueryPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}
InlineTableDefault1Context.prototype = Object.create(QueryPrimaryContext.prototype);
InlineTableDefault1Context.prototype.constructor = InlineTableDefault1Context;
sparkParser.InlineTableDefault1Context = InlineTableDefault1Context;
InlineTableDefault1Context.prototype.inlineTable = function () {
    return this.getTypedRuleContext(InlineTableContext, 0);
};
InlineTableDefault1Context.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterInlineTableDefault1(this);
    }
};
InlineTableDefault1Context.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitInlineTableDefault1(this);
    }
};
InlineTableDefault1Context.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitInlineTableDefault1(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function TableContext(parser, ctx) {
    QueryPrimaryContext.call(this, parser);
    QueryPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}
TableContext.prototype = Object.create(QueryPrimaryContext.prototype);
TableContext.prototype.constructor = TableContext;
sparkParser.TableContext = TableContext;
TableContext.prototype.TABLE = function () {
    return this.getToken(sparkParser.TABLE, 0);
};
TableContext.prototype.tableIdentifier = function () {
    return this.getTypedRuleContext(TableIdentifierContext, 0);
};
TableContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterTable(this);
    }
};
TableContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitTable(this);
    }
};
TableContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitTable(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.QueryPrimaryContext = QueryPrimaryContext;
sparkParser.prototype.queryPrimary = function () {
    var localctx = new QueryPrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, sparkParser.RULE_queryPrimary);
    try {
        this.state = 1357;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
            case sparkParser.SELECT:
            case sparkParser.FROM:
            case sparkParser.MAP:
            case sparkParser.REDUCE:
                localctx = new QueryPrimaryDefaultContext(this, localctx);
                this.enterOuterAlt(localctx, 1);
                this.state = 1349;
                this.querySpecification();
                break;
            case sparkParser.TABLE:
                localctx = new TableContext(this, localctx);
                this.enterOuterAlt(localctx, 2);
                this.state = 1350;
                this.match(sparkParser.TABLE);
                this.state = 1351;
                this.tableIdentifier();
                break;
            case sparkParser.VALUES:
                localctx = new InlineTableDefault1Context(this, localctx);
                this.enterOuterAlt(localctx, 3);
                this.state = 1352;
                this.inlineTable();
                break;
            case sparkParser.T__0:
                localctx = new SubqueryContext(this, localctx);
                this.enterOuterAlt(localctx, 4);
                this.state = 1353;
                this.match(sparkParser.T__0);
                this.state = 1354;
                this.queryNoWith();
                this.state = 1355;
                this.match(sparkParser.T__1);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function SortItemContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_sortItem;
    this.ordering = null; // Token
    this.nullOrder = null; // Token
    return this;
}
SortItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SortItemContext.prototype.constructor = SortItemContext;
SortItemContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
};
SortItemContext.prototype.NULLS = function () {
    return this.getToken(sparkParser.NULLS, 0);
};
SortItemContext.prototype.ASC = function () {
    return this.getToken(sparkParser.ASC, 0);
};
SortItemContext.prototype.DESC = function () {
    return this.getToken(sparkParser.DESC, 0);
};
SortItemContext.prototype.LAST = function () {
    return this.getToken(sparkParser.LAST, 0);
};
SortItemContext.prototype.FIRST = function () {
    return this.getToken(sparkParser.FIRST, 0);
};
SortItemContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterSortItem(this);
    }
};
SortItemContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitSortItem(this);
    }
};
SortItemContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitSortItem(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.SortItemContext = SortItemContext;
sparkParser.prototype.sortItem = function () {
    var localctx = new SortItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, sparkParser.RULE_sortItem);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1359;
        this.expression();
        this.state = 1361;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === sparkParser.ASC || _la === sparkParser.DESC) {
            this.state = 1360;
            localctx.ordering = this._input.LT(1);
            _la = this._input.LA(1);
            if (!(_la === sparkParser.ASC || _la === sparkParser.DESC)) {
                localctx.ordering = this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        this.state = 1365;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === sparkParser.NULLS) {
            this.state = 1363;
            this.match(sparkParser.NULLS);
            this.state = 1364;
            localctx.nullOrder = this._input.LT(1);
            _la = this._input.LA(1);
            if (!(_la === sparkParser.FIRST || _la === sparkParser.LAST)) {
                localctx.nullOrder = this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function QuerySpecificationContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_querySpecification;
    this.kind = null; // Token
    this.inRowFormat = null; // RowFormatContext
    this.recordWriter = null; // Token
    this.script = null; // Token
    this.outRowFormat = null; // RowFormatContext
    this.recordReader = null; // Token
    this.where = null; // BooleanExpressionContext
    this._hint = null; // HintContext
    this.hints = []; // of HintContexts
    this.having = null; // BooleanExpressionContext
    return this;
}
QuerySpecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuerySpecificationContext.prototype.constructor = QuerySpecificationContext;
QuerySpecificationContext.prototype.USING = function () {
    return this.getToken(sparkParser.USING, 0);
};
QuerySpecificationContext.prototype.STRING = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(sparkParser.STRING);
    }
    else {
        return this.getToken(sparkParser.STRING, i);
    }
};
QuerySpecificationContext.prototype.RECORDWRITER = function () {
    return this.getToken(sparkParser.RECORDWRITER, 0);
};
QuerySpecificationContext.prototype.AS = function () {
    return this.getToken(sparkParser.AS, 0);
};
QuerySpecificationContext.prototype.RECORDREADER = function () {
    return this.getToken(sparkParser.RECORDREADER, 0);
};
QuerySpecificationContext.prototype.fromClause = function () {
    return this.getTypedRuleContext(FromClauseContext, 0);
};
QuerySpecificationContext.prototype.WHERE = function () {
    return this.getToken(sparkParser.WHERE, 0);
};
QuerySpecificationContext.prototype.SELECT = function () {
    return this.getToken(sparkParser.SELECT, 0);
};
QuerySpecificationContext.prototype.namedExpressionSeq = function () {
    return this.getTypedRuleContext(NamedExpressionSeqContext, 0);
};
QuerySpecificationContext.prototype.rowFormat = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(RowFormatContext);
    }
    else {
        return this.getTypedRuleContext(RowFormatContext, i);
    }
};
QuerySpecificationContext.prototype.booleanExpression = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(BooleanExpressionContext);
    }
    else {
        return this.getTypedRuleContext(BooleanExpressionContext, i);
    }
};
QuerySpecificationContext.prototype.TRANSFORM = function () {
    return this.getToken(sparkParser.TRANSFORM, 0);
};
QuerySpecificationContext.prototype.MAP = function () {
    return this.getToken(sparkParser.MAP, 0);
};
QuerySpecificationContext.prototype.REDUCE = function () {
    return this.getToken(sparkParser.REDUCE, 0);
};
QuerySpecificationContext.prototype.identifierSeq = function () {
    return this.getTypedRuleContext(IdentifierSeqContext, 0);
};
QuerySpecificationContext.prototype.colTypeList = function () {
    return this.getTypedRuleContext(ColTypeListContext, 0);
};
QuerySpecificationContext.prototype.lateralView = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(LateralViewContext);
    }
    else {
        return this.getTypedRuleContext(LateralViewContext, i);
    }
};
QuerySpecificationContext.prototype.aggregation = function () {
    return this.getTypedRuleContext(AggregationContext, 0);
};
QuerySpecificationContext.prototype.HAVING = function () {
    return this.getToken(sparkParser.HAVING, 0);
};
QuerySpecificationContext.prototype.windows = function () {
    return this.getTypedRuleContext(WindowsContext, 0);
};
QuerySpecificationContext.prototype.setQuantifier = function () {
    return this.getTypedRuleContext(SetQuantifierContext, 0);
};
QuerySpecificationContext.prototype.hint = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(HintContext);
    }
    else {
        return this.getTypedRuleContext(HintContext, i);
    }
};
QuerySpecificationContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterQuerySpecification(this);
    }
};
QuerySpecificationContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitQuerySpecification(this);
    }
};
QuerySpecificationContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitQuerySpecification(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.QuerySpecificationContext = QuerySpecificationContext;
sparkParser.prototype.querySpecification = function () {
    var localctx = new QuerySpecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, sparkParser.RULE_querySpecification);
    var _la = 0; // Token type
    try {
        this.state = 1460;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 185, this._ctx);
        switch (la_) {
            case 1:
                this.enterOuterAlt(localctx, 1);
                this.state = 1377;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case sparkParser.SELECT:
                        this.state = 1367;
                        this.match(sparkParser.SELECT);
                        this.state = 1368;
                        localctx.kind = this.match(sparkParser.TRANSFORM);
                        this.state = 1369;
                        this.match(sparkParser.T__0);
                        this.state = 1370;
                        this.namedExpressionSeq();
                        this.state = 1371;
                        this.match(sparkParser.T__1);
                        break;
                    case sparkParser.MAP:
                        this.state = 1373;
                        localctx.kind = this.match(sparkParser.MAP);
                        this.state = 1374;
                        this.namedExpressionSeq();
                        break;
                    case sparkParser.REDUCE:
                        this.state = 1375;
                        localctx.kind = this.match(sparkParser.REDUCE);
                        this.state = 1376;
                        this.namedExpressionSeq();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 1380;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.ROW) {
                    this.state = 1379;
                    localctx.inRowFormat = this.rowFormat();
                }
                this.state = 1384;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.RECORDWRITER) {
                    this.state = 1382;
                    this.match(sparkParser.RECORDWRITER);
                    this.state = 1383;
                    localctx.recordWriter = this.match(sparkParser.STRING);
                }
                this.state = 1386;
                this.match(sparkParser.USING);
                this.state = 1387;
                localctx.script = this.match(sparkParser.STRING);
                this.state = 1400;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 169, this._ctx);
                if (la_ === 1) {
                    this.state = 1388;
                    this.match(sparkParser.AS);
                    this.state = 1398;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 168, this._ctx);
                    switch (la_) {
                        case 1:
                            this.state = 1389;
                            this.identifierSeq();
                            break;
                        case 2:
                            this.state = 1390;
                            this.colTypeList();
                            break;
                        case 3:
                            this.state = 1391;
                            this.match(sparkParser.T__0);
                            this.state = 1394;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 167, this._ctx);
                            switch (la_) {
                                case 1:
                                    this.state = 1392;
                                    this.identifierSeq();
                                    break;
                                case 2:
                                    this.state = 1393;
                                    this.colTypeList();
                                    break;
                            }
                            this.state = 1396;
                            this.match(sparkParser.T__1);
                            break;
                    }
                }
                this.state = 1403;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 170, this._ctx);
                if (la_ === 1) {
                    this.state = 1402;
                    localctx.outRowFormat = this.rowFormat();
                }
                this.state = 1407;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 171, this._ctx);
                if (la_ === 1) {
                    this.state = 1405;
                    this.match(sparkParser.RECORDREADER);
                    this.state = 1406;
                    localctx.recordReader = this.match(sparkParser.STRING);
                }
                this.state = 1410;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 172, this._ctx);
                if (la_ === 1) {
                    this.state = 1409;
                    this.fromClause();
                }
                this.state = 1414;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 173, this._ctx);
                if (la_ === 1) {
                    this.state = 1412;
                    this.match(sparkParser.WHERE);
                    this.state = 1413;
                    localctx.where = this.booleanExpression(0);
                }
                break;
            case 2:
                this.enterOuterAlt(localctx, 2);
                this.state = 1438;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case sparkParser.SELECT:
                        this.state = 1416;
                        localctx.kind = this.match(sparkParser.SELECT);
                        this.state = 1420;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === sparkParser.T__4) {
                            this.state = 1417;
                            localctx._hint = this.hint();
                            localctx.hints.push(localctx._hint);
                            this.state = 1422;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1424;
                        this._errHandler.sync(this);
                        var la_ = this._interp.adaptivePredict(this._input, 175, this._ctx);
                        if (la_ === 1) {
                            this.state = 1423;
                            this.setQuantifier();
                        }
                        this.state = 1426;
                        this.namedExpressionSeq();
                        this.state = 1428;
                        this._errHandler.sync(this);
                        var la_ = this._interp.adaptivePredict(this._input, 176, this._ctx);
                        if (la_ === 1) {
                            this.state = 1427;
                            this.fromClause();
                        }
                        break;
                    case sparkParser.FROM:
                        this.state = 1430;
                        this.fromClause();
                        this.state = 1436;
                        this._errHandler.sync(this);
                        var la_ = this._interp.adaptivePredict(this._input, 178, this._ctx);
                        if (la_ === 1) {
                            this.state = 1431;
                            localctx.kind = this.match(sparkParser.SELECT);
                            this.state = 1433;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 177, this._ctx);
                            if (la_ === 1) {
                                this.state = 1432;
                                this.setQuantifier();
                            }
                            this.state = 1435;
                            this.namedExpressionSeq();
                        }
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 1443;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input, 180, this._ctx);
                while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        this.state = 1440;
                        this.lateralView();
                    }
                    this.state = 1445;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input, 180, this._ctx);
                }
                this.state = 1448;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 181, this._ctx);
                if (la_ === 1) {
                    this.state = 1446;
                    this.match(sparkParser.WHERE);
                    this.state = 1447;
                    localctx.where = this.booleanExpression(0);
                }
                this.state = 1451;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 182, this._ctx);
                if (la_ === 1) {
                    this.state = 1450;
                    this.aggregation();
                }
                this.state = 1455;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 183, this._ctx);
                if (la_ === 1) {
                    this.state = 1453;
                    this.match(sparkParser.HAVING);
                    this.state = 1454;
                    localctx.having = this.booleanExpression(0);
                }
                this.state = 1458;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 184, this._ctx);
                if (la_ === 1) {
                    this.state = 1457;
                    this.windows();
                }
                break;
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function HintContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_hint;
    this._hintStatement = null; // HintStatementContext
    this.hintStatements = []; // of HintStatementContexts
    return this;
}
HintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HintContext.prototype.constructor = HintContext;
HintContext.prototype.hintStatement = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(HintStatementContext);
    }
    else {
        return this.getTypedRuleContext(HintStatementContext, i);
    }
};
HintContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterHint(this);
    }
};
HintContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitHint(this);
    }
};
HintContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitHint(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.HintContext = HintContext;
sparkParser.prototype.hint = function () {
    var localctx = new HintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, sparkParser.RULE_hint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1462;
        this.match(sparkParser.T__4);
        this.state = 1463;
        localctx._hintStatement = this.hintStatement();
        localctx.hintStatements.push(localctx._hintStatement);
        this.state = 1470;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << sparkParser.T__2) | (1 << sparkParser.SELECT) | (1 << sparkParser.FROM) | (1 << sparkParser.ADD) | (1 << sparkParser.AS) | (1 << sparkParser.ALL) | (1 << sparkParser.ANY) | (1 << sparkParser.DISTINCT) | (1 << sparkParser.WHERE) | (1 << sparkParser.GROUP) | (1 << sparkParser.BY) | (1 << sparkParser.GROUPING) | (1 << sparkParser.SETS) | (1 << sparkParser.CUBE) | (1 << sparkParser.ROLLUP) | (1 << sparkParser.ORDER) | (1 << sparkParser.HAVING) | (1 << sparkParser.LIMIT) | (1 << sparkParser.AT) | (1 << sparkParser.OR) | (1 << sparkParser.AND) | (1 << sparkParser.IN))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (sparkParser.NOT - 32)) | (1 << (sparkParser.NO - 32)) | (1 << (sparkParser.EXISTS - 32)) | (1 << (sparkParser.BETWEEN - 32)) | (1 << (sparkParser.LIKE - 32)) | (1 << (sparkParser.RLIKE - 32)) | (1 << (sparkParser.IS - 32)) | (1 << (sparkParser.NULL - 32)) | (1 << (sparkParser.TRUE - 32)) | (1 << (sparkParser.FALSE - 32)) | (1 << (sparkParser.NULLS - 32)) | (1 << (sparkParser.ASC - 32)) | (1 << (sparkParser.DESC - 32)) | (1 << (sparkParser.FOR - 32)) | (1 << (sparkParser.INTERVAL - 32)) | (1 << (sparkParser.CASE - 32)) | (1 << (sparkParser.WHEN - 32)) | (1 << (sparkParser.THEN - 32)) | (1 << (sparkParser.ELSE - 32)) | (1 << (sparkParser.END - 32)) | (1 << (sparkParser.JOIN - 32)) | (1 << (sparkParser.CROSS - 32)) | (1 << (sparkParser.OUTER - 32)) | (1 << (sparkParser.INNER - 32)) | (1 << (sparkParser.LEFT - 32)) | (1 << (sparkParser.SEMI - 32)) | (1 << (sparkParser.RIGHT - 32)) | (1 << (sparkParser.FULL - 32)) | (1 << (sparkParser.NATURAL - 32)) | (1 << (sparkParser.ON - 32)) | (1 << (sparkParser.PIVOT - 32)) | (1 << (sparkParser.LATERAL - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (sparkParser.WINDOW - 64)) | (1 << (sparkParser.OVER - 64)) | (1 << (sparkParser.PARTITION - 64)) | (1 << (sparkParser.RANGE - 64)) | (1 << (sparkParser.ROWS - 64)) | (1 << (sparkParser.UNBOUNDED - 64)) | (1 << (sparkParser.PRECEDING - 64)) | (1 << (sparkParser.FOLLOWING - 64)) | (1 << (sparkParser.CURRENT - 64)) | (1 << (sparkParser.FIRST - 64)) | (1 << (sparkParser.AFTER - 64)) | (1 << (sparkParser.LAST - 64)) | (1 << (sparkParser.ROW - 64)) | (1 << (sparkParser.WITH - 64)) | (1 << (sparkParser.VALUES - 64)) | (1 << (sparkParser.CREATE - 64)) | (1 << (sparkParser.TABLE - 64)) | (1 << (sparkParser.DIRECTORY - 64)) | (1 << (sparkParser.VIEW - 64)) | (1 << (sparkParser.REPLACE - 64)) | (1 << (sparkParser.INSERT - 64)) | (1 << (sparkParser.DELETE - 64)) | (1 << (sparkParser.INTO - 64)) | (1 << (sparkParser.DESCRIBE - 64)) | (1 << (sparkParser.EXPLAIN - 64)) | (1 << (sparkParser.FORMAT - 64)) | (1 << (sparkParser.LOGICAL - 64)) | (1 << (sparkParser.CODEGEN - 64)) | (1 << (sparkParser.COST - 64)) | (1 << (sparkParser.CAST - 64)) | (1 << (sparkParser.SHOW - 64)) | (1 << (sparkParser.TABLES - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (sparkParser.COLUMNS - 96)) | (1 << (sparkParser.COLUMN - 96)) | (1 << (sparkParser.USE - 96)) | (1 << (sparkParser.PARTITIONS - 96)) | (1 << (sparkParser.FUNCTIONS - 96)) | (1 << (sparkParser.DROP - 96)) | (1 << (sparkParser.UNION - 96)) | (1 << (sparkParser.EXCEPT - 96)) | (1 << (sparkParser.SETMINUS - 96)) | (1 << (sparkParser.INTERSECT - 96)) | (1 << (sparkParser.TO - 96)) | (1 << (sparkParser.TABLESAMPLE - 96)) | (1 << (sparkParser.STRATIFY - 96)) | (1 << (sparkParser.ALTER - 96)) | (1 << (sparkParser.RENAME - 96)) | (1 << (sparkParser.ARRAY - 96)) | (1 << (sparkParser.MAP - 96)) | (1 << (sparkParser.STRUCT - 96)) | (1 << (sparkParser.COMMENT - 96)) | (1 << (sparkParser.SET - 96)) | (1 << (sparkParser.RESET - 96)) | (1 << (sparkParser.DATA - 96)) | (1 << (sparkParser.START - 96)) | (1 << (sparkParser.TRANSACTION - 96)) | (1 << (sparkParser.COMMIT - 96)) | (1 << (sparkParser.ROLLBACK - 96)) | (1 << (sparkParser.MACRO - 96)) | (1 << (sparkParser.IGNORE - 96)) | (1 << (sparkParser.BOTH - 96)) | (1 << (sparkParser.LEADING - 96)) | (1 << (sparkParser.TRAILING - 96)) | (1 << (sparkParser.IF - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (sparkParser.POSITION - 128)) | (1 << (sparkParser.EXTRACT - 128)) | (1 << (sparkParser.DIV - 128)) | (1 << (sparkParser.PERCENTLIT - 128)) | (1 << (sparkParser.BUCKET - 128)) | (1 << (sparkParser.OUT - 128)) | (1 << (sparkParser.OF - 128)) | (1 << (sparkParser.SORT - 128)) | (1 << (sparkParser.CLUSTER - 128)) | (1 << (sparkParser.DISTRIBUTE - 128)) | (1 << (sparkParser.OVERWRITE - 128)) | (1 << (sparkParser.TRANSFORM - 128)) | (1 << (sparkParser.REDUCE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (sparkParser.SERDE - 160)) | (1 << (sparkParser.SERDEPROPERTIES - 160)) | (1 << (sparkParser.RECORDREADER - 160)) | (1 << (sparkParser.RECORDWRITER - 160)) | (1 << (sparkParser.DELIMITED - 160)) | (1 << (sparkParser.FIELDS - 160)) | (1 << (sparkParser.TERMINATED - 160)) | (1 << (sparkParser.COLLECTION - 160)) | (1 << (sparkParser.ITEMS - 160)) | (1 << (sparkParser.KEYS - 160)) | (1 << (sparkParser.ESCAPED - 160)) | (1 << (sparkParser.LINES - 160)) | (1 << (sparkParser.SEPARATED - 160)) | (1 << (sparkParser.FUNCTION - 160)) | (1 << (sparkParser.EXTENDED - 160)) | (1 << (sparkParser.REFRESH - 160)) | (1 << (sparkParser.CLEAR - 160)) | (1 << (sparkParser.CACHE - 160)) | (1 << (sparkParser.UNCACHE - 160)) | (1 << (sparkParser.LAZY - 160)) | (1 << (sparkParser.FORMATTED - 160)) | (1 << (sparkParser.GLOBAL - 160)) | (1 << (sparkParser.TEMPORARY - 160)) | (1 << (sparkParser.OPTIONS - 160)) | (1 << (sparkParser.UNSET - 160)) | (1 << (sparkParser.TBLPROPERTIES - 160)) | (1 << (sparkParser.DBPROPERTIES - 160)) | (1 << (sparkParser.BUCKETS - 160)) | (1 << (sparkParser.SKEWED - 160)) | (1 << (sparkParser.STORED - 160)) | (1 << (sparkParser.DIRECTORIES - 160)) | (1 << (sparkParser.LOCATION - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (sparkParser.EXCHANGE - 192)) | (1 << (sparkParser.ARCHIVE - 192)) | (1 << (sparkParser.UNARCHIVE - 192)) | (1 << (sparkParser.FILEFORMAT - 192)) | (1 << (sparkParser.TOUCH - 192)) | (1 << (sparkParser.COMPACT - 192)) | (1 << (sparkParser.CONCATENATE - 192)) | (1 << (sparkParser.CHANGE - 192)) | (1 << (sparkParser.CASCADE - 192)) | (1 << (sparkParser.RESTRICT - 192)) | (1 << (sparkParser.CLUSTERED - 192)) | (1 << (sparkParser.SORTED - 192)) | (1 << (sparkParser.PURGE - 192)) | (1 << (sparkParser.INPUTFORMAT - 192)) | (1 << (sparkParser.OUTPUTFORMAT - 192)) | (1 << (sparkParser.DATABASE - 192)) | (1 << (sparkParser.DATABASES - 192)) | (1 << (sparkParser.DFS - 192)) | (1 << (sparkParser.TRUNCATE - 192)) | (1 << (sparkParser.ANALYZE - 192)) | (1 << (sparkParser.COMPUTE - 192)) | (1 << (sparkParser.LIST - 192)) | (1 << (sparkParser.STATISTICS - 192)) | (1 << (sparkParser.PARTITIONED - 192)) | (1 << (sparkParser.EXTERNAL - 192)) | (1 << (sparkParser.DEFINED - 192)) | (1 << (sparkParser.REVOKE - 192)) | (1 << (sparkParser.GRANT - 192)) | (1 << (sparkParser.LOCK - 192)) | (1 << (sparkParser.UNLOCK - 192)) | (1 << (sparkParser.MSCK - 192)) | (1 << (sparkParser.REPAIR - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (sparkParser.RECOVER - 224)) | (1 << (sparkParser.EXPORT - 224)) | (1 << (sparkParser.IMPORT - 224)) | (1 << (sparkParser.LOAD - 224)) | (1 << (sparkParser.ROLE - 224)) | (1 << (sparkParser.ROLES - 224)) | (1 << (sparkParser.COMPACTIONS - 224)) | (1 << (sparkParser.PRINCIPALS - 224)) | (1 << (sparkParser.TRANSACTIONS - 224)) | (1 << (sparkParser.INDEX - 224)) | (1 << (sparkParser.INDEXES - 224)) | (1 << (sparkParser.LOCKS - 224)) | (1 << (sparkParser.OPTION - 224)) | (1 << (sparkParser.ANTI - 224)) | (1 << (sparkParser.LOCAL - 224)) | (1 << (sparkParser.INPATH - 224)) | (1 << (sparkParser.IDENTIFIER - 224)) | (1 << (sparkParser.BACKQUOTED_IDENTIFIER - 224)))) !== 0)) {
            this.state = 1465;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === sparkParser.T__2) {
                this.state = 1464;
                this.match(sparkParser.T__2);
            }
            this.state = 1467;
            localctx._hintStatement = this.hintStatement();
            localctx.hintStatements.push(localctx._hintStatement);
            this.state = 1472;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1473;
        this.match(sparkParser.T__5);
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function HintStatementContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_hintStatement;
    this.hintName = null; // IdentifierContext
    this._primaryExpression = null; // PrimaryExpressionContext
    this.parameters = []; // of PrimaryExpressionContexts
    return this;
}
HintStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HintStatementContext.prototype.constructor = HintStatementContext;
HintStatementContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};
HintStatementContext.prototype.primaryExpression = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(PrimaryExpressionContext);
    }
    else {
        return this.getTypedRuleContext(PrimaryExpressionContext, i);
    }
};
HintStatementContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterHintStatement(this);
    }
};
HintStatementContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitHintStatement(this);
    }
};
HintStatementContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitHintStatement(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.HintStatementContext = HintStatementContext;
sparkParser.prototype.hintStatement = function () {
    var localctx = new HintStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, sparkParser.RULE_hintStatement);
    var _la = 0; // Token type
    try {
        this.state = 1488;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 189, this._ctx);
        switch (la_) {
            case 1:
                this.enterOuterAlt(localctx, 1);
                this.state = 1475;
                localctx.hintName = this.identifier();
                break;
            case 2:
                this.enterOuterAlt(localctx, 2);
                this.state = 1476;
                localctx.hintName = this.identifier();
                this.state = 1477;
                this.match(sparkParser.T__0);
                this.state = 1478;
                localctx._primaryExpression = this.primaryExpression(0);
                localctx.parameters.push(localctx._primaryExpression);
                this.state = 1483;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === sparkParser.T__2) {
                    this.state = 1479;
                    this.match(sparkParser.T__2);
                    this.state = 1480;
                    localctx._primaryExpression = this.primaryExpression(0);
                    localctx.parameters.push(localctx._primaryExpression);
                    this.state = 1485;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1486;
                this.match(sparkParser.T__1);
                break;
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function FromClauseContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_fromClause;
    return this;
}
FromClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FromClauseContext.prototype.constructor = FromClauseContext;
FromClauseContext.prototype.FROM = function () {
    return this.getToken(sparkParser.FROM, 0);
};
FromClauseContext.prototype.relation = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(RelationContext);
    }
    else {
        return this.getTypedRuleContext(RelationContext, i);
    }
};
FromClauseContext.prototype.lateralView = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(LateralViewContext);
    }
    else {
        return this.getTypedRuleContext(LateralViewContext, i);
    }
};
FromClauseContext.prototype.pivotClause = function () {
    return this.getTypedRuleContext(PivotClauseContext, 0);
};
FromClauseContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterFromClause(this);
    }
};
FromClauseContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitFromClause(this);
    }
};
FromClauseContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitFromClause(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.FromClauseContext = FromClauseContext;
sparkParser.prototype.fromClause = function () {
    var localctx = new FromClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, sparkParser.RULE_fromClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1490;
        this.match(sparkParser.FROM);
        this.state = 1491;
        this.relation();
        this.state = 1496;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 190, this._ctx);
        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
                this.state = 1492;
                this.match(sparkParser.T__2);
                this.state = 1493;
                this.relation();
            }
            this.state = 1498;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 190, this._ctx);
        }
        this.state = 1502;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 191, this._ctx);
        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
                this.state = 1499;
                this.lateralView();
            }
            this.state = 1504;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 191, this._ctx);
        }
        this.state = 1506;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 192, this._ctx);
        if (la_ === 1) {
            this.state = 1505;
            this.pivotClause();
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function AggregationContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_aggregation;
    this._expression = null; // ExpressionContext
    this.groupingExpressions = []; // of ExpressionContexts
    this.kind = null; // Token
    return this;
}
AggregationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AggregationContext.prototype.constructor = AggregationContext;
AggregationContext.prototype.GROUP = function () {
    return this.getToken(sparkParser.GROUP, 0);
};
AggregationContext.prototype.BY = function () {
    return this.getToken(sparkParser.BY, 0);
};
AggregationContext.prototype.expression = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(ExpressionContext);
    }
    else {
        return this.getTypedRuleContext(ExpressionContext, i);
    }
};
AggregationContext.prototype.WITH = function () {
    return this.getToken(sparkParser.WITH, 0);
};
AggregationContext.prototype.SETS = function () {
    return this.getToken(sparkParser.SETS, 0);
};
AggregationContext.prototype.groupingSet = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(GroupingSetContext);
    }
    else {
        return this.getTypedRuleContext(GroupingSetContext, i);
    }
};
AggregationContext.prototype.ROLLUP = function () {
    return this.getToken(sparkParser.ROLLUP, 0);
};
AggregationContext.prototype.CUBE = function () {
    return this.getToken(sparkParser.CUBE, 0);
};
AggregationContext.prototype.GROUPING = function () {
    return this.getToken(sparkParser.GROUPING, 0);
};
AggregationContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterAggregation(this);
    }
};
AggregationContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitAggregation(this);
    }
};
AggregationContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitAggregation(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.AggregationContext = AggregationContext;
sparkParser.prototype.aggregation = function () {
    var localctx = new AggregationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, sparkParser.RULE_aggregation);
    var _la = 0; // Token type
    try {
        this.state = 1552;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 197, this._ctx);
        switch (la_) {
            case 1:
                this.enterOuterAlt(localctx, 1);
                this.state = 1508;
                this.match(sparkParser.GROUP);
                this.state = 1509;
                this.match(sparkParser.BY);
                this.state = 1510;
                localctx._expression = this.expression();
                localctx.groupingExpressions.push(localctx._expression);
                this.state = 1515;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input, 193, this._ctx);
                while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        this.state = 1511;
                        this.match(sparkParser.T__2);
                        this.state = 1512;
                        localctx._expression = this.expression();
                        localctx.groupingExpressions.push(localctx._expression);
                    }
                    this.state = 1517;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input, 193, this._ctx);
                }
                this.state = 1535;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 195, this._ctx);
                if (la_ === 1) {
                    this.state = 1518;
                    this.match(sparkParser.WITH);
                    this.state = 1519;
                    localctx.kind = this.match(sparkParser.ROLLUP);
                }
                else if (la_ === 2) {
                    this.state = 1520;
                    this.match(sparkParser.WITH);
                    this.state = 1521;
                    localctx.kind = this.match(sparkParser.CUBE);
                }
                else if (la_ === 3) {
                    this.state = 1522;
                    localctx.kind = this.match(sparkParser.GROUPING);
                    this.state = 1523;
                    this.match(sparkParser.SETS);
                    this.state = 1524;
                    this.match(sparkParser.T__0);
                    this.state = 1525;
                    this.groupingSet();
                    this.state = 1530;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === sparkParser.T__2) {
                        this.state = 1526;
                        this.match(sparkParser.T__2);
                        this.state = 1527;
                        this.groupingSet();
                        this.state = 1532;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1533;
                    this.match(sparkParser.T__1);
                }
                break;
            case 2:
                this.enterOuterAlt(localctx, 2);
                this.state = 1537;
                this.match(sparkParser.GROUP);
                this.state = 1538;
                this.match(sparkParser.BY);
                this.state = 1539;
                localctx.kind = this.match(sparkParser.GROUPING);
                this.state = 1540;
                this.match(sparkParser.SETS);
                this.state = 1541;
                this.match(sparkParser.T__0);
                this.state = 1542;
                this.groupingSet();
                this.state = 1547;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === sparkParser.T__2) {
                    this.state = 1543;
                    this.match(sparkParser.T__2);
                    this.state = 1544;
                    this.groupingSet();
                    this.state = 1549;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1550;
                this.match(sparkParser.T__1);
                break;
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function GroupingSetContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_groupingSet;
    return this;
}
GroupingSetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupingSetContext.prototype.constructor = GroupingSetContext;
GroupingSetContext.prototype.expression = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(ExpressionContext);
    }
    else {
        return this.getTypedRuleContext(ExpressionContext, i);
    }
};
GroupingSetContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterGroupingSet(this);
    }
};
GroupingSetContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitGroupingSet(this);
    }
};
GroupingSetContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitGroupingSet(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.GroupingSetContext = GroupingSetContext;
sparkParser.prototype.groupingSet = function () {
    var localctx = new GroupingSetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, sparkParser.RULE_groupingSet);
    var _la = 0; // Token type
    try {
        this.state = 1567;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 200, this._ctx);
        switch (la_) {
            case 1:
                this.enterOuterAlt(localctx, 1);
                this.state = 1554;
                this.match(sparkParser.T__0);
                this.state = 1563;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << sparkParser.T__0) | (1 << sparkParser.SELECT) | (1 << sparkParser.FROM) | (1 << sparkParser.ADD) | (1 << sparkParser.AS) | (1 << sparkParser.ALL) | (1 << sparkParser.ANY) | (1 << sparkParser.DISTINCT) | (1 << sparkParser.WHERE) | (1 << sparkParser.GROUP) | (1 << sparkParser.BY) | (1 << sparkParser.GROUPING) | (1 << sparkParser.SETS) | (1 << sparkParser.CUBE) | (1 << sparkParser.ROLLUP) | (1 << sparkParser.ORDER) | (1 << sparkParser.HAVING) | (1 << sparkParser.LIMIT) | (1 << sparkParser.AT) | (1 << sparkParser.OR) | (1 << sparkParser.AND) | (1 << sparkParser.IN))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (sparkParser.NOT - 32)) | (1 << (sparkParser.NO - 32)) | (1 << (sparkParser.EXISTS - 32)) | (1 << (sparkParser.BETWEEN - 32)) | (1 << (sparkParser.LIKE - 32)) | (1 << (sparkParser.RLIKE - 32)) | (1 << (sparkParser.IS - 32)) | (1 << (sparkParser.NULL - 32)) | (1 << (sparkParser.TRUE - 32)) | (1 << (sparkParser.FALSE - 32)) | (1 << (sparkParser.NULLS - 32)) | (1 << (sparkParser.ASC - 32)) | (1 << (sparkParser.DESC - 32)) | (1 << (sparkParser.FOR - 32)) | (1 << (sparkParser.INTERVAL - 32)) | (1 << (sparkParser.CASE - 32)) | (1 << (sparkParser.WHEN - 32)) | (1 << (sparkParser.THEN - 32)) | (1 << (sparkParser.ELSE - 32)) | (1 << (sparkParser.END - 32)) | (1 << (sparkParser.JOIN - 32)) | (1 << (sparkParser.CROSS - 32)) | (1 << (sparkParser.OUTER - 32)) | (1 << (sparkParser.INNER - 32)) | (1 << (sparkParser.LEFT - 32)) | (1 << (sparkParser.SEMI - 32)) | (1 << (sparkParser.RIGHT - 32)) | (1 << (sparkParser.FULL - 32)) | (1 << (sparkParser.NATURAL - 32)) | (1 << (sparkParser.ON - 32)) | (1 << (sparkParser.PIVOT - 32)) | (1 << (sparkParser.LATERAL - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (sparkParser.WINDOW - 64)) | (1 << (sparkParser.OVER - 64)) | (1 << (sparkParser.PARTITION - 64)) | (1 << (sparkParser.RANGE - 64)) | (1 << (sparkParser.ROWS - 64)) | (1 << (sparkParser.UNBOUNDED - 64)) | (1 << (sparkParser.PRECEDING - 64)) | (1 << (sparkParser.FOLLOWING - 64)) | (1 << (sparkParser.CURRENT - 64)) | (1 << (sparkParser.FIRST - 64)) | (1 << (sparkParser.AFTER - 64)) | (1 << (sparkParser.LAST - 64)) | (1 << (sparkParser.ROW - 64)) | (1 << (sparkParser.WITH - 64)) | (1 << (sparkParser.VALUES - 64)) | (1 << (sparkParser.CREATE - 64)) | (1 << (sparkParser.TABLE - 64)) | (1 << (sparkParser.DIRECTORY - 64)) | (1 << (sparkParser.VIEW - 64)) | (1 << (sparkParser.REPLACE - 64)) | (1 << (sparkParser.INSERT - 64)) | (1 << (sparkParser.DELETE - 64)) | (1 << (sparkParser.INTO - 64)) | (1 << (sparkParser.DESCRIBE - 64)) | (1 << (sparkParser.EXPLAIN - 64)) | (1 << (sparkParser.FORMAT - 64)) | (1 << (sparkParser.LOGICAL - 64)) | (1 << (sparkParser.CODEGEN - 64)) | (1 << (sparkParser.COST - 64)) | (1 << (sparkParser.CAST - 64)) | (1 << (sparkParser.SHOW - 64)) | (1 << (sparkParser.TABLES - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (sparkParser.COLUMNS - 96)) | (1 << (sparkParser.COLUMN - 96)) | (1 << (sparkParser.USE - 96)) | (1 << (sparkParser.PARTITIONS - 96)) | (1 << (sparkParser.FUNCTIONS - 96)) | (1 << (sparkParser.DROP - 96)) | (1 << (sparkParser.UNION - 96)) | (1 << (sparkParser.EXCEPT - 96)) | (1 << (sparkParser.SETMINUS - 96)) | (1 << (sparkParser.INTERSECT - 96)) | (1 << (sparkParser.TO - 96)) | (1 << (sparkParser.TABLESAMPLE - 96)) | (1 << (sparkParser.STRATIFY - 96)) | (1 << (sparkParser.ALTER - 96)) | (1 << (sparkParser.RENAME - 96)) | (1 << (sparkParser.ARRAY - 96)) | (1 << (sparkParser.MAP - 96)) | (1 << (sparkParser.STRUCT - 96)) | (1 << (sparkParser.COMMENT - 96)) | (1 << (sparkParser.SET - 96)) | (1 << (sparkParser.RESET - 96)) | (1 << (sparkParser.DATA - 96)) | (1 << (sparkParser.START - 96)) | (1 << (sparkParser.TRANSACTION - 96)) | (1 << (sparkParser.COMMIT - 96)) | (1 << (sparkParser.ROLLBACK - 96)) | (1 << (sparkParser.MACRO - 96)) | (1 << (sparkParser.IGNORE - 96)) | (1 << (sparkParser.BOTH - 96)) | (1 << (sparkParser.LEADING - 96)) | (1 << (sparkParser.TRAILING - 96)) | (1 << (sparkParser.IF - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (sparkParser.POSITION - 128)) | (1 << (sparkParser.EXTRACT - 128)) | (1 << (sparkParser.PLUS - 128)) | (1 << (sparkParser.MINUS - 128)) | (1 << (sparkParser.ASTERISK - 128)) | (1 << (sparkParser.DIV - 128)) | (1 << (sparkParser.TILDE - 128)) | (1 << (sparkParser.PERCENTLIT - 128)) | (1 << (sparkParser.BUCKET - 128)) | (1 << (sparkParser.OUT - 128)) | (1 << (sparkParser.OF - 128)) | (1 << (sparkParser.SORT - 128)) | (1 << (sparkParser.CLUSTER - 128)) | (1 << (sparkParser.DISTRIBUTE - 128)) | (1 << (sparkParser.OVERWRITE - 128)) | (1 << (sparkParser.TRANSFORM - 128)) | (1 << (sparkParser.REDUCE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (sparkParser.SERDE - 160)) | (1 << (sparkParser.SERDEPROPERTIES - 160)) | (1 << (sparkParser.RECORDREADER - 160)) | (1 << (sparkParser.RECORDWRITER - 160)) | (1 << (sparkParser.DELIMITED - 160)) | (1 << (sparkParser.FIELDS - 160)) | (1 << (sparkParser.TERMINATED - 160)) | (1 << (sparkParser.COLLECTION - 160)) | (1 << (sparkParser.ITEMS - 160)) | (1 << (sparkParser.KEYS - 160)) | (1 << (sparkParser.ESCAPED - 160)) | (1 << (sparkParser.LINES - 160)) | (1 << (sparkParser.SEPARATED - 160)) | (1 << (sparkParser.FUNCTION - 160)) | (1 << (sparkParser.EXTENDED - 160)) | (1 << (sparkParser.REFRESH - 160)) | (1 << (sparkParser.CLEAR - 160)) | (1 << (sparkParser.CACHE - 160)) | (1 << (sparkParser.UNCACHE - 160)) | (1 << (sparkParser.LAZY - 160)) | (1 << (sparkParser.FORMATTED - 160)) | (1 << (sparkParser.GLOBAL - 160)) | (1 << (sparkParser.TEMPORARY - 160)) | (1 << (sparkParser.OPTIONS - 160)) | (1 << (sparkParser.UNSET - 160)) | (1 << (sparkParser.TBLPROPERTIES - 160)) | (1 << (sparkParser.DBPROPERTIES - 160)) | (1 << (sparkParser.BUCKETS - 160)) | (1 << (sparkParser.SKEWED - 160)) | (1 << (sparkParser.STORED - 160)) | (1 << (sparkParser.DIRECTORIES - 160)) | (1 << (sparkParser.LOCATION - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (sparkParser.EXCHANGE - 192)) | (1 << (sparkParser.ARCHIVE - 192)) | (1 << (sparkParser.UNARCHIVE - 192)) | (1 << (sparkParser.FILEFORMAT - 192)) | (1 << (sparkParser.TOUCH - 192)) | (1 << (sparkParser.COMPACT - 192)) | (1 << (sparkParser.CONCATENATE - 192)) | (1 << (sparkParser.CHANGE - 192)) | (1 << (sparkParser.CASCADE - 192)) | (1 << (sparkParser.RESTRICT - 192)) | (1 << (sparkParser.CLUSTERED - 192)) | (1 << (sparkParser.SORTED - 192)) | (1 << (sparkParser.PURGE - 192)) | (1 << (sparkParser.INPUTFORMAT - 192)) | (1 << (sparkParser.OUTPUTFORMAT - 192)) | (1 << (sparkParser.DATABASE - 192)) | (1 << (sparkParser.DATABASES - 192)) | (1 << (sparkParser.DFS - 192)) | (1 << (sparkParser.TRUNCATE - 192)) | (1 << (sparkParser.ANALYZE - 192)) | (1 << (sparkParser.COMPUTE - 192)) | (1 << (sparkParser.LIST - 192)) | (1 << (sparkParser.STATISTICS - 192)) | (1 << (sparkParser.PARTITIONED - 192)) | (1 << (sparkParser.EXTERNAL - 192)) | (1 << (sparkParser.DEFINED - 192)) | (1 << (sparkParser.REVOKE - 192)) | (1 << (sparkParser.GRANT - 192)) | (1 << (sparkParser.LOCK - 192)) | (1 << (sparkParser.UNLOCK - 192)) | (1 << (sparkParser.MSCK - 192)) | (1 << (sparkParser.REPAIR - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (sparkParser.RECOVER - 224)) | (1 << (sparkParser.EXPORT - 224)) | (1 << (sparkParser.IMPORT - 224)) | (1 << (sparkParser.LOAD - 224)) | (1 << (sparkParser.ROLE - 224)) | (1 << (sparkParser.ROLES - 224)) | (1 << (sparkParser.COMPACTIONS - 224)) | (1 << (sparkParser.PRINCIPALS - 224)) | (1 << (sparkParser.TRANSACTIONS - 224)) | (1 << (sparkParser.INDEX - 224)) | (1 << (sparkParser.INDEXES - 224)) | (1 << (sparkParser.LOCKS - 224)) | (1 << (sparkParser.OPTION - 224)) | (1 << (sparkParser.ANTI - 224)) | (1 << (sparkParser.LOCAL - 224)) | (1 << (sparkParser.INPATH - 224)) | (1 << (sparkParser.STRING - 224)) | (1 << (sparkParser.BIGINT_LITERAL - 224)) | (1 << (sparkParser.SMALLINT_LITERAL - 224)) | (1 << (sparkParser.TINYINT_LITERAL - 224)) | (1 << (sparkParser.INTEGER_VALUE - 224)) | (1 << (sparkParser.DECIMAL_VALUE - 224)) | (1 << (sparkParser.DOUBLE_LITERAL - 224)) | (1 << (sparkParser.BIGDECIMAL_LITERAL - 224)) | (1 << (sparkParser.IDENTIFIER - 224)) | (1 << (sparkParser.BACKQUOTED_IDENTIFIER - 224)))) !== 0)) {
                    this.state = 1555;
                    this.expression();
                    this.state = 1560;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === sparkParser.T__2) {
                        this.state = 1556;
                        this.match(sparkParser.T__2);
                        this.state = 1557;
                        this.expression();
                        this.state = 1562;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                }
                this.state = 1565;
                this.match(sparkParser.T__1);
                break;
            case 2:
                this.enterOuterAlt(localctx, 2);
                this.state = 1566;
                this.expression();
                break;
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function PivotClauseContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_pivotClause;
    this.aggregates = null; // NamedExpressionSeqContext
    this._pivotValue = null; // PivotValueContext
    this.pivotValues = []; // of PivotValueContexts
    return this;
}
PivotClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PivotClauseContext.prototype.constructor = PivotClauseContext;
PivotClauseContext.prototype.PIVOT = function () {
    return this.getToken(sparkParser.PIVOT, 0);
};
PivotClauseContext.prototype.FOR = function () {
    return this.getToken(sparkParser.FOR, 0);
};
PivotClauseContext.prototype.pivotColumn = function () {
    return this.getTypedRuleContext(PivotColumnContext, 0);
};
PivotClauseContext.prototype.IN = function () {
    return this.getToken(sparkParser.IN, 0);
};
PivotClauseContext.prototype.namedExpressionSeq = function () {
    return this.getTypedRuleContext(NamedExpressionSeqContext, 0);
};
PivotClauseContext.prototype.pivotValue = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(PivotValueContext);
    }
    else {
        return this.getTypedRuleContext(PivotValueContext, i);
    }
};
PivotClauseContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterPivotClause(this);
    }
};
PivotClauseContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitPivotClause(this);
    }
};
PivotClauseContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitPivotClause(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.PivotClauseContext = PivotClauseContext;
sparkParser.prototype.pivotClause = function () {
    var localctx = new PivotClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, sparkParser.RULE_pivotClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1569;
        this.match(sparkParser.PIVOT);
        this.state = 1570;
        this.match(sparkParser.T__0);
        this.state = 1571;
        localctx.aggregates = this.namedExpressionSeq();
        this.state = 1572;
        this.match(sparkParser.FOR);
        this.state = 1573;
        this.pivotColumn();
        this.state = 1574;
        this.match(sparkParser.IN);
        this.state = 1575;
        this.match(sparkParser.T__0);
        this.state = 1576;
        localctx._pivotValue = this.pivotValue();
        localctx.pivotValues.push(localctx._pivotValue);
        this.state = 1581;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === sparkParser.T__2) {
            this.state = 1577;
            this.match(sparkParser.T__2);
            this.state = 1578;
            localctx._pivotValue = this.pivotValue();
            localctx.pivotValues.push(localctx._pivotValue);
            this.state = 1583;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1584;
        this.match(sparkParser.T__1);
        this.state = 1585;
        this.match(sparkParser.T__1);
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function PivotColumnContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_pivotColumn;
    this._identifier = null; // IdentifierContext
    this.identifiers = []; // of IdentifierContexts
    return this;
}
PivotColumnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PivotColumnContext.prototype.constructor = PivotColumnContext;
PivotColumnContext.prototype.identifier = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(IdentifierContext);
    }
    else {
        return this.getTypedRuleContext(IdentifierContext, i);
    }
};
PivotColumnContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterPivotColumn(this);
    }
};
PivotColumnContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitPivotColumn(this);
    }
};
PivotColumnContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitPivotColumn(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.PivotColumnContext = PivotColumnContext;
sparkParser.prototype.pivotColumn = function () {
    var localctx = new PivotColumnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, sparkParser.RULE_pivotColumn);
    var _la = 0; // Token type
    try {
        this.state = 1599;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
            case sparkParser.SELECT:
            case sparkParser.FROM:
            case sparkParser.ADD:
            case sparkParser.AS:
            case sparkParser.ALL:
            case sparkParser.ANY:
            case sparkParser.DISTINCT:
            case sparkParser.WHERE:
            case sparkParser.GROUP:
            case sparkParser.BY:
            case sparkParser.GROUPING:
            case sparkParser.SETS:
            case sparkParser.CUBE:
            case sparkParser.ROLLUP:
            case sparkParser.ORDER:
            case sparkParser.HAVING:
            case sparkParser.LIMIT:
            case sparkParser.AT:
            case sparkParser.OR:
            case sparkParser.AND:
            case sparkParser.IN:
            case sparkParser.NOT:
            case sparkParser.NO:
            case sparkParser.EXISTS:
            case sparkParser.BETWEEN:
            case sparkParser.LIKE:
            case sparkParser.RLIKE:
            case sparkParser.IS:
            case sparkParser.NULL:
            case sparkParser.TRUE:
            case sparkParser.FALSE:
            case sparkParser.NULLS:
            case sparkParser.ASC:
            case sparkParser.DESC:
            case sparkParser.FOR:
            case sparkParser.INTERVAL:
            case sparkParser.CASE:
            case sparkParser.WHEN:
            case sparkParser.THEN:
            case sparkParser.ELSE:
            case sparkParser.END:
            case sparkParser.JOIN:
            case sparkParser.CROSS:
            case sparkParser.OUTER:
            case sparkParser.INNER:
            case sparkParser.LEFT:
            case sparkParser.SEMI:
            case sparkParser.RIGHT:
            case sparkParser.FULL:
            case sparkParser.NATURAL:
            case sparkParser.ON:
            case sparkParser.PIVOT:
            case sparkParser.LATERAL:
            case sparkParser.WINDOW:
            case sparkParser.OVER:
            case sparkParser.PARTITION:
            case sparkParser.RANGE:
            case sparkParser.ROWS:
            case sparkParser.UNBOUNDED:
            case sparkParser.PRECEDING:
            case sparkParser.FOLLOWING:
            case sparkParser.CURRENT:
            case sparkParser.FIRST:
            case sparkParser.AFTER:
            case sparkParser.LAST:
            case sparkParser.ROW:
            case sparkParser.WITH:
            case sparkParser.VALUES:
            case sparkParser.CREATE:
            case sparkParser.TABLE:
            case sparkParser.DIRECTORY:
            case sparkParser.VIEW:
            case sparkParser.REPLACE:
            case sparkParser.INSERT:
            case sparkParser.DELETE:
            case sparkParser.INTO:
            case sparkParser.DESCRIBE:
            case sparkParser.EXPLAIN:
            case sparkParser.FORMAT:
            case sparkParser.LOGICAL:
            case sparkParser.CODEGEN:
            case sparkParser.COST:
            case sparkParser.CAST:
            case sparkParser.SHOW:
            case sparkParser.TABLES:
            case sparkParser.COLUMNS:
            case sparkParser.COLUMN:
            case sparkParser.USE:
            case sparkParser.PARTITIONS:
            case sparkParser.FUNCTIONS:
            case sparkParser.DROP:
            case sparkParser.UNION:
            case sparkParser.EXCEPT:
            case sparkParser.SETMINUS:
            case sparkParser.INTERSECT:
            case sparkParser.TO:
            case sparkParser.TABLESAMPLE:
            case sparkParser.STRATIFY:
            case sparkParser.ALTER:
            case sparkParser.RENAME:
            case sparkParser.ARRAY:
            case sparkParser.MAP:
            case sparkParser.STRUCT:
            case sparkParser.COMMENT:
            case sparkParser.SET:
            case sparkParser.RESET:
            case sparkParser.DATA:
            case sparkParser.START:
            case sparkParser.TRANSACTION:
            case sparkParser.COMMIT:
            case sparkParser.ROLLBACK:
            case sparkParser.MACRO:
            case sparkParser.IGNORE:
            case sparkParser.BOTH:
            case sparkParser.LEADING:
            case sparkParser.TRAILING:
            case sparkParser.IF:
            case sparkParser.POSITION:
            case sparkParser.EXTRACT:
            case sparkParser.DIV:
            case sparkParser.PERCENTLIT:
            case sparkParser.BUCKET:
            case sparkParser.OUT:
            case sparkParser.OF:
            case sparkParser.SORT:
            case sparkParser.CLUSTER:
            case sparkParser.DISTRIBUTE:
            case sparkParser.OVERWRITE:
            case sparkParser.TRANSFORM:
            case sparkParser.REDUCE:
            case sparkParser.SERDE:
            case sparkParser.SERDEPROPERTIES:
            case sparkParser.RECORDREADER:
            case sparkParser.RECORDWRITER:
            case sparkParser.DELIMITED:
            case sparkParser.FIELDS:
            case sparkParser.TERMINATED:
            case sparkParser.COLLECTION:
            case sparkParser.ITEMS:
            case sparkParser.KEYS:
            case sparkParser.ESCAPED:
            case sparkParser.LINES:
            case sparkParser.SEPARATED:
            case sparkParser.FUNCTION:
            case sparkParser.EXTENDED:
            case sparkParser.REFRESH:
            case sparkParser.CLEAR:
            case sparkParser.CACHE:
            case sparkParser.UNCACHE:
            case sparkParser.LAZY:
            case sparkParser.FORMATTED:
            case sparkParser.GLOBAL:
            case sparkParser.TEMPORARY:
            case sparkParser.OPTIONS:
            case sparkParser.UNSET:
            case sparkParser.TBLPROPERTIES:
            case sparkParser.DBPROPERTIES:
            case sparkParser.BUCKETS:
            case sparkParser.SKEWED:
            case sparkParser.STORED:
            case sparkParser.DIRECTORIES:
            case sparkParser.LOCATION:
            case sparkParser.EXCHANGE:
            case sparkParser.ARCHIVE:
            case sparkParser.UNARCHIVE:
            case sparkParser.FILEFORMAT:
            case sparkParser.TOUCH:
            case sparkParser.COMPACT:
            case sparkParser.CONCATENATE:
            case sparkParser.CHANGE:
            case sparkParser.CASCADE:
            case sparkParser.RESTRICT:
            case sparkParser.CLUSTERED:
            case sparkParser.SORTED:
            case sparkParser.PURGE:
            case sparkParser.INPUTFORMAT:
            case sparkParser.OUTPUTFORMAT:
            case sparkParser.DATABASE:
            case sparkParser.DATABASES:
            case sparkParser.DFS:
            case sparkParser.TRUNCATE:
            case sparkParser.ANALYZE:
            case sparkParser.COMPUTE:
            case sparkParser.LIST:
            case sparkParser.STATISTICS:
            case sparkParser.PARTITIONED:
            case sparkParser.EXTERNAL:
            case sparkParser.DEFINED:
            case sparkParser.REVOKE:
            case sparkParser.GRANT:
            case sparkParser.LOCK:
            case sparkParser.UNLOCK:
            case sparkParser.MSCK:
            case sparkParser.REPAIR:
            case sparkParser.RECOVER:
            case sparkParser.EXPORT:
            case sparkParser.IMPORT:
            case sparkParser.LOAD:
            case sparkParser.ROLE:
            case sparkParser.ROLES:
            case sparkParser.COMPACTIONS:
            case sparkParser.PRINCIPALS:
            case sparkParser.TRANSACTIONS:
            case sparkParser.INDEX:
            case sparkParser.INDEXES:
            case sparkParser.LOCKS:
            case sparkParser.OPTION:
            case sparkParser.ANTI:
            case sparkParser.LOCAL:
            case sparkParser.INPATH:
            case sparkParser.IDENTIFIER:
            case sparkParser.BACKQUOTED_IDENTIFIER:
                this.enterOuterAlt(localctx, 1);
                this.state = 1587;
                localctx._identifier = this.identifier();
                localctx.identifiers.push(localctx._identifier);
                break;
            case sparkParser.T__0:
                this.enterOuterAlt(localctx, 2);
                this.state = 1588;
                this.match(sparkParser.T__0);
                this.state = 1589;
                localctx._identifier = this.identifier();
                localctx.identifiers.push(localctx._identifier);
                this.state = 1594;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === sparkParser.T__2) {
                    this.state = 1590;
                    this.match(sparkParser.T__2);
                    this.state = 1591;
                    localctx._identifier = this.identifier();
                    localctx.identifiers.push(localctx._identifier);
                    this.state = 1596;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1597;
                this.match(sparkParser.T__1);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function PivotValueContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_pivotValue;
    return this;
}
PivotValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PivotValueContext.prototype.constructor = PivotValueContext;
PivotValueContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
};
PivotValueContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};
PivotValueContext.prototype.AS = function () {
    return this.getToken(sparkParser.AS, 0);
};
PivotValueContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterPivotValue(this);
    }
};
PivotValueContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitPivotValue(this);
    }
};
PivotValueContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitPivotValue(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.PivotValueContext = PivotValueContext;
sparkParser.prototype.pivotValue = function () {
    var localctx = new PivotValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, sparkParser.RULE_pivotValue);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1601;
        this.expression();
        this.state = 1606;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << sparkParser.SELECT) | (1 << sparkParser.FROM) | (1 << sparkParser.ADD) | (1 << sparkParser.AS) | (1 << sparkParser.ALL) | (1 << sparkParser.ANY) | (1 << sparkParser.DISTINCT) | (1 << sparkParser.WHERE) | (1 << sparkParser.GROUP) | (1 << sparkParser.BY) | (1 << sparkParser.GROUPING) | (1 << sparkParser.SETS) | (1 << sparkParser.CUBE) | (1 << sparkParser.ROLLUP) | (1 << sparkParser.ORDER) | (1 << sparkParser.HAVING) | (1 << sparkParser.LIMIT) | (1 << sparkParser.AT) | (1 << sparkParser.OR) | (1 << sparkParser.AND) | (1 << sparkParser.IN))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (sparkParser.NOT - 32)) | (1 << (sparkParser.NO - 32)) | (1 << (sparkParser.EXISTS - 32)) | (1 << (sparkParser.BETWEEN - 32)) | (1 << (sparkParser.LIKE - 32)) | (1 << (sparkParser.RLIKE - 32)) | (1 << (sparkParser.IS - 32)) | (1 << (sparkParser.NULL - 32)) | (1 << (sparkParser.TRUE - 32)) | (1 << (sparkParser.FALSE - 32)) | (1 << (sparkParser.NULLS - 32)) | (1 << (sparkParser.ASC - 32)) | (1 << (sparkParser.DESC - 32)) | (1 << (sparkParser.FOR - 32)) | (1 << (sparkParser.INTERVAL - 32)) | (1 << (sparkParser.CASE - 32)) | (1 << (sparkParser.WHEN - 32)) | (1 << (sparkParser.THEN - 32)) | (1 << (sparkParser.ELSE - 32)) | (1 << (sparkParser.END - 32)) | (1 << (sparkParser.JOIN - 32)) | (1 << (sparkParser.CROSS - 32)) | (1 << (sparkParser.OUTER - 32)) | (1 << (sparkParser.INNER - 32)) | (1 << (sparkParser.LEFT - 32)) | (1 << (sparkParser.SEMI - 32)) | (1 << (sparkParser.RIGHT - 32)) | (1 << (sparkParser.FULL - 32)) | (1 << (sparkParser.NATURAL - 32)) | (1 << (sparkParser.ON - 32)) | (1 << (sparkParser.PIVOT - 32)) | (1 << (sparkParser.LATERAL - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (sparkParser.WINDOW - 64)) | (1 << (sparkParser.OVER - 64)) | (1 << (sparkParser.PARTITION - 64)) | (1 << (sparkParser.RANGE - 64)) | (1 << (sparkParser.ROWS - 64)) | (1 << (sparkParser.UNBOUNDED - 64)) | (1 << (sparkParser.PRECEDING - 64)) | (1 << (sparkParser.FOLLOWING - 64)) | (1 << (sparkParser.CURRENT - 64)) | (1 << (sparkParser.FIRST - 64)) | (1 << (sparkParser.AFTER - 64)) | (1 << (sparkParser.LAST - 64)) | (1 << (sparkParser.ROW - 64)) | (1 << (sparkParser.WITH - 64)) | (1 << (sparkParser.VALUES - 64)) | (1 << (sparkParser.CREATE - 64)) | (1 << (sparkParser.TABLE - 64)) | (1 << (sparkParser.DIRECTORY - 64)) | (1 << (sparkParser.VIEW - 64)) | (1 << (sparkParser.REPLACE - 64)) | (1 << (sparkParser.INSERT - 64)) | (1 << (sparkParser.DELETE - 64)) | (1 << (sparkParser.INTO - 64)) | (1 << (sparkParser.DESCRIBE - 64)) | (1 << (sparkParser.EXPLAIN - 64)) | (1 << (sparkParser.FORMAT - 64)) | (1 << (sparkParser.LOGICAL - 64)) | (1 << (sparkParser.CODEGEN - 64)) | (1 << (sparkParser.COST - 64)) | (1 << (sparkParser.CAST - 64)) | (1 << (sparkParser.SHOW - 64)) | (1 << (sparkParser.TABLES - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (sparkParser.COLUMNS - 96)) | (1 << (sparkParser.COLUMN - 96)) | (1 << (sparkParser.USE - 96)) | (1 << (sparkParser.PARTITIONS - 96)) | (1 << (sparkParser.FUNCTIONS - 96)) | (1 << (sparkParser.DROP - 96)) | (1 << (sparkParser.UNION - 96)) | (1 << (sparkParser.EXCEPT - 96)) | (1 << (sparkParser.SETMINUS - 96)) | (1 << (sparkParser.INTERSECT - 96)) | (1 << (sparkParser.TO - 96)) | (1 << (sparkParser.TABLESAMPLE - 96)) | (1 << (sparkParser.STRATIFY - 96)) | (1 << (sparkParser.ALTER - 96)) | (1 << (sparkParser.RENAME - 96)) | (1 << (sparkParser.ARRAY - 96)) | (1 << (sparkParser.MAP - 96)) | (1 << (sparkParser.STRUCT - 96)) | (1 << (sparkParser.COMMENT - 96)) | (1 << (sparkParser.SET - 96)) | (1 << (sparkParser.RESET - 96)) | (1 << (sparkParser.DATA - 96)) | (1 << (sparkParser.START - 96)) | (1 << (sparkParser.TRANSACTION - 96)) | (1 << (sparkParser.COMMIT - 96)) | (1 << (sparkParser.ROLLBACK - 96)) | (1 << (sparkParser.MACRO - 96)) | (1 << (sparkParser.IGNORE - 96)) | (1 << (sparkParser.BOTH - 96)) | (1 << (sparkParser.LEADING - 96)) | (1 << (sparkParser.TRAILING - 96)) | (1 << (sparkParser.IF - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (sparkParser.POSITION - 128)) | (1 << (sparkParser.EXTRACT - 128)) | (1 << (sparkParser.DIV - 128)) | (1 << (sparkParser.PERCENTLIT - 128)) | (1 << (sparkParser.BUCKET - 128)) | (1 << (sparkParser.OUT - 128)) | (1 << (sparkParser.OF - 128)) | (1 << (sparkParser.SORT - 128)) | (1 << (sparkParser.CLUSTER - 128)) | (1 << (sparkParser.DISTRIBUTE - 128)) | (1 << (sparkParser.OVERWRITE - 128)) | (1 << (sparkParser.TRANSFORM - 128)) | (1 << (sparkParser.REDUCE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (sparkParser.SERDE - 160)) | (1 << (sparkParser.SERDEPROPERTIES - 160)) | (1 << (sparkParser.RECORDREADER - 160)) | (1 << (sparkParser.RECORDWRITER - 160)) | (1 << (sparkParser.DELIMITED - 160)) | (1 << (sparkParser.FIELDS - 160)) | (1 << (sparkParser.TERMINATED - 160)) | (1 << (sparkParser.COLLECTION - 160)) | (1 << (sparkParser.ITEMS - 160)) | (1 << (sparkParser.KEYS - 160)) | (1 << (sparkParser.ESCAPED - 160)) | (1 << (sparkParser.LINES - 160)) | (1 << (sparkParser.SEPARATED - 160)) | (1 << (sparkParser.FUNCTION - 160)) | (1 << (sparkParser.EXTENDED - 160)) | (1 << (sparkParser.REFRESH - 160)) | (1 << (sparkParser.CLEAR - 160)) | (1 << (sparkParser.CACHE - 160)) | (1 << (sparkParser.UNCACHE - 160)) | (1 << (sparkParser.LAZY - 160)) | (1 << (sparkParser.FORMATTED - 160)) | (1 << (sparkParser.GLOBAL - 160)) | (1 << (sparkParser.TEMPORARY - 160)) | (1 << (sparkParser.OPTIONS - 160)) | (1 << (sparkParser.UNSET - 160)) | (1 << (sparkParser.TBLPROPERTIES - 160)) | (1 << (sparkParser.DBPROPERTIES - 160)) | (1 << (sparkParser.BUCKETS - 160)) | (1 << (sparkParser.SKEWED - 160)) | (1 << (sparkParser.STORED - 160)) | (1 << (sparkParser.DIRECTORIES - 160)) | (1 << (sparkParser.LOCATION - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (sparkParser.EXCHANGE - 192)) | (1 << (sparkParser.ARCHIVE - 192)) | (1 << (sparkParser.UNARCHIVE - 192)) | (1 << (sparkParser.FILEFORMAT - 192)) | (1 << (sparkParser.TOUCH - 192)) | (1 << (sparkParser.COMPACT - 192)) | (1 << (sparkParser.CONCATENATE - 192)) | (1 << (sparkParser.CHANGE - 192)) | (1 << (sparkParser.CASCADE - 192)) | (1 << (sparkParser.RESTRICT - 192)) | (1 << (sparkParser.CLUSTERED - 192)) | (1 << (sparkParser.SORTED - 192)) | (1 << (sparkParser.PURGE - 192)) | (1 << (sparkParser.INPUTFORMAT - 192)) | (1 << (sparkParser.OUTPUTFORMAT - 192)) | (1 << (sparkParser.DATABASE - 192)) | (1 << (sparkParser.DATABASES - 192)) | (1 << (sparkParser.DFS - 192)) | (1 << (sparkParser.TRUNCATE - 192)) | (1 << (sparkParser.ANALYZE - 192)) | (1 << (sparkParser.COMPUTE - 192)) | (1 << (sparkParser.LIST - 192)) | (1 << (sparkParser.STATISTICS - 192)) | (1 << (sparkParser.PARTITIONED - 192)) | (1 << (sparkParser.EXTERNAL - 192)) | (1 << (sparkParser.DEFINED - 192)) | (1 << (sparkParser.REVOKE - 192)) | (1 << (sparkParser.GRANT - 192)) | (1 << (sparkParser.LOCK - 192)) | (1 << (sparkParser.UNLOCK - 192)) | (1 << (sparkParser.MSCK - 192)) | (1 << (sparkParser.REPAIR - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (sparkParser.RECOVER - 224)) | (1 << (sparkParser.EXPORT - 224)) | (1 << (sparkParser.IMPORT - 224)) | (1 << (sparkParser.LOAD - 224)) | (1 << (sparkParser.ROLE - 224)) | (1 << (sparkParser.ROLES - 224)) | (1 << (sparkParser.COMPACTIONS - 224)) | (1 << (sparkParser.PRINCIPALS - 224)) | (1 << (sparkParser.TRANSACTIONS - 224)) | (1 << (sparkParser.INDEX - 224)) | (1 << (sparkParser.INDEXES - 224)) | (1 << (sparkParser.LOCKS - 224)) | (1 << (sparkParser.OPTION - 224)) | (1 << (sparkParser.ANTI - 224)) | (1 << (sparkParser.LOCAL - 224)) | (1 << (sparkParser.INPATH - 224)) | (1 << (sparkParser.IDENTIFIER - 224)) | (1 << (sparkParser.BACKQUOTED_IDENTIFIER - 224)))) !== 0)) {
            this.state = 1603;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 204, this._ctx);
            if (la_ === 1) {
                this.state = 1602;
                this.match(sparkParser.AS);
            }
            this.state = 1605;
            this.identifier();
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function LateralViewContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_lateralView;
    this.tblName = null; // IdentifierContext
    this._identifier = null; // IdentifierContext
    this.colName = []; // of IdentifierContexts
    return this;
}
LateralViewContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LateralViewContext.prototype.constructor = LateralViewContext;
LateralViewContext.prototype.LATERAL = function () {
    return this.getToken(sparkParser.LATERAL, 0);
};
LateralViewContext.prototype.VIEW = function () {
    return this.getToken(sparkParser.VIEW, 0);
};
LateralViewContext.prototype.qualifiedName = function () {
    return this.getTypedRuleContext(QualifiedNameContext, 0);
};
LateralViewContext.prototype.identifier = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(IdentifierContext);
    }
    else {
        return this.getTypedRuleContext(IdentifierContext, i);
    }
};
LateralViewContext.prototype.OUTER = function () {
    return this.getToken(sparkParser.OUTER, 0);
};
LateralViewContext.prototype.expression = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(ExpressionContext);
    }
    else {
        return this.getTypedRuleContext(ExpressionContext, i);
    }
};
LateralViewContext.prototype.AS = function () {
    return this.getToken(sparkParser.AS, 0);
};
LateralViewContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterLateralView(this);
    }
};
LateralViewContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitLateralView(this);
    }
};
LateralViewContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitLateralView(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.LateralViewContext = LateralViewContext;
sparkParser.prototype.lateralView = function () {
    var localctx = new LateralViewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, sparkParser.RULE_lateralView);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1608;
        this.match(sparkParser.LATERAL);
        this.state = 1609;
        this.match(sparkParser.VIEW);
        this.state = 1611;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 206, this._ctx);
        if (la_ === 1) {
            this.state = 1610;
            this.match(sparkParser.OUTER);
        }
        this.state = 1613;
        this.qualifiedName();
        this.state = 1614;
        this.match(sparkParser.T__0);
        this.state = 1623;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << sparkParser.T__0) | (1 << sparkParser.SELECT) | (1 << sparkParser.FROM) | (1 << sparkParser.ADD) | (1 << sparkParser.AS) | (1 << sparkParser.ALL) | (1 << sparkParser.ANY) | (1 << sparkParser.DISTINCT) | (1 << sparkParser.WHERE) | (1 << sparkParser.GROUP) | (1 << sparkParser.BY) | (1 << sparkParser.GROUPING) | (1 << sparkParser.SETS) | (1 << sparkParser.CUBE) | (1 << sparkParser.ROLLUP) | (1 << sparkParser.ORDER) | (1 << sparkParser.HAVING) | (1 << sparkParser.LIMIT) | (1 << sparkParser.AT) | (1 << sparkParser.OR) | (1 << sparkParser.AND) | (1 << sparkParser.IN))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (sparkParser.NOT - 32)) | (1 << (sparkParser.NO - 32)) | (1 << (sparkParser.EXISTS - 32)) | (1 << (sparkParser.BETWEEN - 32)) | (1 << (sparkParser.LIKE - 32)) | (1 << (sparkParser.RLIKE - 32)) | (1 << (sparkParser.IS - 32)) | (1 << (sparkParser.NULL - 32)) | (1 << (sparkParser.TRUE - 32)) | (1 << (sparkParser.FALSE - 32)) | (1 << (sparkParser.NULLS - 32)) | (1 << (sparkParser.ASC - 32)) | (1 << (sparkParser.DESC - 32)) | (1 << (sparkParser.FOR - 32)) | (1 << (sparkParser.INTERVAL - 32)) | (1 << (sparkParser.CASE - 32)) | (1 << (sparkParser.WHEN - 32)) | (1 << (sparkParser.THEN - 32)) | (1 << (sparkParser.ELSE - 32)) | (1 << (sparkParser.END - 32)) | (1 << (sparkParser.JOIN - 32)) | (1 << (sparkParser.CROSS - 32)) | (1 << (sparkParser.OUTER - 32)) | (1 << (sparkParser.INNER - 32)) | (1 << (sparkParser.LEFT - 32)) | (1 << (sparkParser.SEMI - 32)) | (1 << (sparkParser.RIGHT - 32)) | (1 << (sparkParser.FULL - 32)) | (1 << (sparkParser.NATURAL - 32)) | (1 << (sparkParser.ON - 32)) | (1 << (sparkParser.PIVOT - 32)) | (1 << (sparkParser.LATERAL - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (sparkParser.WINDOW - 64)) | (1 << (sparkParser.OVER - 64)) | (1 << (sparkParser.PARTITION - 64)) | (1 << (sparkParser.RANGE - 64)) | (1 << (sparkParser.ROWS - 64)) | (1 << (sparkParser.UNBOUNDED - 64)) | (1 << (sparkParser.PRECEDING - 64)) | (1 << (sparkParser.FOLLOWING - 64)) | (1 << (sparkParser.CURRENT - 64)) | (1 << (sparkParser.FIRST - 64)) | (1 << (sparkParser.AFTER - 64)) | (1 << (sparkParser.LAST - 64)) | (1 << (sparkParser.ROW - 64)) | (1 << (sparkParser.WITH - 64)) | (1 << (sparkParser.VALUES - 64)) | (1 << (sparkParser.CREATE - 64)) | (1 << (sparkParser.TABLE - 64)) | (1 << (sparkParser.DIRECTORY - 64)) | (1 << (sparkParser.VIEW - 64)) | (1 << (sparkParser.REPLACE - 64)) | (1 << (sparkParser.INSERT - 64)) | (1 << (sparkParser.DELETE - 64)) | (1 << (sparkParser.INTO - 64)) | (1 << (sparkParser.DESCRIBE - 64)) | (1 << (sparkParser.EXPLAIN - 64)) | (1 << (sparkParser.FORMAT - 64)) | (1 << (sparkParser.LOGICAL - 64)) | (1 << (sparkParser.CODEGEN - 64)) | (1 << (sparkParser.COST - 64)) | (1 << (sparkParser.CAST - 64)) | (1 << (sparkParser.SHOW - 64)) | (1 << (sparkParser.TABLES - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (sparkParser.COLUMNS - 96)) | (1 << (sparkParser.COLUMN - 96)) | (1 << (sparkParser.USE - 96)) | (1 << (sparkParser.PARTITIONS - 96)) | (1 << (sparkParser.FUNCTIONS - 96)) | (1 << (sparkParser.DROP - 96)) | (1 << (sparkParser.UNION - 96)) | (1 << (sparkParser.EXCEPT - 96)) | (1 << (sparkParser.SETMINUS - 96)) | (1 << (sparkParser.INTERSECT - 96)) | (1 << (sparkParser.TO - 96)) | (1 << (sparkParser.TABLESAMPLE - 96)) | (1 << (sparkParser.STRATIFY - 96)) | (1 << (sparkParser.ALTER - 96)) | (1 << (sparkParser.RENAME - 96)) | (1 << (sparkParser.ARRAY - 96)) | (1 << (sparkParser.MAP - 96)) | (1 << (sparkParser.STRUCT - 96)) | (1 << (sparkParser.COMMENT - 96)) | (1 << (sparkParser.SET - 96)) | (1 << (sparkParser.RESET - 96)) | (1 << (sparkParser.DATA - 96)) | (1 << (sparkParser.START - 96)) | (1 << (sparkParser.TRANSACTION - 96)) | (1 << (sparkParser.COMMIT - 96)) | (1 << (sparkParser.ROLLBACK - 96)) | (1 << (sparkParser.MACRO - 96)) | (1 << (sparkParser.IGNORE - 96)) | (1 << (sparkParser.BOTH - 96)) | (1 << (sparkParser.LEADING - 96)) | (1 << (sparkParser.TRAILING - 96)) | (1 << (sparkParser.IF - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (sparkParser.POSITION - 128)) | (1 << (sparkParser.EXTRACT - 128)) | (1 << (sparkParser.PLUS - 128)) | (1 << (sparkParser.MINUS - 128)) | (1 << (sparkParser.ASTERISK - 128)) | (1 << (sparkParser.DIV - 128)) | (1 << (sparkParser.TILDE - 128)) | (1 << (sparkParser.PERCENTLIT - 128)) | (1 << (sparkParser.BUCKET - 128)) | (1 << (sparkParser.OUT - 128)) | (1 << (sparkParser.OF - 128)) | (1 << (sparkParser.SORT - 128)) | (1 << (sparkParser.CLUSTER - 128)) | (1 << (sparkParser.DISTRIBUTE - 128)) | (1 << (sparkParser.OVERWRITE - 128)) | (1 << (sparkParser.TRANSFORM - 128)) | (1 << (sparkParser.REDUCE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (sparkParser.SERDE - 160)) | (1 << (sparkParser.SERDEPROPERTIES - 160)) | (1 << (sparkParser.RECORDREADER - 160)) | (1 << (sparkParser.RECORDWRITER - 160)) | (1 << (sparkParser.DELIMITED - 160)) | (1 << (sparkParser.FIELDS - 160)) | (1 << (sparkParser.TERMINATED - 160)) | (1 << (sparkParser.COLLECTION - 160)) | (1 << (sparkParser.ITEMS - 160)) | (1 << (sparkParser.KEYS - 160)) | (1 << (sparkParser.ESCAPED - 160)) | (1 << (sparkParser.LINES - 160)) | (1 << (sparkParser.SEPARATED - 160)) | (1 << (sparkParser.FUNCTION - 160)) | (1 << (sparkParser.EXTENDED - 160)) | (1 << (sparkParser.REFRESH - 160)) | (1 << (sparkParser.CLEAR - 160)) | (1 << (sparkParser.CACHE - 160)) | (1 << (sparkParser.UNCACHE - 160)) | (1 << (sparkParser.LAZY - 160)) | (1 << (sparkParser.FORMATTED - 160)) | (1 << (sparkParser.GLOBAL - 160)) | (1 << (sparkParser.TEMPORARY - 160)) | (1 << (sparkParser.OPTIONS - 160)) | (1 << (sparkParser.UNSET - 160)) | (1 << (sparkParser.TBLPROPERTIES - 160)) | (1 << (sparkParser.DBPROPERTIES - 160)) | (1 << (sparkParser.BUCKETS - 160)) | (1 << (sparkParser.SKEWED - 160)) | (1 << (sparkParser.STORED - 160)) | (1 << (sparkParser.DIRECTORIES - 160)) | (1 << (sparkParser.LOCATION - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (sparkParser.EXCHANGE - 192)) | (1 << (sparkParser.ARCHIVE - 192)) | (1 << (sparkParser.UNARCHIVE - 192)) | (1 << (sparkParser.FILEFORMAT - 192)) | (1 << (sparkParser.TOUCH - 192)) | (1 << (sparkParser.COMPACT - 192)) | (1 << (sparkParser.CONCATENATE - 192)) | (1 << (sparkParser.CHANGE - 192)) | (1 << (sparkParser.CASCADE - 192)) | (1 << (sparkParser.RESTRICT - 192)) | (1 << (sparkParser.CLUSTERED - 192)) | (1 << (sparkParser.SORTED - 192)) | (1 << (sparkParser.PURGE - 192)) | (1 << (sparkParser.INPUTFORMAT - 192)) | (1 << (sparkParser.OUTPUTFORMAT - 192)) | (1 << (sparkParser.DATABASE - 192)) | (1 << (sparkParser.DATABASES - 192)) | (1 << (sparkParser.DFS - 192)) | (1 << (sparkParser.TRUNCATE - 192)) | (1 << (sparkParser.ANALYZE - 192)) | (1 << (sparkParser.COMPUTE - 192)) | (1 << (sparkParser.LIST - 192)) | (1 << (sparkParser.STATISTICS - 192)) | (1 << (sparkParser.PARTITIONED - 192)) | (1 << (sparkParser.EXTERNAL - 192)) | (1 << (sparkParser.DEFINED - 192)) | (1 << (sparkParser.REVOKE - 192)) | (1 << (sparkParser.GRANT - 192)) | (1 << (sparkParser.LOCK - 192)) | (1 << (sparkParser.UNLOCK - 192)) | (1 << (sparkParser.MSCK - 192)) | (1 << (sparkParser.REPAIR - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (sparkParser.RECOVER - 224)) | (1 << (sparkParser.EXPORT - 224)) | (1 << (sparkParser.IMPORT - 224)) | (1 << (sparkParser.LOAD - 224)) | (1 << (sparkParser.ROLE - 224)) | (1 << (sparkParser.ROLES - 224)) | (1 << (sparkParser.COMPACTIONS - 224)) | (1 << (sparkParser.PRINCIPALS - 224)) | (1 << (sparkParser.TRANSACTIONS - 224)) | (1 << (sparkParser.INDEX - 224)) | (1 << (sparkParser.INDEXES - 224)) | (1 << (sparkParser.LOCKS - 224)) | (1 << (sparkParser.OPTION - 224)) | (1 << (sparkParser.ANTI - 224)) | (1 << (sparkParser.LOCAL - 224)) | (1 << (sparkParser.INPATH - 224)) | (1 << (sparkParser.STRING - 224)) | (1 << (sparkParser.BIGINT_LITERAL - 224)) | (1 << (sparkParser.SMALLINT_LITERAL - 224)) | (1 << (sparkParser.TINYINT_LITERAL - 224)) | (1 << (sparkParser.INTEGER_VALUE - 224)) | (1 << (sparkParser.DECIMAL_VALUE - 224)) | (1 << (sparkParser.DOUBLE_LITERAL - 224)) | (1 << (sparkParser.BIGDECIMAL_LITERAL - 224)) | (1 << (sparkParser.IDENTIFIER - 224)) | (1 << (sparkParser.BACKQUOTED_IDENTIFIER - 224)))) !== 0)) {
            this.state = 1615;
            this.expression();
            this.state = 1620;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === sparkParser.T__2) {
                this.state = 1616;
                this.match(sparkParser.T__2);
                this.state = 1617;
                this.expression();
                this.state = 1622;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        this.state = 1625;
        this.match(sparkParser.T__1);
        this.state = 1626;
        localctx.tblName = this.identifier();
        this.state = 1638;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 211, this._ctx);
        if (la_ === 1) {
            this.state = 1628;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 209, this._ctx);
            if (la_ === 1) {
                this.state = 1627;
                this.match(sparkParser.AS);
            }
            this.state = 1630;
            localctx._identifier = this.identifier();
            localctx.colName.push(localctx._identifier);
            this.state = 1635;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 210, this._ctx);
            while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1631;
                    this.match(sparkParser.T__2);
                    this.state = 1632;
                    localctx._identifier = this.identifier();
                    localctx.colName.push(localctx._identifier);
                }
                this.state = 1637;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 210, this._ctx);
            }
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function SetQuantifierContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_setQuantifier;
    return this;
}
SetQuantifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetQuantifierContext.prototype.constructor = SetQuantifierContext;
SetQuantifierContext.prototype.DISTINCT = function () {
    return this.getToken(sparkParser.DISTINCT, 0);
};
SetQuantifierContext.prototype.ALL = function () {
    return this.getToken(sparkParser.ALL, 0);
};
SetQuantifierContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterSetQuantifier(this);
    }
};
SetQuantifierContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitSetQuantifier(this);
    }
};
SetQuantifierContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitSetQuantifier(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.SetQuantifierContext = SetQuantifierContext;
sparkParser.prototype.setQuantifier = function () {
    var localctx = new SetQuantifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, sparkParser.RULE_setQuantifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1640;
        _la = this._input.LA(1);
        if (!(_la === sparkParser.ALL || _la === sparkParser.DISTINCT)) {
            this._errHandler.recoverInline(this);
        }
        else {
            this._errHandler.reportMatch(this);
            this.consume();
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function RelationContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_relation;
    return this;
}
RelationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationContext.prototype.constructor = RelationContext;
RelationContext.prototype.relationPrimary = function () {
    return this.getTypedRuleContext(RelationPrimaryContext, 0);
};
RelationContext.prototype.joinRelation = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(JoinRelationContext);
    }
    else {
        return this.getTypedRuleContext(JoinRelationContext, i);
    }
};
RelationContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterRelation(this);
    }
};
RelationContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitRelation(this);
    }
};
RelationContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitRelation(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.RelationContext = RelationContext;
sparkParser.prototype.relation = function () {
    var localctx = new RelationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, sparkParser.RULE_relation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1642;
        this.relationPrimary();
        this.state = 1646;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 212, this._ctx);
        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
                this.state = 1643;
                this.joinRelation();
            }
            this.state = 1648;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 212, this._ctx);
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function JoinRelationContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_joinRelation;
    this.right = null; // RelationPrimaryContext
    return this;
}
JoinRelationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinRelationContext.prototype.constructor = JoinRelationContext;
JoinRelationContext.prototype.JOIN = function () {
    return this.getToken(sparkParser.JOIN, 0);
};
JoinRelationContext.prototype.relationPrimary = function () {
    return this.getTypedRuleContext(RelationPrimaryContext, 0);
};
JoinRelationContext.prototype.joinType = function () {
    return this.getTypedRuleContext(JoinTypeContext, 0);
};
JoinRelationContext.prototype.joinCriteria = function () {
    return this.getTypedRuleContext(JoinCriteriaContext, 0);
};
JoinRelationContext.prototype.NATURAL = function () {
    return this.getToken(sparkParser.NATURAL, 0);
};
JoinRelationContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterJoinRelation(this);
    }
};
JoinRelationContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitJoinRelation(this);
    }
};
JoinRelationContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitJoinRelation(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.JoinRelationContext = JoinRelationContext;
sparkParser.prototype.joinRelation = function () {
    var localctx = new JoinRelationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, sparkParser.RULE_joinRelation);
    try {
        this.state = 1660;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
            case sparkParser.JOIN:
            case sparkParser.CROSS:
            case sparkParser.INNER:
            case sparkParser.LEFT:
            case sparkParser.RIGHT:
            case sparkParser.FULL:
            case sparkParser.ANTI:
                this.enterOuterAlt(localctx, 1);
                this.state = 1649;
                this.joinType();
                this.state = 1650;
                this.match(sparkParser.JOIN);
                this.state = 1651;
                localctx.right = this.relationPrimary();
                this.state = 1653;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 213, this._ctx);
                if (la_ === 1) {
                    this.state = 1652;
                    this.joinCriteria();
                }
                break;
            case sparkParser.NATURAL:
                this.enterOuterAlt(localctx, 2);
                this.state = 1655;
                this.match(sparkParser.NATURAL);
                this.state = 1656;
                this.joinType();
                this.state = 1657;
                this.match(sparkParser.JOIN);
                this.state = 1658;
                localctx.right = this.relationPrimary();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function JoinTypeContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_joinType;
    return this;
}
JoinTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinTypeContext.prototype.constructor = JoinTypeContext;
JoinTypeContext.prototype.INNER = function () {
    return this.getToken(sparkParser.INNER, 0);
};
JoinTypeContext.prototype.CROSS = function () {
    return this.getToken(sparkParser.CROSS, 0);
};
JoinTypeContext.prototype.LEFT = function () {
    return this.getToken(sparkParser.LEFT, 0);
};
JoinTypeContext.prototype.OUTER = function () {
    return this.getToken(sparkParser.OUTER, 0);
};
JoinTypeContext.prototype.SEMI = function () {
    return this.getToken(sparkParser.SEMI, 0);
};
JoinTypeContext.prototype.RIGHT = function () {
    return this.getToken(sparkParser.RIGHT, 0);
};
JoinTypeContext.prototype.FULL = function () {
    return this.getToken(sparkParser.FULL, 0);
};
JoinTypeContext.prototype.ANTI = function () {
    return this.getToken(sparkParser.ANTI, 0);
};
JoinTypeContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterJoinType(this);
    }
};
JoinTypeContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitJoinType(this);
    }
};
JoinTypeContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitJoinType(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.JoinTypeContext = JoinTypeContext;
sparkParser.prototype.joinType = function () {
    var localctx = new JoinTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, sparkParser.RULE_joinType);
    var _la = 0; // Token type
    try {
        this.state = 1684;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 220, this._ctx);
        switch (la_) {
            case 1:
                this.enterOuterAlt(localctx, 1);
                this.state = 1663;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.INNER) {
                    this.state = 1662;
                    this.match(sparkParser.INNER);
                }
                break;
            case 2:
                this.enterOuterAlt(localctx, 2);
                this.state = 1665;
                this.match(sparkParser.CROSS);
                break;
            case 3:
                this.enterOuterAlt(localctx, 3);
                this.state = 1666;
                this.match(sparkParser.LEFT);
                this.state = 1668;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.OUTER) {
                    this.state = 1667;
                    this.match(sparkParser.OUTER);
                }
                break;
            case 4:
                this.enterOuterAlt(localctx, 4);
                this.state = 1670;
                this.match(sparkParser.LEFT);
                this.state = 1671;
                this.match(sparkParser.SEMI);
                break;
            case 5:
                this.enterOuterAlt(localctx, 5);
                this.state = 1672;
                this.match(sparkParser.RIGHT);
                this.state = 1674;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.OUTER) {
                    this.state = 1673;
                    this.match(sparkParser.OUTER);
                }
                break;
            case 6:
                this.enterOuterAlt(localctx, 6);
                this.state = 1676;
                this.match(sparkParser.FULL);
                this.state = 1678;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.OUTER) {
                    this.state = 1677;
                    this.match(sparkParser.OUTER);
                }
                break;
            case 7:
                this.enterOuterAlt(localctx, 7);
                this.state = 1681;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.LEFT) {
                    this.state = 1680;
                    this.match(sparkParser.LEFT);
                }
                this.state = 1683;
                this.match(sparkParser.ANTI);
                break;
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function JoinCriteriaContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_joinCriteria;
    return this;
}
JoinCriteriaContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinCriteriaContext.prototype.constructor = JoinCriteriaContext;
JoinCriteriaContext.prototype.ON = function () {
    return this.getToken(sparkParser.ON, 0);
};
JoinCriteriaContext.prototype.booleanExpression = function () {
    return this.getTypedRuleContext(BooleanExpressionContext, 0);
};
JoinCriteriaContext.prototype.USING = function () {
    return this.getToken(sparkParser.USING, 0);
};
JoinCriteriaContext.prototype.identifierList = function () {
    return this.getTypedRuleContext(IdentifierListContext, 0);
};
JoinCriteriaContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterJoinCriteria(this);
    }
};
JoinCriteriaContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitJoinCriteria(this);
    }
};
JoinCriteriaContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitJoinCriteria(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.JoinCriteriaContext = JoinCriteriaContext;
sparkParser.prototype.joinCriteria = function () {
    var localctx = new JoinCriteriaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, sparkParser.RULE_joinCriteria);
    try {
        this.state = 1690;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
            case sparkParser.ON:
                this.enterOuterAlt(localctx, 1);
                this.state = 1686;
                this.match(sparkParser.ON);
                this.state = 1687;
                this.booleanExpression(0);
                break;
            case sparkParser.USING:
                this.enterOuterAlt(localctx, 2);
                this.state = 1688;
                this.match(sparkParser.USING);
                this.state = 1689;
                this.identifierList();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function SampleContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_sample;
    return this;
}
SampleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SampleContext.prototype.constructor = SampleContext;
SampleContext.prototype.TABLESAMPLE = function () {
    return this.getToken(sparkParser.TABLESAMPLE, 0);
};
SampleContext.prototype.sampleMethod = function () {
    return this.getTypedRuleContext(SampleMethodContext, 0);
};
SampleContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterSample(this);
    }
};
SampleContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitSample(this);
    }
};
SampleContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitSample(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.SampleContext = SampleContext;
sparkParser.prototype.sample = function () {
    var localctx = new SampleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, sparkParser.RULE_sample);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1692;
        this.match(sparkParser.TABLESAMPLE);
        this.state = 1693;
        this.match(sparkParser.T__0);
        this.state = 1695;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << sparkParser.T__0) | (1 << sparkParser.SELECT) | (1 << sparkParser.FROM) | (1 << sparkParser.ADD) | (1 << sparkParser.AS) | (1 << sparkParser.ALL) | (1 << sparkParser.ANY) | (1 << sparkParser.DISTINCT) | (1 << sparkParser.WHERE) | (1 << sparkParser.GROUP) | (1 << sparkParser.BY) | (1 << sparkParser.GROUPING) | (1 << sparkParser.SETS) | (1 << sparkParser.CUBE) | (1 << sparkParser.ROLLUP) | (1 << sparkParser.ORDER) | (1 << sparkParser.HAVING) | (1 << sparkParser.LIMIT) | (1 << sparkParser.AT) | (1 << sparkParser.OR) | (1 << sparkParser.AND) | (1 << sparkParser.IN))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (sparkParser.NOT - 32)) | (1 << (sparkParser.NO - 32)) | (1 << (sparkParser.EXISTS - 32)) | (1 << (sparkParser.BETWEEN - 32)) | (1 << (sparkParser.LIKE - 32)) | (1 << (sparkParser.RLIKE - 32)) | (1 << (sparkParser.IS - 32)) | (1 << (sparkParser.NULL - 32)) | (1 << (sparkParser.TRUE - 32)) | (1 << (sparkParser.FALSE - 32)) | (1 << (sparkParser.NULLS - 32)) | (1 << (sparkParser.ASC - 32)) | (1 << (sparkParser.DESC - 32)) | (1 << (sparkParser.FOR - 32)) | (1 << (sparkParser.INTERVAL - 32)) | (1 << (sparkParser.CASE - 32)) | (1 << (sparkParser.WHEN - 32)) | (1 << (sparkParser.THEN - 32)) | (1 << (sparkParser.ELSE - 32)) | (1 << (sparkParser.END - 32)) | (1 << (sparkParser.JOIN - 32)) | (1 << (sparkParser.CROSS - 32)) | (1 << (sparkParser.OUTER - 32)) | (1 << (sparkParser.INNER - 32)) | (1 << (sparkParser.LEFT - 32)) | (1 << (sparkParser.SEMI - 32)) | (1 << (sparkParser.RIGHT - 32)) | (1 << (sparkParser.FULL - 32)) | (1 << (sparkParser.NATURAL - 32)) | (1 << (sparkParser.ON - 32)) | (1 << (sparkParser.PIVOT - 32)) | (1 << (sparkParser.LATERAL - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (sparkParser.WINDOW - 64)) | (1 << (sparkParser.OVER - 64)) | (1 << (sparkParser.PARTITION - 64)) | (1 << (sparkParser.RANGE - 64)) | (1 << (sparkParser.ROWS - 64)) | (1 << (sparkParser.UNBOUNDED - 64)) | (1 << (sparkParser.PRECEDING - 64)) | (1 << (sparkParser.FOLLOWING - 64)) | (1 << (sparkParser.CURRENT - 64)) | (1 << (sparkParser.FIRST - 64)) | (1 << (sparkParser.AFTER - 64)) | (1 << (sparkParser.LAST - 64)) | (1 << (sparkParser.ROW - 64)) | (1 << (sparkParser.WITH - 64)) | (1 << (sparkParser.VALUES - 64)) | (1 << (sparkParser.CREATE - 64)) | (1 << (sparkParser.TABLE - 64)) | (1 << (sparkParser.DIRECTORY - 64)) | (1 << (sparkParser.VIEW - 64)) | (1 << (sparkParser.REPLACE - 64)) | (1 << (sparkParser.INSERT - 64)) | (1 << (sparkParser.DELETE - 64)) | (1 << (sparkParser.INTO - 64)) | (1 << (sparkParser.DESCRIBE - 64)) | (1 << (sparkParser.EXPLAIN - 64)) | (1 << (sparkParser.FORMAT - 64)) | (1 << (sparkParser.LOGICAL - 64)) | (1 << (sparkParser.CODEGEN - 64)) | (1 << (sparkParser.COST - 64)) | (1 << (sparkParser.CAST - 64)) | (1 << (sparkParser.SHOW - 64)) | (1 << (sparkParser.TABLES - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (sparkParser.COLUMNS - 96)) | (1 << (sparkParser.COLUMN - 96)) | (1 << (sparkParser.USE - 96)) | (1 << (sparkParser.PARTITIONS - 96)) | (1 << (sparkParser.FUNCTIONS - 96)) | (1 << (sparkParser.DROP - 96)) | (1 << (sparkParser.UNION - 96)) | (1 << (sparkParser.EXCEPT - 96)) | (1 << (sparkParser.SETMINUS - 96)) | (1 << (sparkParser.INTERSECT - 96)) | (1 << (sparkParser.TO - 96)) | (1 << (sparkParser.TABLESAMPLE - 96)) | (1 << (sparkParser.STRATIFY - 96)) | (1 << (sparkParser.ALTER - 96)) | (1 << (sparkParser.RENAME - 96)) | (1 << (sparkParser.ARRAY - 96)) | (1 << (sparkParser.MAP - 96)) | (1 << (sparkParser.STRUCT - 96)) | (1 << (sparkParser.COMMENT - 96)) | (1 << (sparkParser.SET - 96)) | (1 << (sparkParser.RESET - 96)) | (1 << (sparkParser.DATA - 96)) | (1 << (sparkParser.START - 96)) | (1 << (sparkParser.TRANSACTION - 96)) | (1 << (sparkParser.COMMIT - 96)) | (1 << (sparkParser.ROLLBACK - 96)) | (1 << (sparkParser.MACRO - 96)) | (1 << (sparkParser.IGNORE - 96)) | (1 << (sparkParser.BOTH - 96)) | (1 << (sparkParser.LEADING - 96)) | (1 << (sparkParser.TRAILING - 96)) | (1 << (sparkParser.IF - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (sparkParser.POSITION - 128)) | (1 << (sparkParser.EXTRACT - 128)) | (1 << (sparkParser.PLUS - 128)) | (1 << (sparkParser.MINUS - 128)) | (1 << (sparkParser.ASTERISK - 128)) | (1 << (sparkParser.DIV - 128)) | (1 << (sparkParser.TILDE - 128)) | (1 << (sparkParser.PERCENTLIT - 128)) | (1 << (sparkParser.BUCKET - 128)) | (1 << (sparkParser.OUT - 128)) | (1 << (sparkParser.OF - 128)) | (1 << (sparkParser.SORT - 128)) | (1 << (sparkParser.CLUSTER - 128)) | (1 << (sparkParser.DISTRIBUTE - 128)) | (1 << (sparkParser.OVERWRITE - 128)) | (1 << (sparkParser.TRANSFORM - 128)) | (1 << (sparkParser.REDUCE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (sparkParser.SERDE - 160)) | (1 << (sparkParser.SERDEPROPERTIES - 160)) | (1 << (sparkParser.RECORDREADER - 160)) | (1 << (sparkParser.RECORDWRITER - 160)) | (1 << (sparkParser.DELIMITED - 160)) | (1 << (sparkParser.FIELDS - 160)) | (1 << (sparkParser.TERMINATED - 160)) | (1 << (sparkParser.COLLECTION - 160)) | (1 << (sparkParser.ITEMS - 160)) | (1 << (sparkParser.KEYS - 160)) | (1 << (sparkParser.ESCAPED - 160)) | (1 << (sparkParser.LINES - 160)) | (1 << (sparkParser.SEPARATED - 160)) | (1 << (sparkParser.FUNCTION - 160)) | (1 << (sparkParser.EXTENDED - 160)) | (1 << (sparkParser.REFRESH - 160)) | (1 << (sparkParser.CLEAR - 160)) | (1 << (sparkParser.CACHE - 160)) | (1 << (sparkParser.UNCACHE - 160)) | (1 << (sparkParser.LAZY - 160)) | (1 << (sparkParser.FORMATTED - 160)) | (1 << (sparkParser.GLOBAL - 160)) | (1 << (sparkParser.TEMPORARY - 160)) | (1 << (sparkParser.OPTIONS - 160)) | (1 << (sparkParser.UNSET - 160)) | (1 << (sparkParser.TBLPROPERTIES - 160)) | (1 << (sparkParser.DBPROPERTIES - 160)) | (1 << (sparkParser.BUCKETS - 160)) | (1 << (sparkParser.SKEWED - 160)) | (1 << (sparkParser.STORED - 160)) | (1 << (sparkParser.DIRECTORIES - 160)) | (1 << (sparkParser.LOCATION - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (sparkParser.EXCHANGE - 192)) | (1 << (sparkParser.ARCHIVE - 192)) | (1 << (sparkParser.UNARCHIVE - 192)) | (1 << (sparkParser.FILEFORMAT - 192)) | (1 << (sparkParser.TOUCH - 192)) | (1 << (sparkParser.COMPACT - 192)) | (1 << (sparkParser.CONCATENATE - 192)) | (1 << (sparkParser.CHANGE - 192)) | (1 << (sparkParser.CASCADE - 192)) | (1 << (sparkParser.RESTRICT - 192)) | (1 << (sparkParser.CLUSTERED - 192)) | (1 << (sparkParser.SORTED - 192)) | (1 << (sparkParser.PURGE - 192)) | (1 << (sparkParser.INPUTFORMAT - 192)) | (1 << (sparkParser.OUTPUTFORMAT - 192)) | (1 << (sparkParser.DATABASE - 192)) | (1 << (sparkParser.DATABASES - 192)) | (1 << (sparkParser.DFS - 192)) | (1 << (sparkParser.TRUNCATE - 192)) | (1 << (sparkParser.ANALYZE - 192)) | (1 << (sparkParser.COMPUTE - 192)) | (1 << (sparkParser.LIST - 192)) | (1 << (sparkParser.STATISTICS - 192)) | (1 << (sparkParser.PARTITIONED - 192)) | (1 << (sparkParser.EXTERNAL - 192)) | (1 << (sparkParser.DEFINED - 192)) | (1 << (sparkParser.REVOKE - 192)) | (1 << (sparkParser.GRANT - 192)) | (1 << (sparkParser.LOCK - 192)) | (1 << (sparkParser.UNLOCK - 192)) | (1 << (sparkParser.MSCK - 192)) | (1 << (sparkParser.REPAIR - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (sparkParser.RECOVER - 224)) | (1 << (sparkParser.EXPORT - 224)) | (1 << (sparkParser.IMPORT - 224)) | (1 << (sparkParser.LOAD - 224)) | (1 << (sparkParser.ROLE - 224)) | (1 << (sparkParser.ROLES - 224)) | (1 << (sparkParser.COMPACTIONS - 224)) | (1 << (sparkParser.PRINCIPALS - 224)) | (1 << (sparkParser.TRANSACTIONS - 224)) | (1 << (sparkParser.INDEX - 224)) | (1 << (sparkParser.INDEXES - 224)) | (1 << (sparkParser.LOCKS - 224)) | (1 << (sparkParser.OPTION - 224)) | (1 << (sparkParser.ANTI - 224)) | (1 << (sparkParser.LOCAL - 224)) | (1 << (sparkParser.INPATH - 224)) | (1 << (sparkParser.STRING - 224)) | (1 << (sparkParser.BIGINT_LITERAL - 224)) | (1 << (sparkParser.SMALLINT_LITERAL - 224)) | (1 << (sparkParser.TINYINT_LITERAL - 224)) | (1 << (sparkParser.INTEGER_VALUE - 224)) | (1 << (sparkParser.DECIMAL_VALUE - 224)) | (1 << (sparkParser.DOUBLE_LITERAL - 224)) | (1 << (sparkParser.BIGDECIMAL_LITERAL - 224)) | (1 << (sparkParser.IDENTIFIER - 224)) | (1 << (sparkParser.BACKQUOTED_IDENTIFIER - 224)))) !== 0)) {
            this.state = 1694;
            this.sampleMethod();
        }
        this.state = 1697;
        this.match(sparkParser.T__1);
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function SampleMethodContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_sampleMethod;
    return this;
}
SampleMethodContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SampleMethodContext.prototype.constructor = SampleMethodContext;
SampleMethodContext.prototype.copyFrom = function (ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};
function SampleByRowsContext(parser, ctx) {
    SampleMethodContext.call(this, parser);
    SampleMethodContext.prototype.copyFrom.call(this, ctx);
    return this;
}
SampleByRowsContext.prototype = Object.create(SampleMethodContext.prototype);
SampleByRowsContext.prototype.constructor = SampleByRowsContext;
sparkParser.SampleByRowsContext = SampleByRowsContext;
SampleByRowsContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
};
SampleByRowsContext.prototype.ROWS = function () {
    return this.getToken(sparkParser.ROWS, 0);
};
SampleByRowsContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterSampleByRows(this);
    }
};
SampleByRowsContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitSampleByRows(this);
    }
};
SampleByRowsContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitSampleByRows(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function SampleByPercentileContext(parser, ctx) {
    SampleMethodContext.call(this, parser);
    this.negativeSign = null; // Token;
    this.percentage = null; // Token;
    SampleMethodContext.prototype.copyFrom.call(this, ctx);
    return this;
}
SampleByPercentileContext.prototype = Object.create(SampleMethodContext.prototype);
SampleByPercentileContext.prototype.constructor = SampleByPercentileContext;
sparkParser.SampleByPercentileContext = SampleByPercentileContext;
SampleByPercentileContext.prototype.PERCENTLIT = function () {
    return this.getToken(sparkParser.PERCENTLIT, 0);
};
SampleByPercentileContext.prototype.INTEGER_VALUE = function () {
    return this.getToken(sparkParser.INTEGER_VALUE, 0);
};
SampleByPercentileContext.prototype.DECIMAL_VALUE = function () {
    return this.getToken(sparkParser.DECIMAL_VALUE, 0);
};
SampleByPercentileContext.prototype.MINUS = function () {
    return this.getToken(sparkParser.MINUS, 0);
};
SampleByPercentileContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterSampleByPercentile(this);
    }
};
SampleByPercentileContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitSampleByPercentile(this);
    }
};
SampleByPercentileContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitSampleByPercentile(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function SampleByBucketContext(parser, ctx) {
    SampleMethodContext.call(this, parser);
    this.sampleType = null; // Token;
    this.numerator = null; // Token;
    this.denominator = null; // Token;
    SampleMethodContext.prototype.copyFrom.call(this, ctx);
    return this;
}
SampleByBucketContext.prototype = Object.create(SampleMethodContext.prototype);
SampleByBucketContext.prototype.constructor = SampleByBucketContext;
sparkParser.SampleByBucketContext = SampleByBucketContext;
SampleByBucketContext.prototype.OUT = function () {
    return this.getToken(sparkParser.OUT, 0);
};
SampleByBucketContext.prototype.OF = function () {
    return this.getToken(sparkParser.OF, 0);
};
SampleByBucketContext.prototype.BUCKET = function () {
    return this.getToken(sparkParser.BUCKET, 0);
};
SampleByBucketContext.prototype.INTEGER_VALUE = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(sparkParser.INTEGER_VALUE);
    }
    else {
        return this.getToken(sparkParser.INTEGER_VALUE, i);
    }
};
SampleByBucketContext.prototype.ON = function () {
    return this.getToken(sparkParser.ON, 0);
};
SampleByBucketContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};
SampleByBucketContext.prototype.qualifiedName = function () {
    return this.getTypedRuleContext(QualifiedNameContext, 0);
};
SampleByBucketContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterSampleByBucket(this);
    }
};
SampleByBucketContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitSampleByBucket(this);
    }
};
SampleByBucketContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitSampleByBucket(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function SampleByBytesContext(parser, ctx) {
    SampleMethodContext.call(this, parser);
    this.bytes = null; // ExpressionContext;
    SampleMethodContext.prototype.copyFrom.call(this, ctx);
    return this;
}
SampleByBytesContext.prototype = Object.create(SampleMethodContext.prototype);
SampleByBytesContext.prototype.constructor = SampleByBytesContext;
sparkParser.SampleByBytesContext = SampleByBytesContext;
SampleByBytesContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
};
SampleByBytesContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterSampleByBytes(this);
    }
};
SampleByBytesContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitSampleByBytes(this);
    }
};
SampleByBytesContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitSampleByBytes(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.SampleMethodContext = SampleMethodContext;
sparkParser.prototype.sampleMethod = function () {
    var localctx = new SampleMethodContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, sparkParser.RULE_sampleMethod);
    var _la = 0; // Token type
    try {
        this.state = 1723;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 226, this._ctx);
        switch (la_) {
            case 1:
                localctx = new SampleByPercentileContext(this, localctx);
                this.enterOuterAlt(localctx, 1);
                this.state = 1700;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.MINUS) {
                    this.state = 1699;
                    localctx.negativeSign = this.match(sparkParser.MINUS);
                }
                this.state = 1702;
                localctx.percentage = this._input.LT(1);
                _la = this._input.LA(1);
                if (!(_la === sparkParser.INTEGER_VALUE || _la === sparkParser.DECIMAL_VALUE)) {
                    localctx.percentage = this._errHandler.recoverInline(this);
                }
                else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1703;
                this.match(sparkParser.PERCENTLIT);
                break;
            case 2:
                localctx = new SampleByRowsContext(this, localctx);
                this.enterOuterAlt(localctx, 2);
                this.state = 1704;
                this.expression();
                this.state = 1705;
                this.match(sparkParser.ROWS);
                break;
            case 3:
                localctx = new SampleByBucketContext(this, localctx);
                this.enterOuterAlt(localctx, 3);
                this.state = 1707;
                localctx.sampleType = this.match(sparkParser.BUCKET);
                this.state = 1708;
                localctx.numerator = this.match(sparkParser.INTEGER_VALUE);
                this.state = 1709;
                this.match(sparkParser.OUT);
                this.state = 1710;
                this.match(sparkParser.OF);
                this.state = 1711;
                localctx.denominator = this.match(sparkParser.INTEGER_VALUE);
                this.state = 1720;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.ON) {
                    this.state = 1712;
                    this.match(sparkParser.ON);
                    this.state = 1718;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 224, this._ctx);
                    switch (la_) {
                        case 1:
                            this.state = 1713;
                            this.identifier();
                            break;
                        case 2:
                            this.state = 1714;
                            this.qualifiedName();
                            this.state = 1715;
                            this.match(sparkParser.T__0);
                            this.state = 1716;
                            this.match(sparkParser.T__1);
                            break;
                    }
                }
                break;
            case 4:
                localctx = new SampleByBytesContext(this, localctx);
                this.enterOuterAlt(localctx, 4);
                this.state = 1722;
                localctx.bytes = this.expression();
                break;
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function IdentifierListContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_identifierList;
    return this;
}
IdentifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierListContext.prototype.constructor = IdentifierListContext;
IdentifierListContext.prototype.identifierSeq = function () {
    return this.getTypedRuleContext(IdentifierSeqContext, 0);
};
IdentifierListContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterIdentifierList(this);
    }
};
IdentifierListContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitIdentifierList(this);
    }
};
IdentifierListContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitIdentifierList(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.IdentifierListContext = IdentifierListContext;
sparkParser.prototype.identifierList = function () {
    var localctx = new IdentifierListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, sparkParser.RULE_identifierList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1725;
        this.match(sparkParser.T__0);
        this.state = 1726;
        this.identifierSeq();
        this.state = 1727;
        this.match(sparkParser.T__1);
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function IdentifierSeqContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_identifierSeq;
    return this;
}
IdentifierSeqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierSeqContext.prototype.constructor = IdentifierSeqContext;
IdentifierSeqContext.prototype.identifier = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(IdentifierContext);
    }
    else {
        return this.getTypedRuleContext(IdentifierContext, i);
    }
};
IdentifierSeqContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterIdentifierSeq(this);
    }
};
IdentifierSeqContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitIdentifierSeq(this);
    }
};
IdentifierSeqContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitIdentifierSeq(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.IdentifierSeqContext = IdentifierSeqContext;
sparkParser.prototype.identifierSeq = function () {
    var localctx = new IdentifierSeqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, sparkParser.RULE_identifierSeq);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1729;
        this.identifier();
        this.state = 1734;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 227, this._ctx);
        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
                this.state = 1730;
                this.match(sparkParser.T__2);
                this.state = 1731;
                this.identifier();
            }
            this.state = 1736;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 227, this._ctx);
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function OrderedIdentifierListContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_orderedIdentifierList;
    return this;
}
OrderedIdentifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderedIdentifierListContext.prototype.constructor = OrderedIdentifierListContext;
OrderedIdentifierListContext.prototype.orderedIdentifier = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(OrderedIdentifierContext);
    }
    else {
        return this.getTypedRuleContext(OrderedIdentifierContext, i);
    }
};
OrderedIdentifierListContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterOrderedIdentifierList(this);
    }
};
OrderedIdentifierListContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitOrderedIdentifierList(this);
    }
};
OrderedIdentifierListContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitOrderedIdentifierList(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.OrderedIdentifierListContext = OrderedIdentifierListContext;
sparkParser.prototype.orderedIdentifierList = function () {
    var localctx = new OrderedIdentifierListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, sparkParser.RULE_orderedIdentifierList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1737;
        this.match(sparkParser.T__0);
        this.state = 1738;
        this.orderedIdentifier();
        this.state = 1743;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === sparkParser.T__2) {
            this.state = 1739;
            this.match(sparkParser.T__2);
            this.state = 1740;
            this.orderedIdentifier();
            this.state = 1745;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1746;
        this.match(sparkParser.T__1);
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function OrderedIdentifierContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_orderedIdentifier;
    this.ordering = null; // Token
    return this;
}
OrderedIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderedIdentifierContext.prototype.constructor = OrderedIdentifierContext;
OrderedIdentifierContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};
OrderedIdentifierContext.prototype.ASC = function () {
    return this.getToken(sparkParser.ASC, 0);
};
OrderedIdentifierContext.prototype.DESC = function () {
    return this.getToken(sparkParser.DESC, 0);
};
OrderedIdentifierContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterOrderedIdentifier(this);
    }
};
OrderedIdentifierContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitOrderedIdentifier(this);
    }
};
OrderedIdentifierContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitOrderedIdentifier(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.OrderedIdentifierContext = OrderedIdentifierContext;
sparkParser.prototype.orderedIdentifier = function () {
    var localctx = new OrderedIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, sparkParser.RULE_orderedIdentifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1748;
        this.identifier();
        this.state = 1750;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === sparkParser.ASC || _la === sparkParser.DESC) {
            this.state = 1749;
            localctx.ordering = this._input.LT(1);
            _la = this._input.LA(1);
            if (!(_la === sparkParser.ASC || _la === sparkParser.DESC)) {
                localctx.ordering = this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function IdentifierCommentListContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_identifierCommentList;
    return this;
}
IdentifierCommentListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierCommentListContext.prototype.constructor = IdentifierCommentListContext;
IdentifierCommentListContext.prototype.identifierComment = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(IdentifierCommentContext);
    }
    else {
        return this.getTypedRuleContext(IdentifierCommentContext, i);
    }
};
IdentifierCommentListContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterIdentifierCommentList(this);
    }
};
IdentifierCommentListContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitIdentifierCommentList(this);
    }
};
IdentifierCommentListContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitIdentifierCommentList(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.IdentifierCommentListContext = IdentifierCommentListContext;
sparkParser.prototype.identifierCommentList = function () {
    var localctx = new IdentifierCommentListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, sparkParser.RULE_identifierCommentList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1752;
        this.match(sparkParser.T__0);
        this.state = 1753;
        this.identifierComment();
        this.state = 1758;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === sparkParser.T__2) {
            this.state = 1754;
            this.match(sparkParser.T__2);
            this.state = 1755;
            this.identifierComment();
            this.state = 1760;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1761;
        this.match(sparkParser.T__1);
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function IdentifierCommentContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_identifierComment;
    return this;
}
IdentifierCommentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierCommentContext.prototype.constructor = IdentifierCommentContext;
IdentifierCommentContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};
IdentifierCommentContext.prototype.COMMENT = function () {
    return this.getToken(sparkParser.COMMENT, 0);
};
IdentifierCommentContext.prototype.STRING = function () {
    return this.getToken(sparkParser.STRING, 0);
};
IdentifierCommentContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterIdentifierComment(this);
    }
};
IdentifierCommentContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitIdentifierComment(this);
    }
};
IdentifierCommentContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitIdentifierComment(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.IdentifierCommentContext = IdentifierCommentContext;
sparkParser.prototype.identifierComment = function () {
    var localctx = new IdentifierCommentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, sparkParser.RULE_identifierComment);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1763;
        this.identifier();
        this.state = 1766;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === sparkParser.COMMENT) {
            this.state = 1764;
            this.match(sparkParser.COMMENT);
            this.state = 1765;
            this.match(sparkParser.STRING);
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function RelationPrimaryContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_relationPrimary;
    return this;
}
RelationPrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationPrimaryContext.prototype.constructor = RelationPrimaryContext;
RelationPrimaryContext.prototype.copyFrom = function (ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};
function TableValuedFunctionContext(parser, ctx) {
    RelationPrimaryContext.call(this, parser);
    RelationPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}
TableValuedFunctionContext.prototype = Object.create(RelationPrimaryContext.prototype);
TableValuedFunctionContext.prototype.constructor = TableValuedFunctionContext;
sparkParser.TableValuedFunctionContext = TableValuedFunctionContext;
TableValuedFunctionContext.prototype.functionTable = function () {
    return this.getTypedRuleContext(FunctionTableContext, 0);
};
TableValuedFunctionContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterTableValuedFunction(this);
    }
};
TableValuedFunctionContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitTableValuedFunction(this);
    }
};
TableValuedFunctionContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitTableValuedFunction(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function InlineTableDefault2Context(parser, ctx) {
    RelationPrimaryContext.call(this, parser);
    RelationPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}
InlineTableDefault2Context.prototype = Object.create(RelationPrimaryContext.prototype);
InlineTableDefault2Context.prototype.constructor = InlineTableDefault2Context;
sparkParser.InlineTableDefault2Context = InlineTableDefault2Context;
InlineTableDefault2Context.prototype.inlineTable = function () {
    return this.getTypedRuleContext(InlineTableContext, 0);
};
InlineTableDefault2Context.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterInlineTableDefault2(this);
    }
};
InlineTableDefault2Context.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitInlineTableDefault2(this);
    }
};
InlineTableDefault2Context.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitInlineTableDefault2(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function AliasedRelationContext(parser, ctx) {
    RelationPrimaryContext.call(this, parser);
    RelationPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}
AliasedRelationContext.prototype = Object.create(RelationPrimaryContext.prototype);
AliasedRelationContext.prototype.constructor = AliasedRelationContext;
sparkParser.AliasedRelationContext = AliasedRelationContext;
AliasedRelationContext.prototype.relation = function () {
    return this.getTypedRuleContext(RelationContext, 0);
};
AliasedRelationContext.prototype.tableAlias = function () {
    return this.getTypedRuleContext(TableAliasContext, 0);
};
AliasedRelationContext.prototype.sample = function () {
    return this.getTypedRuleContext(SampleContext, 0);
};
AliasedRelationContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterAliasedRelation(this);
    }
};
AliasedRelationContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitAliasedRelation(this);
    }
};
AliasedRelationContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitAliasedRelation(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function AliasedQueryContext(parser, ctx) {
    RelationPrimaryContext.call(this, parser);
    RelationPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}
AliasedQueryContext.prototype = Object.create(RelationPrimaryContext.prototype);
AliasedQueryContext.prototype.constructor = AliasedQueryContext;
sparkParser.AliasedQueryContext = AliasedQueryContext;
AliasedQueryContext.prototype.queryNoWith = function () {
    return this.getTypedRuleContext(QueryNoWithContext, 0);
};
AliasedQueryContext.prototype.tableAlias = function () {
    return this.getTypedRuleContext(TableAliasContext, 0);
};
AliasedQueryContext.prototype.sample = function () {
    return this.getTypedRuleContext(SampleContext, 0);
};
AliasedQueryContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterAliasedQuery(this);
    }
};
AliasedQueryContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitAliasedQuery(this);
    }
};
AliasedQueryContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitAliasedQuery(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function TableNameContext(parser, ctx) {
    RelationPrimaryContext.call(this, parser);
    RelationPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}
TableNameContext.prototype = Object.create(RelationPrimaryContext.prototype);
TableNameContext.prototype.constructor = TableNameContext;
sparkParser.TableNameContext = TableNameContext;
TableNameContext.prototype.tableIdentifier = function () {
    return this.getTypedRuleContext(TableIdentifierContext, 0);
};
TableNameContext.prototype.tableAlias = function () {
    return this.getTypedRuleContext(TableAliasContext, 0);
};
TableNameContext.prototype.sample = function () {
    return this.getTypedRuleContext(SampleContext, 0);
};
TableNameContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterTableName(this);
    }
};
TableNameContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitTableName(this);
    }
};
TableNameContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitTableName(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.RelationPrimaryContext = RelationPrimaryContext;
sparkParser.prototype.relationPrimary = function () {
    var localctx = new RelationPrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, sparkParser.RULE_relationPrimary);
    try {
        this.state = 1792;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 235, this._ctx);
        switch (la_) {
            case 1:
                localctx = new TableNameContext(this, localctx);
                this.enterOuterAlt(localctx, 1);
                this.state = 1768;
                this.tableIdentifier();
                this.state = 1770;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 232, this._ctx);
                if (la_ === 1) {
                    this.state = 1769;
                    this.sample();
                }
                this.state = 1772;
                this.tableAlias();
                break;
            case 2:
                localctx = new AliasedQueryContext(this, localctx);
                this.enterOuterAlt(localctx, 2);
                this.state = 1774;
                this.match(sparkParser.T__0);
                this.state = 1775;
                this.queryNoWith();
                this.state = 1776;
                this.match(sparkParser.T__1);
                this.state = 1778;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 233, this._ctx);
                if (la_ === 1) {
                    this.state = 1777;
                    this.sample();
                }
                this.state = 1780;
                this.tableAlias();
                break;
            case 3:
                localctx = new AliasedRelationContext(this, localctx);
                this.enterOuterAlt(localctx, 3);
                this.state = 1782;
                this.match(sparkParser.T__0);
                this.state = 1783;
                this.relation();
                this.state = 1784;
                this.match(sparkParser.T__1);
                this.state = 1786;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 234, this._ctx);
                if (la_ === 1) {
                    this.state = 1785;
                    this.sample();
                }
                this.state = 1788;
                this.tableAlias();
                break;
            case 4:
                localctx = new InlineTableDefault2Context(this, localctx);
                this.enterOuterAlt(localctx, 4);
                this.state = 1790;
                this.inlineTable();
                break;
            case 5:
                localctx = new TableValuedFunctionContext(this, localctx);
                this.enterOuterAlt(localctx, 5);
                this.state = 1791;
                this.functionTable();
                break;
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function InlineTableContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_inlineTable;
    return this;
}
InlineTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InlineTableContext.prototype.constructor = InlineTableContext;
InlineTableContext.prototype.VALUES = function () {
    return this.getToken(sparkParser.VALUES, 0);
};
InlineTableContext.prototype.expression = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(ExpressionContext);
    }
    else {
        return this.getTypedRuleContext(ExpressionContext, i);
    }
};
InlineTableContext.prototype.tableAlias = function () {
    return this.getTypedRuleContext(TableAliasContext, 0);
};
InlineTableContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterInlineTable(this);
    }
};
InlineTableContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitInlineTable(this);
    }
};
InlineTableContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitInlineTable(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.InlineTableContext = InlineTableContext;
sparkParser.prototype.inlineTable = function () {
    var localctx = new InlineTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, sparkParser.RULE_inlineTable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1794;
        this.match(sparkParser.VALUES);
        this.state = 1795;
        this.expression();
        this.state = 1800;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 236, this._ctx);
        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
                this.state = 1796;
                this.match(sparkParser.T__2);
                this.state = 1797;
                this.expression();
            }
            this.state = 1802;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 236, this._ctx);
        }
        this.state = 1803;
        this.tableAlias();
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function FunctionTableContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_functionTable;
    return this;
}
FunctionTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionTableContext.prototype.constructor = FunctionTableContext;
FunctionTableContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};
FunctionTableContext.prototype.tableAlias = function () {
    return this.getTypedRuleContext(TableAliasContext, 0);
};
FunctionTableContext.prototype.expression = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(ExpressionContext);
    }
    else {
        return this.getTypedRuleContext(ExpressionContext, i);
    }
};
FunctionTableContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterFunctionTable(this);
    }
};
FunctionTableContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitFunctionTable(this);
    }
};
FunctionTableContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitFunctionTable(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.FunctionTableContext = FunctionTableContext;
sparkParser.prototype.functionTable = function () {
    var localctx = new FunctionTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, sparkParser.RULE_functionTable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1805;
        this.identifier();
        this.state = 1806;
        this.match(sparkParser.T__0);
        this.state = 1815;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << sparkParser.T__0) | (1 << sparkParser.SELECT) | (1 << sparkParser.FROM) | (1 << sparkParser.ADD) | (1 << sparkParser.AS) | (1 << sparkParser.ALL) | (1 << sparkParser.ANY) | (1 << sparkParser.DISTINCT) | (1 << sparkParser.WHERE) | (1 << sparkParser.GROUP) | (1 << sparkParser.BY) | (1 << sparkParser.GROUPING) | (1 << sparkParser.SETS) | (1 << sparkParser.CUBE) | (1 << sparkParser.ROLLUP) | (1 << sparkParser.ORDER) | (1 << sparkParser.HAVING) | (1 << sparkParser.LIMIT) | (1 << sparkParser.AT) | (1 << sparkParser.OR) | (1 << sparkParser.AND) | (1 << sparkParser.IN))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (sparkParser.NOT - 32)) | (1 << (sparkParser.NO - 32)) | (1 << (sparkParser.EXISTS - 32)) | (1 << (sparkParser.BETWEEN - 32)) | (1 << (sparkParser.LIKE - 32)) | (1 << (sparkParser.RLIKE - 32)) | (1 << (sparkParser.IS - 32)) | (1 << (sparkParser.NULL - 32)) | (1 << (sparkParser.TRUE - 32)) | (1 << (sparkParser.FALSE - 32)) | (1 << (sparkParser.NULLS - 32)) | (1 << (sparkParser.ASC - 32)) | (1 << (sparkParser.DESC - 32)) | (1 << (sparkParser.FOR - 32)) | (1 << (sparkParser.INTERVAL - 32)) | (1 << (sparkParser.CASE - 32)) | (1 << (sparkParser.WHEN - 32)) | (1 << (sparkParser.THEN - 32)) | (1 << (sparkParser.ELSE - 32)) | (1 << (sparkParser.END - 32)) | (1 << (sparkParser.JOIN - 32)) | (1 << (sparkParser.CROSS - 32)) | (1 << (sparkParser.OUTER - 32)) | (1 << (sparkParser.INNER - 32)) | (1 << (sparkParser.LEFT - 32)) | (1 << (sparkParser.SEMI - 32)) | (1 << (sparkParser.RIGHT - 32)) | (1 << (sparkParser.FULL - 32)) | (1 << (sparkParser.NATURAL - 32)) | (1 << (sparkParser.ON - 32)) | (1 << (sparkParser.PIVOT - 32)) | (1 << (sparkParser.LATERAL - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (sparkParser.WINDOW - 64)) | (1 << (sparkParser.OVER - 64)) | (1 << (sparkParser.PARTITION - 64)) | (1 << (sparkParser.RANGE - 64)) | (1 << (sparkParser.ROWS - 64)) | (1 << (sparkParser.UNBOUNDED - 64)) | (1 << (sparkParser.PRECEDING - 64)) | (1 << (sparkParser.FOLLOWING - 64)) | (1 << (sparkParser.CURRENT - 64)) | (1 << (sparkParser.FIRST - 64)) | (1 << (sparkParser.AFTER - 64)) | (1 << (sparkParser.LAST - 64)) | (1 << (sparkParser.ROW - 64)) | (1 << (sparkParser.WITH - 64)) | (1 << (sparkParser.VALUES - 64)) | (1 << (sparkParser.CREATE - 64)) | (1 << (sparkParser.TABLE - 64)) | (1 << (sparkParser.DIRECTORY - 64)) | (1 << (sparkParser.VIEW - 64)) | (1 << (sparkParser.REPLACE - 64)) | (1 << (sparkParser.INSERT - 64)) | (1 << (sparkParser.DELETE - 64)) | (1 << (sparkParser.INTO - 64)) | (1 << (sparkParser.DESCRIBE - 64)) | (1 << (sparkParser.EXPLAIN - 64)) | (1 << (sparkParser.FORMAT - 64)) | (1 << (sparkParser.LOGICAL - 64)) | (1 << (sparkParser.CODEGEN - 64)) | (1 << (sparkParser.COST - 64)) | (1 << (sparkParser.CAST - 64)) | (1 << (sparkParser.SHOW - 64)) | (1 << (sparkParser.TABLES - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (sparkParser.COLUMNS - 96)) | (1 << (sparkParser.COLUMN - 96)) | (1 << (sparkParser.USE - 96)) | (1 << (sparkParser.PARTITIONS - 96)) | (1 << (sparkParser.FUNCTIONS - 96)) | (1 << (sparkParser.DROP - 96)) | (1 << (sparkParser.UNION - 96)) | (1 << (sparkParser.EXCEPT - 96)) | (1 << (sparkParser.SETMINUS - 96)) | (1 << (sparkParser.INTERSECT - 96)) | (1 << (sparkParser.TO - 96)) | (1 << (sparkParser.TABLESAMPLE - 96)) | (1 << (sparkParser.STRATIFY - 96)) | (1 << (sparkParser.ALTER - 96)) | (1 << (sparkParser.RENAME - 96)) | (1 << (sparkParser.ARRAY - 96)) | (1 << (sparkParser.MAP - 96)) | (1 << (sparkParser.STRUCT - 96)) | (1 << (sparkParser.COMMENT - 96)) | (1 << (sparkParser.SET - 96)) | (1 << (sparkParser.RESET - 96)) | (1 << (sparkParser.DATA - 96)) | (1 << (sparkParser.START - 96)) | (1 << (sparkParser.TRANSACTION - 96)) | (1 << (sparkParser.COMMIT - 96)) | (1 << (sparkParser.ROLLBACK - 96)) | (1 << (sparkParser.MACRO - 96)) | (1 << (sparkParser.IGNORE - 96)) | (1 << (sparkParser.BOTH - 96)) | (1 << (sparkParser.LEADING - 96)) | (1 << (sparkParser.TRAILING - 96)) | (1 << (sparkParser.IF - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (sparkParser.POSITION - 128)) | (1 << (sparkParser.EXTRACT - 128)) | (1 << (sparkParser.PLUS - 128)) | (1 << (sparkParser.MINUS - 128)) | (1 << (sparkParser.ASTERISK - 128)) | (1 << (sparkParser.DIV - 128)) | (1 << (sparkParser.TILDE - 128)) | (1 << (sparkParser.PERCENTLIT - 128)) | (1 << (sparkParser.BUCKET - 128)) | (1 << (sparkParser.OUT - 128)) | (1 << (sparkParser.OF - 128)) | (1 << (sparkParser.SORT - 128)) | (1 << (sparkParser.CLUSTER - 128)) | (1 << (sparkParser.DISTRIBUTE - 128)) | (1 << (sparkParser.OVERWRITE - 128)) | (1 << (sparkParser.TRANSFORM - 128)) | (1 << (sparkParser.REDUCE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (sparkParser.SERDE - 160)) | (1 << (sparkParser.SERDEPROPERTIES - 160)) | (1 << (sparkParser.RECORDREADER - 160)) | (1 << (sparkParser.RECORDWRITER - 160)) | (1 << (sparkParser.DELIMITED - 160)) | (1 << (sparkParser.FIELDS - 160)) | (1 << (sparkParser.TERMINATED - 160)) | (1 << (sparkParser.COLLECTION - 160)) | (1 << (sparkParser.ITEMS - 160)) | (1 << (sparkParser.KEYS - 160)) | (1 << (sparkParser.ESCAPED - 160)) | (1 << (sparkParser.LINES - 160)) | (1 << (sparkParser.SEPARATED - 160)) | (1 << (sparkParser.FUNCTION - 160)) | (1 << (sparkParser.EXTENDED - 160)) | (1 << (sparkParser.REFRESH - 160)) | (1 << (sparkParser.CLEAR - 160)) | (1 << (sparkParser.CACHE - 160)) | (1 << (sparkParser.UNCACHE - 160)) | (1 << (sparkParser.LAZY - 160)) | (1 << (sparkParser.FORMATTED - 160)) | (1 << (sparkParser.GLOBAL - 160)) | (1 << (sparkParser.TEMPORARY - 160)) | (1 << (sparkParser.OPTIONS - 160)) | (1 << (sparkParser.UNSET - 160)) | (1 << (sparkParser.TBLPROPERTIES - 160)) | (1 << (sparkParser.DBPROPERTIES - 160)) | (1 << (sparkParser.BUCKETS - 160)) | (1 << (sparkParser.SKEWED - 160)) | (1 << (sparkParser.STORED - 160)) | (1 << (sparkParser.DIRECTORIES - 160)) | (1 << (sparkParser.LOCATION - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (sparkParser.EXCHANGE - 192)) | (1 << (sparkParser.ARCHIVE - 192)) | (1 << (sparkParser.UNARCHIVE - 192)) | (1 << (sparkParser.FILEFORMAT - 192)) | (1 << (sparkParser.TOUCH - 192)) | (1 << (sparkParser.COMPACT - 192)) | (1 << (sparkParser.CONCATENATE - 192)) | (1 << (sparkParser.CHANGE - 192)) | (1 << (sparkParser.CASCADE - 192)) | (1 << (sparkParser.RESTRICT - 192)) | (1 << (sparkParser.CLUSTERED - 192)) | (1 << (sparkParser.SORTED - 192)) | (1 << (sparkParser.PURGE - 192)) | (1 << (sparkParser.INPUTFORMAT - 192)) | (1 << (sparkParser.OUTPUTFORMAT - 192)) | (1 << (sparkParser.DATABASE - 192)) | (1 << (sparkParser.DATABASES - 192)) | (1 << (sparkParser.DFS - 192)) | (1 << (sparkParser.TRUNCATE - 192)) | (1 << (sparkParser.ANALYZE - 192)) | (1 << (sparkParser.COMPUTE - 192)) | (1 << (sparkParser.LIST - 192)) | (1 << (sparkParser.STATISTICS - 192)) | (1 << (sparkParser.PARTITIONED - 192)) | (1 << (sparkParser.EXTERNAL - 192)) | (1 << (sparkParser.DEFINED - 192)) | (1 << (sparkParser.REVOKE - 192)) | (1 << (sparkParser.GRANT - 192)) | (1 << (sparkParser.LOCK - 192)) | (1 << (sparkParser.UNLOCK - 192)) | (1 << (sparkParser.MSCK - 192)) | (1 << (sparkParser.REPAIR - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (sparkParser.RECOVER - 224)) | (1 << (sparkParser.EXPORT - 224)) | (1 << (sparkParser.IMPORT - 224)) | (1 << (sparkParser.LOAD - 224)) | (1 << (sparkParser.ROLE - 224)) | (1 << (sparkParser.ROLES - 224)) | (1 << (sparkParser.COMPACTIONS - 224)) | (1 << (sparkParser.PRINCIPALS - 224)) | (1 << (sparkParser.TRANSACTIONS - 224)) | (1 << (sparkParser.INDEX - 224)) | (1 << (sparkParser.INDEXES - 224)) | (1 << (sparkParser.LOCKS - 224)) | (1 << (sparkParser.OPTION - 224)) | (1 << (sparkParser.ANTI - 224)) | (1 << (sparkParser.LOCAL - 224)) | (1 << (sparkParser.INPATH - 224)) | (1 << (sparkParser.STRING - 224)) | (1 << (sparkParser.BIGINT_LITERAL - 224)) | (1 << (sparkParser.SMALLINT_LITERAL - 224)) | (1 << (sparkParser.TINYINT_LITERAL - 224)) | (1 << (sparkParser.INTEGER_VALUE - 224)) | (1 << (sparkParser.DECIMAL_VALUE - 224)) | (1 << (sparkParser.DOUBLE_LITERAL - 224)) | (1 << (sparkParser.BIGDECIMAL_LITERAL - 224)) | (1 << (sparkParser.IDENTIFIER - 224)) | (1 << (sparkParser.BACKQUOTED_IDENTIFIER - 224)))) !== 0)) {
            this.state = 1807;
            this.expression();
            this.state = 1812;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === sparkParser.T__2) {
                this.state = 1808;
                this.match(sparkParser.T__2);
                this.state = 1809;
                this.expression();
                this.state = 1814;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        this.state = 1817;
        this.match(sparkParser.T__1);
        this.state = 1818;
        this.tableAlias();
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function TableAliasContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_tableAlias;
    return this;
}
TableAliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableAliasContext.prototype.constructor = TableAliasContext;
TableAliasContext.prototype.strictIdentifier = function () {
    return this.getTypedRuleContext(StrictIdentifierContext, 0);
};
TableAliasContext.prototype.AS = function () {
    return this.getToken(sparkParser.AS, 0);
};
TableAliasContext.prototype.identifierList = function () {
    return this.getTypedRuleContext(IdentifierListContext, 0);
};
TableAliasContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterTableAlias(this);
    }
};
TableAliasContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitTableAlias(this);
    }
};
TableAliasContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitTableAlias(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.TableAliasContext = TableAliasContext;
sparkParser.prototype.tableAlias = function () {
    var localctx = new TableAliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, sparkParser.RULE_tableAlias);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1827;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 241, this._ctx);
        if (la_ === 1) {
            this.state = 1821;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 239, this._ctx);
            if (la_ === 1) {
                this.state = 1820;
                this.match(sparkParser.AS);
            }
            this.state = 1823;
            this.strictIdentifier();
            this.state = 1825;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 240, this._ctx);
            if (la_ === 1) {
                this.state = 1824;
                this.identifierList();
            }
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function RowFormatContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_rowFormat;
    return this;
}
RowFormatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RowFormatContext.prototype.constructor = RowFormatContext;
RowFormatContext.prototype.copyFrom = function (ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};
function RowFormatSerdeContext(parser, ctx) {
    RowFormatContext.call(this, parser);
    this.name = null; // Token;
    this.props = null; // TablePropertyListContext;
    RowFormatContext.prototype.copyFrom.call(this, ctx);
    return this;
}
RowFormatSerdeContext.prototype = Object.create(RowFormatContext.prototype);
RowFormatSerdeContext.prototype.constructor = RowFormatSerdeContext;
sparkParser.RowFormatSerdeContext = RowFormatSerdeContext;
RowFormatSerdeContext.prototype.ROW = function () {
    return this.getToken(sparkParser.ROW, 0);
};
RowFormatSerdeContext.prototype.FORMAT = function () {
    return this.getToken(sparkParser.FORMAT, 0);
};
RowFormatSerdeContext.prototype.SERDE = function () {
    return this.getToken(sparkParser.SERDE, 0);
};
RowFormatSerdeContext.prototype.STRING = function () {
    return this.getToken(sparkParser.STRING, 0);
};
RowFormatSerdeContext.prototype.WITH = function () {
    return this.getToken(sparkParser.WITH, 0);
};
RowFormatSerdeContext.prototype.SERDEPROPERTIES = function () {
    return this.getToken(sparkParser.SERDEPROPERTIES, 0);
};
RowFormatSerdeContext.prototype.tablePropertyList = function () {
    return this.getTypedRuleContext(TablePropertyListContext, 0);
};
RowFormatSerdeContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterRowFormatSerde(this);
    }
};
RowFormatSerdeContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitRowFormatSerde(this);
    }
};
RowFormatSerdeContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitRowFormatSerde(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function RowFormatDelimitedContext(parser, ctx) {
    RowFormatContext.call(this, parser);
    this.fieldsTerminatedBy = null; // Token;
    this.escapedBy = null; // Token;
    this.collectionItemsTerminatedBy = null; // Token;
    this.keysTerminatedBy = null; // Token;
    this.linesSeparatedBy = null; // Token;
    this.nullDefinedAs = null; // Token;
    RowFormatContext.prototype.copyFrom.call(this, ctx);
    return this;
}
RowFormatDelimitedContext.prototype = Object.create(RowFormatContext.prototype);
RowFormatDelimitedContext.prototype.constructor = RowFormatDelimitedContext;
sparkParser.RowFormatDelimitedContext = RowFormatDelimitedContext;
RowFormatDelimitedContext.prototype.ROW = function () {
    return this.getToken(sparkParser.ROW, 0);
};
RowFormatDelimitedContext.prototype.FORMAT = function () {
    return this.getToken(sparkParser.FORMAT, 0);
};
RowFormatDelimitedContext.prototype.DELIMITED = function () {
    return this.getToken(sparkParser.DELIMITED, 0);
};
RowFormatDelimitedContext.prototype.FIELDS = function () {
    return this.getToken(sparkParser.FIELDS, 0);
};
RowFormatDelimitedContext.prototype.TERMINATED = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(sparkParser.TERMINATED);
    }
    else {
        return this.getToken(sparkParser.TERMINATED, i);
    }
};
RowFormatDelimitedContext.prototype.BY = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(sparkParser.BY);
    }
    else {
        return this.getToken(sparkParser.BY, i);
    }
};
RowFormatDelimitedContext.prototype.COLLECTION = function () {
    return this.getToken(sparkParser.COLLECTION, 0);
};
RowFormatDelimitedContext.prototype.ITEMS = function () {
    return this.getToken(sparkParser.ITEMS, 0);
};
RowFormatDelimitedContext.prototype.MAP = function () {
    return this.getToken(sparkParser.MAP, 0);
};
RowFormatDelimitedContext.prototype.KEYS = function () {
    return this.getToken(sparkParser.KEYS, 0);
};
RowFormatDelimitedContext.prototype.LINES = function () {
    return this.getToken(sparkParser.LINES, 0);
};
RowFormatDelimitedContext.prototype.NULL = function () {
    return this.getToken(sparkParser.NULL, 0);
};
RowFormatDelimitedContext.prototype.DEFINED = function () {
    return this.getToken(sparkParser.DEFINED, 0);
};
RowFormatDelimitedContext.prototype.AS = function () {
    return this.getToken(sparkParser.AS, 0);
};
RowFormatDelimitedContext.prototype.STRING = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(sparkParser.STRING);
    }
    else {
        return this.getToken(sparkParser.STRING, i);
    }
};
RowFormatDelimitedContext.prototype.ESCAPED = function () {
    return this.getToken(sparkParser.ESCAPED, 0);
};
RowFormatDelimitedContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterRowFormatDelimited(this);
    }
};
RowFormatDelimitedContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitRowFormatDelimited(this);
    }
};
RowFormatDelimitedContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitRowFormatDelimited(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.RowFormatContext = RowFormatContext;
sparkParser.prototype.rowFormat = function () {
    var localctx = new RowFormatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, sparkParser.RULE_rowFormat);
    try {
        this.state = 1878;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 249, this._ctx);
        switch (la_) {
            case 1:
                localctx = new RowFormatSerdeContext(this, localctx);
                this.enterOuterAlt(localctx, 1);
                this.state = 1829;
                this.match(sparkParser.ROW);
                this.state = 1830;
                this.match(sparkParser.FORMAT);
                this.state = 1831;
                this.match(sparkParser.SERDE);
                this.state = 1832;
                localctx.name = this.match(sparkParser.STRING);
                this.state = 1836;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 242, this._ctx);
                if (la_ === 1) {
                    this.state = 1833;
                    this.match(sparkParser.WITH);
                    this.state = 1834;
                    this.match(sparkParser.SERDEPROPERTIES);
                    this.state = 1835;
                    localctx.props = this.tablePropertyList();
                }
                break;
            case 2:
                localctx = new RowFormatDelimitedContext(this, localctx);
                this.enterOuterAlt(localctx, 2);
                this.state = 1838;
                this.match(sparkParser.ROW);
                this.state = 1839;
                this.match(sparkParser.FORMAT);
                this.state = 1840;
                this.match(sparkParser.DELIMITED);
                this.state = 1850;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 244, this._ctx);
                if (la_ === 1) {
                    this.state = 1841;
                    this.match(sparkParser.FIELDS);
                    this.state = 1842;
                    this.match(sparkParser.TERMINATED);
                    this.state = 1843;
                    this.match(sparkParser.BY);
                    this.state = 1844;
                    localctx.fieldsTerminatedBy = this.match(sparkParser.STRING);
                    this.state = 1848;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 243, this._ctx);
                    if (la_ === 1) {
                        this.state = 1845;
                        this.match(sparkParser.ESCAPED);
                        this.state = 1846;
                        this.match(sparkParser.BY);
                        this.state = 1847;
                        localctx.escapedBy = this.match(sparkParser.STRING);
                    }
                }
                this.state = 1857;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 245, this._ctx);
                if (la_ === 1) {
                    this.state = 1852;
                    this.match(sparkParser.COLLECTION);
                    this.state = 1853;
                    this.match(sparkParser.ITEMS);
                    this.state = 1854;
                    this.match(sparkParser.TERMINATED);
                    this.state = 1855;
                    this.match(sparkParser.BY);
                    this.state = 1856;
                    localctx.collectionItemsTerminatedBy = this.match(sparkParser.STRING);
                }
                this.state = 1864;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 246, this._ctx);
                if (la_ === 1) {
                    this.state = 1859;
                    this.match(sparkParser.MAP);
                    this.state = 1860;
                    this.match(sparkParser.KEYS);
                    this.state = 1861;
                    this.match(sparkParser.TERMINATED);
                    this.state = 1862;
                    this.match(sparkParser.BY);
                    this.state = 1863;
                    localctx.keysTerminatedBy = this.match(sparkParser.STRING);
                }
                this.state = 1870;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 247, this._ctx);
                if (la_ === 1) {
                    this.state = 1866;
                    this.match(sparkParser.LINES);
                    this.state = 1867;
                    this.match(sparkParser.TERMINATED);
                    this.state = 1868;
                    this.match(sparkParser.BY);
                    this.state = 1869;
                    localctx.linesSeparatedBy = this.match(sparkParser.STRING);
                }
                this.state = 1876;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 248, this._ctx);
                if (la_ === 1) {
                    this.state = 1872;
                    this.match(sparkParser.NULL);
                    this.state = 1873;
                    this.match(sparkParser.DEFINED);
                    this.state = 1874;
                    this.match(sparkParser.AS);
                    this.state = 1875;
                    localctx.nullDefinedAs = this.match(sparkParser.STRING);
                }
                break;
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function TableIdentifierContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_tableIdentifier;
    this.db = null; // IdentifierContext
    this.table = null; // IdentifierContext
    return this;
}
TableIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableIdentifierContext.prototype.constructor = TableIdentifierContext;
TableIdentifierContext.prototype.identifier = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(IdentifierContext);
    }
    else {
        return this.getTypedRuleContext(IdentifierContext, i);
    }
};
TableIdentifierContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterTableIdentifier(this);
    }
};
TableIdentifierContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitTableIdentifier(this);
    }
};
TableIdentifierContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitTableIdentifier(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.TableIdentifierContext = TableIdentifierContext;
sparkParser.prototype.tableIdentifier = function () {
    var localctx = new TableIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, sparkParser.RULE_tableIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1883;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 250, this._ctx);
        if (la_ === 1) {
            this.state = 1880;
            localctx.db = this.identifier();
            this.state = 1881;
            this.match(sparkParser.T__3);
        }
        this.state = 1885;
        localctx.table = this.identifier();
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function FunctionIdentifierContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_functionIdentifier;
    this.db = null; // IdentifierContext
    this.j_function = null; // IdentifierContext
    return this;
}
FunctionIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionIdentifierContext.prototype.constructor = FunctionIdentifierContext;
FunctionIdentifierContext.prototype.identifier = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(IdentifierContext);
    }
    else {
        return this.getTypedRuleContext(IdentifierContext, i);
    }
};
FunctionIdentifierContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterFunctionIdentifier(this);
    }
};
FunctionIdentifierContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitFunctionIdentifier(this);
    }
};
FunctionIdentifierContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitFunctionIdentifier(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.FunctionIdentifierContext = FunctionIdentifierContext;
sparkParser.prototype.functionIdentifier = function () {
    var localctx = new FunctionIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, sparkParser.RULE_functionIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1890;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 251, this._ctx);
        if (la_ === 1) {
            this.state = 1887;
            localctx.db = this.identifier();
            this.state = 1888;
            this.match(sparkParser.T__3);
        }
        this.state = 1892;
        localctx.j_function = this.identifier();
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function NamedExpressionContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_namedExpression;
    return this;
}
NamedExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedExpressionContext.prototype.constructor = NamedExpressionContext;
NamedExpressionContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
};
NamedExpressionContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};
NamedExpressionContext.prototype.identifierList = function () {
    return this.getTypedRuleContext(IdentifierListContext, 0);
};
NamedExpressionContext.prototype.AS = function () {
    return this.getToken(sparkParser.AS, 0);
};
NamedExpressionContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterNamedExpression(this);
    }
};
NamedExpressionContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitNamedExpression(this);
    }
};
NamedExpressionContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitNamedExpression(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.NamedExpressionContext = NamedExpressionContext;
sparkParser.prototype.namedExpression = function () {
    var localctx = new NamedExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, sparkParser.RULE_namedExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1894;
        this.expression();
        this.state = 1902;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 254, this._ctx);
        if (la_ === 1) {
            this.state = 1896;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 252, this._ctx);
            if (la_ === 1) {
                this.state = 1895;
                this.match(sparkParser.AS);
            }
            this.state = 1900;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case sparkParser.SELECT:
                case sparkParser.FROM:
                case sparkParser.ADD:
                case sparkParser.AS:
                case sparkParser.ALL:
                case sparkParser.ANY:
                case sparkParser.DISTINCT:
                case sparkParser.WHERE:
                case sparkParser.GROUP:
                case sparkParser.BY:
                case sparkParser.GROUPING:
                case sparkParser.SETS:
                case sparkParser.CUBE:
                case sparkParser.ROLLUP:
                case sparkParser.ORDER:
                case sparkParser.HAVING:
                case sparkParser.LIMIT:
                case sparkParser.AT:
                case sparkParser.OR:
                case sparkParser.AND:
                case sparkParser.IN:
                case sparkParser.NOT:
                case sparkParser.NO:
                case sparkParser.EXISTS:
                case sparkParser.BETWEEN:
                case sparkParser.LIKE:
                case sparkParser.RLIKE:
                case sparkParser.IS:
                case sparkParser.NULL:
                case sparkParser.TRUE:
                case sparkParser.FALSE:
                case sparkParser.NULLS:
                case sparkParser.ASC:
                case sparkParser.DESC:
                case sparkParser.FOR:
                case sparkParser.INTERVAL:
                case sparkParser.CASE:
                case sparkParser.WHEN:
                case sparkParser.THEN:
                case sparkParser.ELSE:
                case sparkParser.END:
                case sparkParser.JOIN:
                case sparkParser.CROSS:
                case sparkParser.OUTER:
                case sparkParser.INNER:
                case sparkParser.LEFT:
                case sparkParser.SEMI:
                case sparkParser.RIGHT:
                case sparkParser.FULL:
                case sparkParser.NATURAL:
                case sparkParser.ON:
                case sparkParser.PIVOT:
                case sparkParser.LATERAL:
                case sparkParser.WINDOW:
                case sparkParser.OVER:
                case sparkParser.PARTITION:
                case sparkParser.RANGE:
                case sparkParser.ROWS:
                case sparkParser.UNBOUNDED:
                case sparkParser.PRECEDING:
                case sparkParser.FOLLOWING:
                case sparkParser.CURRENT:
                case sparkParser.FIRST:
                case sparkParser.AFTER:
                case sparkParser.LAST:
                case sparkParser.ROW:
                case sparkParser.WITH:
                case sparkParser.VALUES:
                case sparkParser.CREATE:
                case sparkParser.TABLE:
                case sparkParser.DIRECTORY:
                case sparkParser.VIEW:
                case sparkParser.REPLACE:
                case sparkParser.INSERT:
                case sparkParser.DELETE:
                case sparkParser.INTO:
                case sparkParser.DESCRIBE:
                case sparkParser.EXPLAIN:
                case sparkParser.FORMAT:
                case sparkParser.LOGICAL:
                case sparkParser.CODEGEN:
                case sparkParser.COST:
                case sparkParser.CAST:
                case sparkParser.SHOW:
                case sparkParser.TABLES:
                case sparkParser.COLUMNS:
                case sparkParser.COLUMN:
                case sparkParser.USE:
                case sparkParser.PARTITIONS:
                case sparkParser.FUNCTIONS:
                case sparkParser.DROP:
                case sparkParser.UNION:
                case sparkParser.EXCEPT:
                case sparkParser.SETMINUS:
                case sparkParser.INTERSECT:
                case sparkParser.TO:
                case sparkParser.TABLESAMPLE:
                case sparkParser.STRATIFY:
                case sparkParser.ALTER:
                case sparkParser.RENAME:
                case sparkParser.ARRAY:
                case sparkParser.MAP:
                case sparkParser.STRUCT:
                case sparkParser.COMMENT:
                case sparkParser.SET:
                case sparkParser.RESET:
                case sparkParser.DATA:
                case sparkParser.START:
                case sparkParser.TRANSACTION:
                case sparkParser.COMMIT:
                case sparkParser.ROLLBACK:
                case sparkParser.MACRO:
                case sparkParser.IGNORE:
                case sparkParser.BOTH:
                case sparkParser.LEADING:
                case sparkParser.TRAILING:
                case sparkParser.IF:
                case sparkParser.POSITION:
                case sparkParser.EXTRACT:
                case sparkParser.DIV:
                case sparkParser.PERCENTLIT:
                case sparkParser.BUCKET:
                case sparkParser.OUT:
                case sparkParser.OF:
                case sparkParser.SORT:
                case sparkParser.CLUSTER:
                case sparkParser.DISTRIBUTE:
                case sparkParser.OVERWRITE:
                case sparkParser.TRANSFORM:
                case sparkParser.REDUCE:
                case sparkParser.SERDE:
                case sparkParser.SERDEPROPERTIES:
                case sparkParser.RECORDREADER:
                case sparkParser.RECORDWRITER:
                case sparkParser.DELIMITED:
                case sparkParser.FIELDS:
                case sparkParser.TERMINATED:
                case sparkParser.COLLECTION:
                case sparkParser.ITEMS:
                case sparkParser.KEYS:
                case sparkParser.ESCAPED:
                case sparkParser.LINES:
                case sparkParser.SEPARATED:
                case sparkParser.FUNCTION:
                case sparkParser.EXTENDED:
                case sparkParser.REFRESH:
                case sparkParser.CLEAR:
                case sparkParser.CACHE:
                case sparkParser.UNCACHE:
                case sparkParser.LAZY:
                case sparkParser.FORMATTED:
                case sparkParser.GLOBAL:
                case sparkParser.TEMPORARY:
                case sparkParser.OPTIONS:
                case sparkParser.UNSET:
                case sparkParser.TBLPROPERTIES:
                case sparkParser.DBPROPERTIES:
                case sparkParser.BUCKETS:
                case sparkParser.SKEWED:
                case sparkParser.STORED:
                case sparkParser.DIRECTORIES:
                case sparkParser.LOCATION:
                case sparkParser.EXCHANGE:
                case sparkParser.ARCHIVE:
                case sparkParser.UNARCHIVE:
                case sparkParser.FILEFORMAT:
                case sparkParser.TOUCH:
                case sparkParser.COMPACT:
                case sparkParser.CONCATENATE:
                case sparkParser.CHANGE:
                case sparkParser.CASCADE:
                case sparkParser.RESTRICT:
                case sparkParser.CLUSTERED:
                case sparkParser.SORTED:
                case sparkParser.PURGE:
                case sparkParser.INPUTFORMAT:
                case sparkParser.OUTPUTFORMAT:
                case sparkParser.DATABASE:
                case sparkParser.DATABASES:
                case sparkParser.DFS:
                case sparkParser.TRUNCATE:
                case sparkParser.ANALYZE:
                case sparkParser.COMPUTE:
                case sparkParser.LIST:
                case sparkParser.STATISTICS:
                case sparkParser.PARTITIONED:
                case sparkParser.EXTERNAL:
                case sparkParser.DEFINED:
                case sparkParser.REVOKE:
                case sparkParser.GRANT:
                case sparkParser.LOCK:
                case sparkParser.UNLOCK:
                case sparkParser.MSCK:
                case sparkParser.REPAIR:
                case sparkParser.RECOVER:
                case sparkParser.EXPORT:
                case sparkParser.IMPORT:
                case sparkParser.LOAD:
                case sparkParser.ROLE:
                case sparkParser.ROLES:
                case sparkParser.COMPACTIONS:
                case sparkParser.PRINCIPALS:
                case sparkParser.TRANSACTIONS:
                case sparkParser.INDEX:
                case sparkParser.INDEXES:
                case sparkParser.LOCKS:
                case sparkParser.OPTION:
                case sparkParser.ANTI:
                case sparkParser.LOCAL:
                case sparkParser.INPATH:
                case sparkParser.IDENTIFIER:
                case sparkParser.BACKQUOTED_IDENTIFIER:
                    this.state = 1898;
                    this.identifier();
                    break;
                case sparkParser.T__0:
                    this.state = 1899;
                    this.identifierList();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function NamedExpressionSeqContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_namedExpressionSeq;
    return this;
}
NamedExpressionSeqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedExpressionSeqContext.prototype.constructor = NamedExpressionSeqContext;
NamedExpressionSeqContext.prototype.namedExpression = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(NamedExpressionContext);
    }
    else {
        return this.getTypedRuleContext(NamedExpressionContext, i);
    }
};
NamedExpressionSeqContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterNamedExpressionSeq(this);
    }
};
NamedExpressionSeqContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitNamedExpressionSeq(this);
    }
};
NamedExpressionSeqContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitNamedExpressionSeq(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.NamedExpressionSeqContext = NamedExpressionSeqContext;
sparkParser.prototype.namedExpressionSeq = function () {
    var localctx = new NamedExpressionSeqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, sparkParser.RULE_namedExpressionSeq);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1904;
        this.namedExpression();
        this.state = 1909;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 255, this._ctx);
        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
                this.state = 1905;
                this.match(sparkParser.T__2);
                this.state = 1906;
                this.namedExpression();
            }
            this.state = 1911;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 255, this._ctx);
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function ExpressionContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_expression;
    return this;
}
ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;
ExpressionContext.prototype.booleanExpression = function () {
    return this.getTypedRuleContext(BooleanExpressionContext, 0);
};
ExpressionContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterExpression(this);
    }
};
ExpressionContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitExpression(this);
    }
};
ExpressionContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitExpression(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.ExpressionContext = ExpressionContext;
sparkParser.prototype.expression = function () {
    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, sparkParser.RULE_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1912;
        this.booleanExpression(0);
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function BooleanExpressionContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_booleanExpression;
    return this;
}
BooleanExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanExpressionContext.prototype.constructor = BooleanExpressionContext;
BooleanExpressionContext.prototype.copyFrom = function (ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};
function LogicalNotContext(parser, ctx) {
    BooleanExpressionContext.call(this, parser);
    BooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}
LogicalNotContext.prototype = Object.create(BooleanExpressionContext.prototype);
LogicalNotContext.prototype.constructor = LogicalNotContext;
sparkParser.LogicalNotContext = LogicalNotContext;
LogicalNotContext.prototype.NOT = function () {
    return this.getToken(sparkParser.NOT, 0);
};
LogicalNotContext.prototype.booleanExpression = function () {
    return this.getTypedRuleContext(BooleanExpressionContext, 0);
};
LogicalNotContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterLogicalNot(this);
    }
};
LogicalNotContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitLogicalNot(this);
    }
};
LogicalNotContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitLogicalNot(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function PredicatedContext(parser, ctx) {
    BooleanExpressionContext.call(this, parser);
    BooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}
PredicatedContext.prototype = Object.create(BooleanExpressionContext.prototype);
PredicatedContext.prototype.constructor = PredicatedContext;
sparkParser.PredicatedContext = PredicatedContext;
PredicatedContext.prototype.valueExpression = function () {
    return this.getTypedRuleContext(ValueExpressionContext, 0);
};
PredicatedContext.prototype.predicate = function () {
    return this.getTypedRuleContext(PredicateContext, 0);
};
PredicatedContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterPredicated(this);
    }
};
PredicatedContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitPredicated(this);
    }
};
PredicatedContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitPredicated(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function ExistsContext(parser, ctx) {
    BooleanExpressionContext.call(this, parser);
    BooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}
ExistsContext.prototype = Object.create(BooleanExpressionContext.prototype);
ExistsContext.prototype.constructor = ExistsContext;
sparkParser.ExistsContext = ExistsContext;
ExistsContext.prototype.EXISTS = function () {
    return this.getToken(sparkParser.EXISTS, 0);
};
ExistsContext.prototype.query = function () {
    return this.getTypedRuleContext(QueryContext, 0);
};
ExistsContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterExists(this);
    }
};
ExistsContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitExists(this);
    }
};
ExistsContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitExists(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function LogicalBinaryContext(parser, ctx) {
    BooleanExpressionContext.call(this, parser);
    this.left = null; // BooleanExpressionContext;
    this.operator = null; // Token;
    this.right = null; // BooleanExpressionContext;
    BooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}
LogicalBinaryContext.prototype = Object.create(BooleanExpressionContext.prototype);
LogicalBinaryContext.prototype.constructor = LogicalBinaryContext;
sparkParser.LogicalBinaryContext = LogicalBinaryContext;
LogicalBinaryContext.prototype.booleanExpression = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(BooleanExpressionContext);
    }
    else {
        return this.getTypedRuleContext(BooleanExpressionContext, i);
    }
};
LogicalBinaryContext.prototype.AND = function () {
    return this.getToken(sparkParser.AND, 0);
};
LogicalBinaryContext.prototype.OR = function () {
    return this.getToken(sparkParser.OR, 0);
};
LogicalBinaryContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterLogicalBinary(this);
    }
};
LogicalBinaryContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitLogicalBinary(this);
    }
};
LogicalBinaryContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitLogicalBinary(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.prototype.booleanExpression = function (_p) {
    if (_p === undefined) {
        _p = 0;
    }
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new BooleanExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 142;
    this.enterRecursionRule(localctx, 142, sparkParser.RULE_booleanExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1926;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 257, this._ctx);
        switch (la_) {
            case 1:
                localctx = new LogicalNotContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 1915;
                this.match(sparkParser.NOT);
                this.state = 1916;
                this.booleanExpression(5);
                break;
            case 2:
                localctx = new ExistsContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 1917;
                this.match(sparkParser.EXISTS);
                this.state = 1918;
                this.match(sparkParser.T__0);
                this.state = 1919;
                this.query();
                this.state = 1920;
                this.match(sparkParser.T__1);
                break;
            case 3:
                localctx = new PredicatedContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 1922;
                this.valueExpression(0);
                this.state = 1924;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 256, this._ctx);
                if (la_ === 1) {
                    this.state = 1923;
                    this.predicate();
                }
                break;
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1936;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 259, this._ctx);
        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
                if (this._parseListeners !== null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1934;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 258, this._ctx);
                switch (la_) {
                    case 1:
                        localctx = new LogicalBinaryContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
                        localctx.left = _prevctx;
                        this.pushNewRecursionContext(localctx, _startState, sparkParser.RULE_booleanExpression);
                        this.state = 1928;
                        if (!(this.precpred(this._ctx, 2))) {
                            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                        }
                        this.state = 1929;
                        localctx.operator = this.match(sparkParser.AND);
                        this.state = 1930;
                        localctx.right = this.booleanExpression(3);
                        break;
                    case 2:
                        localctx = new LogicalBinaryContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
                        localctx.left = _prevctx;
                        this.pushNewRecursionContext(localctx, _startState, sparkParser.RULE_booleanExpression);
                        this.state = 1931;
                        if (!(this.precpred(this._ctx, 1))) {
                            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                        }
                        this.state = 1932;
                        localctx.operator = this.match(sparkParser.OR);
                        this.state = 1933;
                        localctx.right = this.booleanExpression(2);
                        break;
                }
            }
            this.state = 1938;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 259, this._ctx);
        }
    }
    catch (error) {
        if (error instanceof antlr4.error.RecognitionException) {
            localctx.exception = error;
            this._errHandler.reportError(this, error);
            this._errHandler.recover(this, error);
        }
        else {
            throw error;
        }
    }
    finally {
        this.unrollRecursionContexts(_parentctx);
    }
    return localctx;
};
function PredicateContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_predicate;
    this.kind = null; // Token
    this.lower = null; // ValueExpressionContext
    this.upper = null; // ValueExpressionContext
    this.pattern = null; // ValueExpressionContext
    this.right = null; // ValueExpressionContext
    return this;
}
PredicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PredicateContext.prototype.constructor = PredicateContext;
PredicateContext.prototype.AND = function () {
    return this.getToken(sparkParser.AND, 0);
};
PredicateContext.prototype.BETWEEN = function () {
    return this.getToken(sparkParser.BETWEEN, 0);
};
PredicateContext.prototype.valueExpression = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    }
    else {
        return this.getTypedRuleContext(ValueExpressionContext, i);
    }
};
PredicateContext.prototype.NOT = function () {
    return this.getToken(sparkParser.NOT, 0);
};
PredicateContext.prototype.expression = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(ExpressionContext);
    }
    else {
        return this.getTypedRuleContext(ExpressionContext, i);
    }
};
PredicateContext.prototype.IN = function () {
    return this.getToken(sparkParser.IN, 0);
};
PredicateContext.prototype.query = function () {
    return this.getTypedRuleContext(QueryContext, 0);
};
PredicateContext.prototype.RLIKE = function () {
    return this.getToken(sparkParser.RLIKE, 0);
};
PredicateContext.prototype.LIKE = function () {
    return this.getToken(sparkParser.LIKE, 0);
};
PredicateContext.prototype.IS = function () {
    return this.getToken(sparkParser.IS, 0);
};
PredicateContext.prototype.NULL = function () {
    return this.getToken(sparkParser.NULL, 0);
};
PredicateContext.prototype.FROM = function () {
    return this.getToken(sparkParser.FROM, 0);
};
PredicateContext.prototype.DISTINCT = function () {
    return this.getToken(sparkParser.DISTINCT, 0);
};
PredicateContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterPredicate(this);
    }
};
PredicateContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitPredicate(this);
    }
};
PredicateContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitPredicate(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.PredicateContext = PredicateContext;
sparkParser.prototype.predicate = function () {
    var localctx = new PredicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, sparkParser.RULE_predicate);
    var _la = 0; // Token type
    try {
        this.state = 1987;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 267, this._ctx);
        switch (la_) {
            case 1:
                this.enterOuterAlt(localctx, 1);
                this.state = 1940;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.NOT) {
                    this.state = 1939;
                    this.match(sparkParser.NOT);
                }
                this.state = 1942;
                localctx.kind = this.match(sparkParser.BETWEEN);
                this.state = 1943;
                localctx.lower = this.valueExpression(0);
                this.state = 1944;
                this.match(sparkParser.AND);
                this.state = 1945;
                localctx.upper = this.valueExpression(0);
                break;
            case 2:
                this.enterOuterAlt(localctx, 2);
                this.state = 1948;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.NOT) {
                    this.state = 1947;
                    this.match(sparkParser.NOT);
                }
                this.state = 1950;
                localctx.kind = this.match(sparkParser.IN);
                this.state = 1951;
                this.match(sparkParser.T__0);
                this.state = 1952;
                this.expression();
                this.state = 1957;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === sparkParser.T__2) {
                    this.state = 1953;
                    this.match(sparkParser.T__2);
                    this.state = 1954;
                    this.expression();
                    this.state = 1959;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1960;
                this.match(sparkParser.T__1);
                break;
            case 3:
                this.enterOuterAlt(localctx, 3);
                this.state = 1963;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.NOT) {
                    this.state = 1962;
                    this.match(sparkParser.NOT);
                }
                this.state = 1965;
                localctx.kind = this.match(sparkParser.IN);
                this.state = 1966;
                this.match(sparkParser.T__0);
                this.state = 1967;
                this.query();
                this.state = 1968;
                this.match(sparkParser.T__1);
                break;
            case 4:
                this.enterOuterAlt(localctx, 4);
                this.state = 1971;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.NOT) {
                    this.state = 1970;
                    this.match(sparkParser.NOT);
                }
                this.state = 1973;
                localctx.kind = this._input.LT(1);
                _la = this._input.LA(1);
                if (!(_la === sparkParser.LIKE || _la === sparkParser.RLIKE)) {
                    localctx.kind = this._errHandler.recoverInline(this);
                }
                else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1974;
                localctx.pattern = this.valueExpression(0);
                break;
            case 5:
                this.enterOuterAlt(localctx, 5);
                this.state = 1975;
                this.match(sparkParser.IS);
                this.state = 1977;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.NOT) {
                    this.state = 1976;
                    this.match(sparkParser.NOT);
                }
                this.state = 1979;
                localctx.kind = this.match(sparkParser.NULL);
                break;
            case 6:
                this.enterOuterAlt(localctx, 6);
                this.state = 1980;
                this.match(sparkParser.IS);
                this.state = 1982;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.NOT) {
                    this.state = 1981;
                    this.match(sparkParser.NOT);
                }
                this.state = 1984;
                localctx.kind = this.match(sparkParser.DISTINCT);
                this.state = 1985;
                this.match(sparkParser.FROM);
                this.state = 1986;
                localctx.right = this.valueExpression(0);
                break;
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function ValueExpressionContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_valueExpression;
    return this;
}
ValueExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueExpressionContext.prototype.constructor = ValueExpressionContext;
ValueExpressionContext.prototype.copyFrom = function (ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};
function ValueExpressionDefaultContext(parser, ctx) {
    ValueExpressionContext.call(this, parser);
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}
ValueExpressionDefaultContext.prototype = Object.create(ValueExpressionContext.prototype);
ValueExpressionDefaultContext.prototype.constructor = ValueExpressionDefaultContext;
sparkParser.ValueExpressionDefaultContext = ValueExpressionDefaultContext;
ValueExpressionDefaultContext.prototype.primaryExpression = function () {
    return this.getTypedRuleContext(PrimaryExpressionContext, 0);
};
ValueExpressionDefaultContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterValueExpressionDefault(this);
    }
};
ValueExpressionDefaultContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitValueExpressionDefault(this);
    }
};
ValueExpressionDefaultContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitValueExpressionDefault(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function ComparisonContext(parser, ctx) {
    ValueExpressionContext.call(this, parser);
    this.left = null; // ValueExpressionContext;
    this.right = null; // ValueExpressionContext;
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}
ComparisonContext.prototype = Object.create(ValueExpressionContext.prototype);
ComparisonContext.prototype.constructor = ComparisonContext;
sparkParser.ComparisonContext = ComparisonContext;
ComparisonContext.prototype.comparisonOperator = function () {
    return this.getTypedRuleContext(ComparisonOperatorContext, 0);
};
ComparisonContext.prototype.valueExpression = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    }
    else {
        return this.getTypedRuleContext(ValueExpressionContext, i);
    }
};
ComparisonContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterComparison(this);
    }
};
ComparisonContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitComparison(this);
    }
};
ComparisonContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitComparison(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function ArithmeticBinaryContext(parser, ctx) {
    ValueExpressionContext.call(this, parser);
    this.left = null; // ValueExpressionContext;
    this.operator = null; // Token;
    this.right = null; // ValueExpressionContext;
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}
ArithmeticBinaryContext.prototype = Object.create(ValueExpressionContext.prototype);
ArithmeticBinaryContext.prototype.constructor = ArithmeticBinaryContext;
sparkParser.ArithmeticBinaryContext = ArithmeticBinaryContext;
ArithmeticBinaryContext.prototype.valueExpression = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    }
    else {
        return this.getTypedRuleContext(ValueExpressionContext, i);
    }
};
ArithmeticBinaryContext.prototype.ASTERISK = function () {
    return this.getToken(sparkParser.ASTERISK, 0);
};
ArithmeticBinaryContext.prototype.SLASH = function () {
    return this.getToken(sparkParser.SLASH, 0);
};
ArithmeticBinaryContext.prototype.PERCENT = function () {
    return this.getToken(sparkParser.PERCENT, 0);
};
ArithmeticBinaryContext.prototype.DIV = function () {
    return this.getToken(sparkParser.DIV, 0);
};
ArithmeticBinaryContext.prototype.PLUS = function () {
    return this.getToken(sparkParser.PLUS, 0);
};
ArithmeticBinaryContext.prototype.MINUS = function () {
    return this.getToken(sparkParser.MINUS, 0);
};
ArithmeticBinaryContext.prototype.CONCAT_PIPE = function () {
    return this.getToken(sparkParser.CONCAT_PIPE, 0);
};
ArithmeticBinaryContext.prototype.AMPERSAND = function () {
    return this.getToken(sparkParser.AMPERSAND, 0);
};
ArithmeticBinaryContext.prototype.HAT = function () {
    return this.getToken(sparkParser.HAT, 0);
};
ArithmeticBinaryContext.prototype.PIPE = function () {
    return this.getToken(sparkParser.PIPE, 0);
};
ArithmeticBinaryContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterArithmeticBinary(this);
    }
};
ArithmeticBinaryContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitArithmeticBinary(this);
    }
};
ArithmeticBinaryContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitArithmeticBinary(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function ArithmeticUnaryContext(parser, ctx) {
    ValueExpressionContext.call(this, parser);
    this.operator = null; // Token;
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}
ArithmeticUnaryContext.prototype = Object.create(ValueExpressionContext.prototype);
ArithmeticUnaryContext.prototype.constructor = ArithmeticUnaryContext;
sparkParser.ArithmeticUnaryContext = ArithmeticUnaryContext;
ArithmeticUnaryContext.prototype.valueExpression = function () {
    return this.getTypedRuleContext(ValueExpressionContext, 0);
};
ArithmeticUnaryContext.prototype.MINUS = function () {
    return this.getToken(sparkParser.MINUS, 0);
};
ArithmeticUnaryContext.prototype.PLUS = function () {
    return this.getToken(sparkParser.PLUS, 0);
};
ArithmeticUnaryContext.prototype.TILDE = function () {
    return this.getToken(sparkParser.TILDE, 0);
};
ArithmeticUnaryContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterArithmeticUnary(this);
    }
};
ArithmeticUnaryContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitArithmeticUnary(this);
    }
};
ArithmeticUnaryContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitArithmeticUnary(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.prototype.valueExpression = function (_p) {
    if (_p === undefined) {
        _p = 0;
    }
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ValueExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 146;
    this.enterRecursionRule(localctx, 146, sparkParser.RULE_valueExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1993;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 268, this._ctx);
        switch (la_) {
            case 1:
                localctx = new ValueExpressionDefaultContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 1990;
                this.primaryExpression(0);
                break;
            case 2:
                localctx = new ArithmeticUnaryContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 1991;
                localctx.operator = this._input.LT(1);
                _la = this._input.LA(1);
                if (!(((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (sparkParser.PLUS - 138)) | (1 << (sparkParser.MINUS - 138)) | (1 << (sparkParser.TILDE - 138)))) !== 0))) {
                    localctx.operator = this._errHandler.recoverInline(this);
                }
                else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1992;
                this.valueExpression(7);
                break;
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 2016;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 270, this._ctx);
        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
                if (this._parseListeners !== null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 2014;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 269, this._ctx);
                switch (la_) {
                    case 1:
                        localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                        localctx.left = _prevctx;
                        this.pushNewRecursionContext(localctx, _startState, sparkParser.RULE_valueExpression);
                        this.state = 1995;
                        if (!(this.precpred(this._ctx, 6))) {
                            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                        }
                        this.state = 1996;
                        localctx.operator = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (!(((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (sparkParser.ASTERISK - 140)) | (1 << (sparkParser.SLASH - 140)) | (1 << (sparkParser.PERCENT - 140)) | (1 << (sparkParser.DIV - 140)))) !== 0))) {
                            localctx.operator = this._errHandler.recoverInline(this);
                        }
                        else {
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 1997;
                        localctx.right = this.valueExpression(7);
                        break;
                    case 2:
                        localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                        localctx.left = _prevctx;
                        this.pushNewRecursionContext(localctx, _startState, sparkParser.RULE_valueExpression);
                        this.state = 1998;
                        if (!(this.precpred(this._ctx, 5))) {
                            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                        }
                        this.state = 1999;
                        localctx.operator = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (!(((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (sparkParser.PLUS - 138)) | (1 << (sparkParser.MINUS - 138)) | (1 << (sparkParser.CONCAT_PIPE - 138)))) !== 0))) {
                            localctx.operator = this._errHandler.recoverInline(this);
                        }
                        else {
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 2000;
                        localctx.right = this.valueExpression(6);
                        break;
                    case 3:
                        localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                        localctx.left = _prevctx;
                        this.pushNewRecursionContext(localctx, _startState, sparkParser.RULE_valueExpression);
                        this.state = 2001;
                        if (!(this.precpred(this._ctx, 4))) {
                            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                        }
                        this.state = 2002;
                        localctx.operator = this.match(sparkParser.AMPERSAND);
                        this.state = 2003;
                        localctx.right = this.valueExpression(5);
                        break;
                    case 4:
                        localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                        localctx.left = _prevctx;
                        this.pushNewRecursionContext(localctx, _startState, sparkParser.RULE_valueExpression);
                        this.state = 2004;
                        if (!(this.precpred(this._ctx, 3))) {
                            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                        }
                        this.state = 2005;
                        localctx.operator = this.match(sparkParser.HAT);
                        this.state = 2006;
                        localctx.right = this.valueExpression(4);
                        break;
                    case 5:
                        localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                        localctx.left = _prevctx;
                        this.pushNewRecursionContext(localctx, _startState, sparkParser.RULE_valueExpression);
                        this.state = 2007;
                        if (!(this.precpred(this._ctx, 2))) {
                            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                        }
                        this.state = 2008;
                        localctx.operator = this.match(sparkParser.PIPE);
                        this.state = 2009;
                        localctx.right = this.valueExpression(3);
                        break;
                    case 6:
                        localctx = new ComparisonContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                        localctx.left = _prevctx;
                        this.pushNewRecursionContext(localctx, _startState, sparkParser.RULE_valueExpression);
                        this.state = 2010;
                        if (!(this.precpred(this._ctx, 1))) {
                            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                        }
                        this.state = 2011;
                        this.comparisonOperator();
                        this.state = 2012;
                        localctx.right = this.valueExpression(2);
                        break;
                }
            }
            this.state = 2018;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 270, this._ctx);
        }
    }
    catch (error) {
        if (error instanceof antlr4.error.RecognitionException) {
            localctx.exception = error;
            this._errHandler.reportError(this, error);
            this._errHandler.recover(this, error);
        }
        else {
            throw error;
        }
    }
    finally {
        this.unrollRecursionContexts(_parentctx);
    }
    return localctx;
};
function PrimaryExpressionContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_primaryExpression;
    return this;
}
PrimaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryExpressionContext.prototype.constructor = PrimaryExpressionContext;
PrimaryExpressionContext.prototype.copyFrom = function (ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};
function StructContext(parser, ctx) {
    PrimaryExpressionContext.call(this, parser);
    this._namedExpression = null; // NamedExpressionContext;
    this.argument = []; // of NamedExpressionContexts;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}
StructContext.prototype = Object.create(PrimaryExpressionContext.prototype);
StructContext.prototype.constructor = StructContext;
sparkParser.StructContext = StructContext;
StructContext.prototype.STRUCT = function () {
    return this.getToken(sparkParser.STRUCT, 0);
};
StructContext.prototype.namedExpression = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(NamedExpressionContext);
    }
    else {
        return this.getTypedRuleContext(NamedExpressionContext, i);
    }
};
StructContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterStruct(this);
    }
};
StructContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitStruct(this);
    }
};
StructContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitStruct(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function DereferenceContext(parser, ctx) {
    PrimaryExpressionContext.call(this, parser);
    this.base = null; // PrimaryExpressionContext;
    this.fieldName = null; // IdentifierContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}
DereferenceContext.prototype = Object.create(PrimaryExpressionContext.prototype);
DereferenceContext.prototype.constructor = DereferenceContext;
sparkParser.DereferenceContext = DereferenceContext;
DereferenceContext.prototype.primaryExpression = function () {
    return this.getTypedRuleContext(PrimaryExpressionContext, 0);
};
DereferenceContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};
DereferenceContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterDereference(this);
    }
};
DereferenceContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitDereference(this);
    }
};
DereferenceContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitDereference(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function SimpleCaseContext(parser, ctx) {
    PrimaryExpressionContext.call(this, parser);
    this.value = null; // ExpressionContext;
    this.elseExpression = null; // ExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}
SimpleCaseContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SimpleCaseContext.prototype.constructor = SimpleCaseContext;
sparkParser.SimpleCaseContext = SimpleCaseContext;
SimpleCaseContext.prototype.CASE = function () {
    return this.getToken(sparkParser.CASE, 0);
};
SimpleCaseContext.prototype.END = function () {
    return this.getToken(sparkParser.END, 0);
};
SimpleCaseContext.prototype.expression = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(ExpressionContext);
    }
    else {
        return this.getTypedRuleContext(ExpressionContext, i);
    }
};
SimpleCaseContext.prototype.whenClause = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(WhenClauseContext);
    }
    else {
        return this.getTypedRuleContext(WhenClauseContext, i);
    }
};
SimpleCaseContext.prototype.ELSE = function () {
    return this.getToken(sparkParser.ELSE, 0);
};
SimpleCaseContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterSimpleCase(this);
    }
};
SimpleCaseContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitSimpleCase(this);
    }
};
SimpleCaseContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitSimpleCase(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function ColumnReferenceContext(parser, ctx) {
    PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}
ColumnReferenceContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ColumnReferenceContext.prototype.constructor = ColumnReferenceContext;
sparkParser.ColumnReferenceContext = ColumnReferenceContext;
ColumnReferenceContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};
ColumnReferenceContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterColumnReference(this);
    }
};
ColumnReferenceContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitColumnReference(this);
    }
};
ColumnReferenceContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitColumnReference(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function RowConstructorContext(parser, ctx) {
    PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}
RowConstructorContext.prototype = Object.create(PrimaryExpressionContext.prototype);
RowConstructorContext.prototype.constructor = RowConstructorContext;
sparkParser.RowConstructorContext = RowConstructorContext;
RowConstructorContext.prototype.namedExpression = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(NamedExpressionContext);
    }
    else {
        return this.getTypedRuleContext(NamedExpressionContext, i);
    }
};
RowConstructorContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterRowConstructor(this);
    }
};
RowConstructorContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitRowConstructor(this);
    }
};
RowConstructorContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitRowConstructor(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function LastContext(parser, ctx) {
    PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}
LastContext.prototype = Object.create(PrimaryExpressionContext.prototype);
LastContext.prototype.constructor = LastContext;
sparkParser.LastContext = LastContext;
LastContext.prototype.LAST = function () {
    return this.getToken(sparkParser.LAST, 0);
};
LastContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
};
LastContext.prototype.IGNORE = function () {
    return this.getToken(sparkParser.IGNORE, 0);
};
LastContext.prototype.NULLS = function () {
    return this.getToken(sparkParser.NULLS, 0);
};
LastContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterLast(this);
    }
};
LastContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitLast(this);
    }
};
LastContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitLast(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function StarContext(parser, ctx) {
    PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}
StarContext.prototype = Object.create(PrimaryExpressionContext.prototype);
StarContext.prototype.constructor = StarContext;
sparkParser.StarContext = StarContext;
StarContext.prototype.ASTERISK = function () {
    return this.getToken(sparkParser.ASTERISK, 0);
};
StarContext.prototype.qualifiedName = function () {
    return this.getTypedRuleContext(QualifiedNameContext, 0);
};
StarContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterStar(this);
    }
};
StarContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitStar(this);
    }
};
StarContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitStar(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function SubscriptContext(parser, ctx) {
    PrimaryExpressionContext.call(this, parser);
    this.value = null; // PrimaryExpressionContext;
    this.index = null; // ValueExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}
SubscriptContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SubscriptContext.prototype.constructor = SubscriptContext;
sparkParser.SubscriptContext = SubscriptContext;
SubscriptContext.prototype.primaryExpression = function () {
    return this.getTypedRuleContext(PrimaryExpressionContext, 0);
};
SubscriptContext.prototype.valueExpression = function () {
    return this.getTypedRuleContext(ValueExpressionContext, 0);
};
SubscriptContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterSubscript(this);
    }
};
SubscriptContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitSubscript(this);
    }
};
SubscriptContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitSubscript(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function SubqueryExpressionContext(parser, ctx) {
    PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}
SubqueryExpressionContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SubqueryExpressionContext.prototype.constructor = SubqueryExpressionContext;
sparkParser.SubqueryExpressionContext = SubqueryExpressionContext;
SubqueryExpressionContext.prototype.query = function () {
    return this.getTypedRuleContext(QueryContext, 0);
};
SubqueryExpressionContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterSubqueryExpression(this);
    }
};
SubqueryExpressionContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitSubqueryExpression(this);
    }
};
SubqueryExpressionContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitSubqueryExpression(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function CastContext(parser, ctx) {
    PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}
CastContext.prototype = Object.create(PrimaryExpressionContext.prototype);
CastContext.prototype.constructor = CastContext;
sparkParser.CastContext = CastContext;
CastContext.prototype.CAST = function () {
    return this.getToken(sparkParser.CAST, 0);
};
CastContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
};
CastContext.prototype.AS = function () {
    return this.getToken(sparkParser.AS, 0);
};
CastContext.prototype.dataType = function () {
    return this.getTypedRuleContext(DataTypeContext, 0);
};
CastContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterCast(this);
    }
};
CastContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitCast(this);
    }
};
CastContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitCast(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function ConstantDefaultContext(parser, ctx) {
    PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}
ConstantDefaultContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ConstantDefaultContext.prototype.constructor = ConstantDefaultContext;
sparkParser.ConstantDefaultContext = ConstantDefaultContext;
ConstantDefaultContext.prototype.constant = function () {
    return this.getTypedRuleContext(ConstantContext, 0);
};
ConstantDefaultContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterConstantDefault(this);
    }
};
ConstantDefaultContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitConstantDefault(this);
    }
};
ConstantDefaultContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitConstantDefault(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function LambdaContext(parser, ctx) {
    PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}
LambdaContext.prototype = Object.create(PrimaryExpressionContext.prototype);
LambdaContext.prototype.constructor = LambdaContext;
sparkParser.LambdaContext = LambdaContext;
LambdaContext.prototype.IDENTIFIER = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(sparkParser.IDENTIFIER);
    }
    else {
        return this.getToken(sparkParser.IDENTIFIER, i);
    }
};
LambdaContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
};
LambdaContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterLambda(this);
    }
};
LambdaContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitLambda(this);
    }
};
LambdaContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitLambda(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function ParenthesizedExpressionContext(parser, ctx) {
    PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}
ParenthesizedExpressionContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ParenthesizedExpressionContext.prototype.constructor = ParenthesizedExpressionContext;
sparkParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;
ParenthesizedExpressionContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
};
ParenthesizedExpressionContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterParenthesizedExpression(this);
    }
};
ParenthesizedExpressionContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitParenthesizedExpression(this);
    }
};
ParenthesizedExpressionContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitParenthesizedExpression(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function ExtractContext(parser, ctx) {
    PrimaryExpressionContext.call(this, parser);
    this.field = null; // IdentifierContext;
    this.source = null; // ValueExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}
ExtractContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ExtractContext.prototype.constructor = ExtractContext;
sparkParser.ExtractContext = ExtractContext;
ExtractContext.prototype.EXTRACT = function () {
    return this.getToken(sparkParser.EXTRACT, 0);
};
ExtractContext.prototype.FROM = function () {
    return this.getToken(sparkParser.FROM, 0);
};
ExtractContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};
ExtractContext.prototype.valueExpression = function () {
    return this.getTypedRuleContext(ValueExpressionContext, 0);
};
ExtractContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterExtract(this);
    }
};
ExtractContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitExtract(this);
    }
};
ExtractContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitExtract(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function FunctionCallContext(parser, ctx) {
    PrimaryExpressionContext.call(this, parser);
    this._expression = null; // ExpressionContext;
    this.argument = []; // of ExpressionContexts;
    this.trimOption = null; // Token;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}
FunctionCallContext.prototype = Object.create(PrimaryExpressionContext.prototype);
FunctionCallContext.prototype.constructor = FunctionCallContext;
sparkParser.FunctionCallContext = FunctionCallContext;
FunctionCallContext.prototype.qualifiedName = function () {
    return this.getTypedRuleContext(QualifiedNameContext, 0);
};
FunctionCallContext.prototype.OVER = function () {
    return this.getToken(sparkParser.OVER, 0);
};
FunctionCallContext.prototype.windowSpec = function () {
    return this.getTypedRuleContext(WindowSpecContext, 0);
};
FunctionCallContext.prototype.expression = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(ExpressionContext);
    }
    else {
        return this.getTypedRuleContext(ExpressionContext, i);
    }
};
FunctionCallContext.prototype.setQuantifier = function () {
    return this.getTypedRuleContext(SetQuantifierContext, 0);
};
FunctionCallContext.prototype.FROM = function () {
    return this.getToken(sparkParser.FROM, 0);
};
FunctionCallContext.prototype.BOTH = function () {
    return this.getToken(sparkParser.BOTH, 0);
};
FunctionCallContext.prototype.LEADING = function () {
    return this.getToken(sparkParser.LEADING, 0);
};
FunctionCallContext.prototype.TRAILING = function () {
    return this.getToken(sparkParser.TRAILING, 0);
};
FunctionCallContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterFunctionCall(this);
    }
};
FunctionCallContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitFunctionCall(this);
    }
};
FunctionCallContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitFunctionCall(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function SearchedCaseContext(parser, ctx) {
    PrimaryExpressionContext.call(this, parser);
    this.elseExpression = null; // ExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}
SearchedCaseContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SearchedCaseContext.prototype.constructor = SearchedCaseContext;
sparkParser.SearchedCaseContext = SearchedCaseContext;
SearchedCaseContext.prototype.CASE = function () {
    return this.getToken(sparkParser.CASE, 0);
};
SearchedCaseContext.prototype.END = function () {
    return this.getToken(sparkParser.END, 0);
};
SearchedCaseContext.prototype.whenClause = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(WhenClauseContext);
    }
    else {
        return this.getTypedRuleContext(WhenClauseContext, i);
    }
};
SearchedCaseContext.prototype.ELSE = function () {
    return this.getToken(sparkParser.ELSE, 0);
};
SearchedCaseContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
};
SearchedCaseContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterSearchedCase(this);
    }
};
SearchedCaseContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitSearchedCase(this);
    }
};
SearchedCaseContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitSearchedCase(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function PositionContext(parser, ctx) {
    PrimaryExpressionContext.call(this, parser);
    this.substr = null; // ValueExpressionContext;
    this.str = null; // ValueExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}
PositionContext.prototype = Object.create(PrimaryExpressionContext.prototype);
PositionContext.prototype.constructor = PositionContext;
sparkParser.PositionContext = PositionContext;
PositionContext.prototype.POSITION = function () {
    return this.getToken(sparkParser.POSITION, 0);
};
PositionContext.prototype.IN = function () {
    return this.getToken(sparkParser.IN, 0);
};
PositionContext.prototype.valueExpression = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    }
    else {
        return this.getTypedRuleContext(ValueExpressionContext, i);
    }
};
PositionContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterPosition(this);
    }
};
PositionContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitPosition(this);
    }
};
PositionContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitPosition(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function FirstContext(parser, ctx) {
    PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}
FirstContext.prototype = Object.create(PrimaryExpressionContext.prototype);
FirstContext.prototype.constructor = FirstContext;
sparkParser.FirstContext = FirstContext;
FirstContext.prototype.FIRST = function () {
    return this.getToken(sparkParser.FIRST, 0);
};
FirstContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
};
FirstContext.prototype.IGNORE = function () {
    return this.getToken(sparkParser.IGNORE, 0);
};
FirstContext.prototype.NULLS = function () {
    return this.getToken(sparkParser.NULLS, 0);
};
FirstContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterFirst(this);
    }
};
FirstContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitFirst(this);
    }
};
FirstContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitFirst(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.prototype.primaryExpression = function (_p) {
    if (_p === undefined) {
        _p = 0;
    }
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new PrimaryExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 148;
    this.enterRecursionRule(localctx, 148, sparkParser.RULE_primaryExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2164;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 285, this._ctx);
        switch (la_) {
            case 1:
                localctx = new SearchedCaseContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 2020;
                this.match(sparkParser.CASE);
                this.state = 2022;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 2021;
                    this.whenClause();
                    this.state = 2024;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === sparkParser.WHEN);
                this.state = 2028;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.ELSE) {
                    this.state = 2026;
                    this.match(sparkParser.ELSE);
                    this.state = 2027;
                    localctx.elseExpression = this.expression();
                }
                this.state = 2030;
                this.match(sparkParser.END);
                break;
            case 2:
                localctx = new SimpleCaseContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 2032;
                this.match(sparkParser.CASE);
                this.state = 2033;
                localctx.value = this.expression();
                this.state = 2035;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 2034;
                    this.whenClause();
                    this.state = 2037;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === sparkParser.WHEN);
                this.state = 2041;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.ELSE) {
                    this.state = 2039;
                    this.match(sparkParser.ELSE);
                    this.state = 2040;
                    localctx.elseExpression = this.expression();
                }
                this.state = 2043;
                this.match(sparkParser.END);
                break;
            case 3:
                localctx = new CastContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 2045;
                this.match(sparkParser.CAST);
                this.state = 2046;
                this.match(sparkParser.T__0);
                this.state = 2047;
                this.expression();
                this.state = 2048;
                this.match(sparkParser.AS);
                this.state = 2049;
                this.dataType();
                this.state = 2050;
                this.match(sparkParser.T__1);
                break;
            case 4:
                localctx = new StructContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 2052;
                this.match(sparkParser.STRUCT);
                this.state = 2053;
                this.match(sparkParser.T__0);
                this.state = 2062;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << sparkParser.T__0) | (1 << sparkParser.SELECT) | (1 << sparkParser.FROM) | (1 << sparkParser.ADD) | (1 << sparkParser.AS) | (1 << sparkParser.ALL) | (1 << sparkParser.ANY) | (1 << sparkParser.DISTINCT) | (1 << sparkParser.WHERE) | (1 << sparkParser.GROUP) | (1 << sparkParser.BY) | (1 << sparkParser.GROUPING) | (1 << sparkParser.SETS) | (1 << sparkParser.CUBE) | (1 << sparkParser.ROLLUP) | (1 << sparkParser.ORDER) | (1 << sparkParser.HAVING) | (1 << sparkParser.LIMIT) | (1 << sparkParser.AT) | (1 << sparkParser.OR) | (1 << sparkParser.AND) | (1 << sparkParser.IN))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (sparkParser.NOT - 32)) | (1 << (sparkParser.NO - 32)) | (1 << (sparkParser.EXISTS - 32)) | (1 << (sparkParser.BETWEEN - 32)) | (1 << (sparkParser.LIKE - 32)) | (1 << (sparkParser.RLIKE - 32)) | (1 << (sparkParser.IS - 32)) | (1 << (sparkParser.NULL - 32)) | (1 << (sparkParser.TRUE - 32)) | (1 << (sparkParser.FALSE - 32)) | (1 << (sparkParser.NULLS - 32)) | (1 << (sparkParser.ASC - 32)) | (1 << (sparkParser.DESC - 32)) | (1 << (sparkParser.FOR - 32)) | (1 << (sparkParser.INTERVAL - 32)) | (1 << (sparkParser.CASE - 32)) | (1 << (sparkParser.WHEN - 32)) | (1 << (sparkParser.THEN - 32)) | (1 << (sparkParser.ELSE - 32)) | (1 << (sparkParser.END - 32)) | (1 << (sparkParser.JOIN - 32)) | (1 << (sparkParser.CROSS - 32)) | (1 << (sparkParser.OUTER - 32)) | (1 << (sparkParser.INNER - 32)) | (1 << (sparkParser.LEFT - 32)) | (1 << (sparkParser.SEMI - 32)) | (1 << (sparkParser.RIGHT - 32)) | (1 << (sparkParser.FULL - 32)) | (1 << (sparkParser.NATURAL - 32)) | (1 << (sparkParser.ON - 32)) | (1 << (sparkParser.PIVOT - 32)) | (1 << (sparkParser.LATERAL - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (sparkParser.WINDOW - 64)) | (1 << (sparkParser.OVER - 64)) | (1 << (sparkParser.PARTITION - 64)) | (1 << (sparkParser.RANGE - 64)) | (1 << (sparkParser.ROWS - 64)) | (1 << (sparkParser.UNBOUNDED - 64)) | (1 << (sparkParser.PRECEDING - 64)) | (1 << (sparkParser.FOLLOWING - 64)) | (1 << (sparkParser.CURRENT - 64)) | (1 << (sparkParser.FIRST - 64)) | (1 << (sparkParser.AFTER - 64)) | (1 << (sparkParser.LAST - 64)) | (1 << (sparkParser.ROW - 64)) | (1 << (sparkParser.WITH - 64)) | (1 << (sparkParser.VALUES - 64)) | (1 << (sparkParser.CREATE - 64)) | (1 << (sparkParser.TABLE - 64)) | (1 << (sparkParser.DIRECTORY - 64)) | (1 << (sparkParser.VIEW - 64)) | (1 << (sparkParser.REPLACE - 64)) | (1 << (sparkParser.INSERT - 64)) | (1 << (sparkParser.DELETE - 64)) | (1 << (sparkParser.INTO - 64)) | (1 << (sparkParser.DESCRIBE - 64)) | (1 << (sparkParser.EXPLAIN - 64)) | (1 << (sparkParser.FORMAT - 64)) | (1 << (sparkParser.LOGICAL - 64)) | (1 << (sparkParser.CODEGEN - 64)) | (1 << (sparkParser.COST - 64)) | (1 << (sparkParser.CAST - 64)) | (1 << (sparkParser.SHOW - 64)) | (1 << (sparkParser.TABLES - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (sparkParser.COLUMNS - 96)) | (1 << (sparkParser.COLUMN - 96)) | (1 << (sparkParser.USE - 96)) | (1 << (sparkParser.PARTITIONS - 96)) | (1 << (sparkParser.FUNCTIONS - 96)) | (1 << (sparkParser.DROP - 96)) | (1 << (sparkParser.UNION - 96)) | (1 << (sparkParser.EXCEPT - 96)) | (1 << (sparkParser.SETMINUS - 96)) | (1 << (sparkParser.INTERSECT - 96)) | (1 << (sparkParser.TO - 96)) | (1 << (sparkParser.TABLESAMPLE - 96)) | (1 << (sparkParser.STRATIFY - 96)) | (1 << (sparkParser.ALTER - 96)) | (1 << (sparkParser.RENAME - 96)) | (1 << (sparkParser.ARRAY - 96)) | (1 << (sparkParser.MAP - 96)) | (1 << (sparkParser.STRUCT - 96)) | (1 << (sparkParser.COMMENT - 96)) | (1 << (sparkParser.SET - 96)) | (1 << (sparkParser.RESET - 96)) | (1 << (sparkParser.DATA - 96)) | (1 << (sparkParser.START - 96)) | (1 << (sparkParser.TRANSACTION - 96)) | (1 << (sparkParser.COMMIT - 96)) | (1 << (sparkParser.ROLLBACK - 96)) | (1 << (sparkParser.MACRO - 96)) | (1 << (sparkParser.IGNORE - 96)) | (1 << (sparkParser.BOTH - 96)) | (1 << (sparkParser.LEADING - 96)) | (1 << (sparkParser.TRAILING - 96)) | (1 << (sparkParser.IF - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (sparkParser.POSITION - 128)) | (1 << (sparkParser.EXTRACT - 128)) | (1 << (sparkParser.PLUS - 128)) | (1 << (sparkParser.MINUS - 128)) | (1 << (sparkParser.ASTERISK - 128)) | (1 << (sparkParser.DIV - 128)) | (1 << (sparkParser.TILDE - 128)) | (1 << (sparkParser.PERCENTLIT - 128)) | (1 << (sparkParser.BUCKET - 128)) | (1 << (sparkParser.OUT - 128)) | (1 << (sparkParser.OF - 128)) | (1 << (sparkParser.SORT - 128)) | (1 << (sparkParser.CLUSTER - 128)) | (1 << (sparkParser.DISTRIBUTE - 128)) | (1 << (sparkParser.OVERWRITE - 128)) | (1 << (sparkParser.TRANSFORM - 128)) | (1 << (sparkParser.REDUCE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (sparkParser.SERDE - 160)) | (1 << (sparkParser.SERDEPROPERTIES - 160)) | (1 << (sparkParser.RECORDREADER - 160)) | (1 << (sparkParser.RECORDWRITER - 160)) | (1 << (sparkParser.DELIMITED - 160)) | (1 << (sparkParser.FIELDS - 160)) | (1 << (sparkParser.TERMINATED - 160)) | (1 << (sparkParser.COLLECTION - 160)) | (1 << (sparkParser.ITEMS - 160)) | (1 << (sparkParser.KEYS - 160)) | (1 << (sparkParser.ESCAPED - 160)) | (1 << (sparkParser.LINES - 160)) | (1 << (sparkParser.SEPARATED - 160)) | (1 << (sparkParser.FUNCTION - 160)) | (1 << (sparkParser.EXTENDED - 160)) | (1 << (sparkParser.REFRESH - 160)) | (1 << (sparkParser.CLEAR - 160)) | (1 << (sparkParser.CACHE - 160)) | (1 << (sparkParser.UNCACHE - 160)) | (1 << (sparkParser.LAZY - 160)) | (1 << (sparkParser.FORMATTED - 160)) | (1 << (sparkParser.GLOBAL - 160)) | (1 << (sparkParser.TEMPORARY - 160)) | (1 << (sparkParser.OPTIONS - 160)) | (1 << (sparkParser.UNSET - 160)) | (1 << (sparkParser.TBLPROPERTIES - 160)) | (1 << (sparkParser.DBPROPERTIES - 160)) | (1 << (sparkParser.BUCKETS - 160)) | (1 << (sparkParser.SKEWED - 160)) | (1 << (sparkParser.STORED - 160)) | (1 << (sparkParser.DIRECTORIES - 160)) | (1 << (sparkParser.LOCATION - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (sparkParser.EXCHANGE - 192)) | (1 << (sparkParser.ARCHIVE - 192)) | (1 << (sparkParser.UNARCHIVE - 192)) | (1 << (sparkParser.FILEFORMAT - 192)) | (1 << (sparkParser.TOUCH - 192)) | (1 << (sparkParser.COMPACT - 192)) | (1 << (sparkParser.CONCATENATE - 192)) | (1 << (sparkParser.CHANGE - 192)) | (1 << (sparkParser.CASCADE - 192)) | (1 << (sparkParser.RESTRICT - 192)) | (1 << (sparkParser.CLUSTERED - 192)) | (1 << (sparkParser.SORTED - 192)) | (1 << (sparkParser.PURGE - 192)) | (1 << (sparkParser.INPUTFORMAT - 192)) | (1 << (sparkParser.OUTPUTFORMAT - 192)) | (1 << (sparkParser.DATABASE - 192)) | (1 << (sparkParser.DATABASES - 192)) | (1 << (sparkParser.DFS - 192)) | (1 << (sparkParser.TRUNCATE - 192)) | (1 << (sparkParser.ANALYZE - 192)) | (1 << (sparkParser.COMPUTE - 192)) | (1 << (sparkParser.LIST - 192)) | (1 << (sparkParser.STATISTICS - 192)) | (1 << (sparkParser.PARTITIONED - 192)) | (1 << (sparkParser.EXTERNAL - 192)) | (1 << (sparkParser.DEFINED - 192)) | (1 << (sparkParser.REVOKE - 192)) | (1 << (sparkParser.GRANT - 192)) | (1 << (sparkParser.LOCK - 192)) | (1 << (sparkParser.UNLOCK - 192)) | (1 << (sparkParser.MSCK - 192)) | (1 << (sparkParser.REPAIR - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (sparkParser.RECOVER - 224)) | (1 << (sparkParser.EXPORT - 224)) | (1 << (sparkParser.IMPORT - 224)) | (1 << (sparkParser.LOAD - 224)) | (1 << (sparkParser.ROLE - 224)) | (1 << (sparkParser.ROLES - 224)) | (1 << (sparkParser.COMPACTIONS - 224)) | (1 << (sparkParser.PRINCIPALS - 224)) | (1 << (sparkParser.TRANSACTIONS - 224)) | (1 << (sparkParser.INDEX - 224)) | (1 << (sparkParser.INDEXES - 224)) | (1 << (sparkParser.LOCKS - 224)) | (1 << (sparkParser.OPTION - 224)) | (1 << (sparkParser.ANTI - 224)) | (1 << (sparkParser.LOCAL - 224)) | (1 << (sparkParser.INPATH - 224)) | (1 << (sparkParser.STRING - 224)) | (1 << (sparkParser.BIGINT_LITERAL - 224)) | (1 << (sparkParser.SMALLINT_LITERAL - 224)) | (1 << (sparkParser.TINYINT_LITERAL - 224)) | (1 << (sparkParser.INTEGER_VALUE - 224)) | (1 << (sparkParser.DECIMAL_VALUE - 224)) | (1 << (sparkParser.DOUBLE_LITERAL - 224)) | (1 << (sparkParser.BIGDECIMAL_LITERAL - 224)) | (1 << (sparkParser.IDENTIFIER - 224)) | (1 << (sparkParser.BACKQUOTED_IDENTIFIER - 224)))) !== 0)) {
                    this.state = 2054;
                    localctx._namedExpression = this.namedExpression();
                    localctx.argument.push(localctx._namedExpression);
                    this.state = 2059;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === sparkParser.T__2) {
                        this.state = 2055;
                        this.match(sparkParser.T__2);
                        this.state = 2056;
                        localctx._namedExpression = this.namedExpression();
                        localctx.argument.push(localctx._namedExpression);
                        this.state = 2061;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                }
                this.state = 2064;
                this.match(sparkParser.T__1);
                break;
            case 5:
                localctx = new FirstContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 2065;
                this.match(sparkParser.FIRST);
                this.state = 2066;
                this.match(sparkParser.T__0);
                this.state = 2067;
                this.expression();
                this.state = 2070;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.IGNORE) {
                    this.state = 2068;
                    this.match(sparkParser.IGNORE);
                    this.state = 2069;
                    this.match(sparkParser.NULLS);
                }
                this.state = 2072;
                this.match(sparkParser.T__1);
                break;
            case 6:
                localctx = new LastContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 2074;
                this.match(sparkParser.LAST);
                this.state = 2075;
                this.match(sparkParser.T__0);
                this.state = 2076;
                this.expression();
                this.state = 2079;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.IGNORE) {
                    this.state = 2077;
                    this.match(sparkParser.IGNORE);
                    this.state = 2078;
                    this.match(sparkParser.NULLS);
                }
                this.state = 2081;
                this.match(sparkParser.T__1);
                break;
            case 7:
                localctx = new PositionContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 2083;
                this.match(sparkParser.POSITION);
                this.state = 2084;
                this.match(sparkParser.T__0);
                this.state = 2085;
                localctx.substr = this.valueExpression(0);
                this.state = 2086;
                this.match(sparkParser.IN);
                this.state = 2087;
                localctx.str = this.valueExpression(0);
                this.state = 2088;
                this.match(sparkParser.T__1);
                break;
            case 8:
                localctx = new ConstantDefaultContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 2090;
                this.constant();
                break;
            case 9:
                localctx = new StarContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 2091;
                this.match(sparkParser.ASTERISK);
                break;
            case 10:
                localctx = new StarContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 2092;
                this.qualifiedName();
                this.state = 2093;
                this.match(sparkParser.T__3);
                this.state = 2094;
                this.match(sparkParser.ASTERISK);
                break;
            case 11:
                localctx = new RowConstructorContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 2096;
                this.match(sparkParser.T__0);
                this.state = 2097;
                this.namedExpression();
                this.state = 2100;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 2098;
                    this.match(sparkParser.T__2);
                    this.state = 2099;
                    this.namedExpression();
                    this.state = 2102;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === sparkParser.T__2);
                this.state = 2104;
                this.match(sparkParser.T__1);
                break;
            case 12:
                localctx = new SubqueryExpressionContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 2106;
                this.match(sparkParser.T__0);
                this.state = 2107;
                this.query();
                this.state = 2108;
                this.match(sparkParser.T__1);
                break;
            case 13:
                localctx = new FunctionCallContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 2110;
                this.qualifiedName();
                this.state = 2111;
                this.match(sparkParser.T__0);
                this.state = 2123;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << sparkParser.T__0) | (1 << sparkParser.SELECT) | (1 << sparkParser.FROM) | (1 << sparkParser.ADD) | (1 << sparkParser.AS) | (1 << sparkParser.ALL) | (1 << sparkParser.ANY) | (1 << sparkParser.DISTINCT) | (1 << sparkParser.WHERE) | (1 << sparkParser.GROUP) | (1 << sparkParser.BY) | (1 << sparkParser.GROUPING) | (1 << sparkParser.SETS) | (1 << sparkParser.CUBE) | (1 << sparkParser.ROLLUP) | (1 << sparkParser.ORDER) | (1 << sparkParser.HAVING) | (1 << sparkParser.LIMIT) | (1 << sparkParser.AT) | (1 << sparkParser.OR) | (1 << sparkParser.AND) | (1 << sparkParser.IN))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (sparkParser.NOT - 32)) | (1 << (sparkParser.NO - 32)) | (1 << (sparkParser.EXISTS - 32)) | (1 << (sparkParser.BETWEEN - 32)) | (1 << (sparkParser.LIKE - 32)) | (1 << (sparkParser.RLIKE - 32)) | (1 << (sparkParser.IS - 32)) | (1 << (sparkParser.NULL - 32)) | (1 << (sparkParser.TRUE - 32)) | (1 << (sparkParser.FALSE - 32)) | (1 << (sparkParser.NULLS - 32)) | (1 << (sparkParser.ASC - 32)) | (1 << (sparkParser.DESC - 32)) | (1 << (sparkParser.FOR - 32)) | (1 << (sparkParser.INTERVAL - 32)) | (1 << (sparkParser.CASE - 32)) | (1 << (sparkParser.WHEN - 32)) | (1 << (sparkParser.THEN - 32)) | (1 << (sparkParser.ELSE - 32)) | (1 << (sparkParser.END - 32)) | (1 << (sparkParser.JOIN - 32)) | (1 << (sparkParser.CROSS - 32)) | (1 << (sparkParser.OUTER - 32)) | (1 << (sparkParser.INNER - 32)) | (1 << (sparkParser.LEFT - 32)) | (1 << (sparkParser.SEMI - 32)) | (1 << (sparkParser.RIGHT - 32)) | (1 << (sparkParser.FULL - 32)) | (1 << (sparkParser.NATURAL - 32)) | (1 << (sparkParser.ON - 32)) | (1 << (sparkParser.PIVOT - 32)) | (1 << (sparkParser.LATERAL - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (sparkParser.WINDOW - 64)) | (1 << (sparkParser.OVER - 64)) | (1 << (sparkParser.PARTITION - 64)) | (1 << (sparkParser.RANGE - 64)) | (1 << (sparkParser.ROWS - 64)) | (1 << (sparkParser.UNBOUNDED - 64)) | (1 << (sparkParser.PRECEDING - 64)) | (1 << (sparkParser.FOLLOWING - 64)) | (1 << (sparkParser.CURRENT - 64)) | (1 << (sparkParser.FIRST - 64)) | (1 << (sparkParser.AFTER - 64)) | (1 << (sparkParser.LAST - 64)) | (1 << (sparkParser.ROW - 64)) | (1 << (sparkParser.WITH - 64)) | (1 << (sparkParser.VALUES - 64)) | (1 << (sparkParser.CREATE - 64)) | (1 << (sparkParser.TABLE - 64)) | (1 << (sparkParser.DIRECTORY - 64)) | (1 << (sparkParser.VIEW - 64)) | (1 << (sparkParser.REPLACE - 64)) | (1 << (sparkParser.INSERT - 64)) | (1 << (sparkParser.DELETE - 64)) | (1 << (sparkParser.INTO - 64)) | (1 << (sparkParser.DESCRIBE - 64)) | (1 << (sparkParser.EXPLAIN - 64)) | (1 << (sparkParser.FORMAT - 64)) | (1 << (sparkParser.LOGICAL - 64)) | (1 << (sparkParser.CODEGEN - 64)) | (1 << (sparkParser.COST - 64)) | (1 << (sparkParser.CAST - 64)) | (1 << (sparkParser.SHOW - 64)) | (1 << (sparkParser.TABLES - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (sparkParser.COLUMNS - 96)) | (1 << (sparkParser.COLUMN - 96)) | (1 << (sparkParser.USE - 96)) | (1 << (sparkParser.PARTITIONS - 96)) | (1 << (sparkParser.FUNCTIONS - 96)) | (1 << (sparkParser.DROP - 96)) | (1 << (sparkParser.UNION - 96)) | (1 << (sparkParser.EXCEPT - 96)) | (1 << (sparkParser.SETMINUS - 96)) | (1 << (sparkParser.INTERSECT - 96)) | (1 << (sparkParser.TO - 96)) | (1 << (sparkParser.TABLESAMPLE - 96)) | (1 << (sparkParser.STRATIFY - 96)) | (1 << (sparkParser.ALTER - 96)) | (1 << (sparkParser.RENAME - 96)) | (1 << (sparkParser.ARRAY - 96)) | (1 << (sparkParser.MAP - 96)) | (1 << (sparkParser.STRUCT - 96)) | (1 << (sparkParser.COMMENT - 96)) | (1 << (sparkParser.SET - 96)) | (1 << (sparkParser.RESET - 96)) | (1 << (sparkParser.DATA - 96)) | (1 << (sparkParser.START - 96)) | (1 << (sparkParser.TRANSACTION - 96)) | (1 << (sparkParser.COMMIT - 96)) | (1 << (sparkParser.ROLLBACK - 96)) | (1 << (sparkParser.MACRO - 96)) | (1 << (sparkParser.IGNORE - 96)) | (1 << (sparkParser.BOTH - 96)) | (1 << (sparkParser.LEADING - 96)) | (1 << (sparkParser.TRAILING - 96)) | (1 << (sparkParser.IF - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (sparkParser.POSITION - 128)) | (1 << (sparkParser.EXTRACT - 128)) | (1 << (sparkParser.PLUS - 128)) | (1 << (sparkParser.MINUS - 128)) | (1 << (sparkParser.ASTERISK - 128)) | (1 << (sparkParser.DIV - 128)) | (1 << (sparkParser.TILDE - 128)) | (1 << (sparkParser.PERCENTLIT - 128)) | (1 << (sparkParser.BUCKET - 128)) | (1 << (sparkParser.OUT - 128)) | (1 << (sparkParser.OF - 128)) | (1 << (sparkParser.SORT - 128)) | (1 << (sparkParser.CLUSTER - 128)) | (1 << (sparkParser.DISTRIBUTE - 128)) | (1 << (sparkParser.OVERWRITE - 128)) | (1 << (sparkParser.TRANSFORM - 128)) | (1 << (sparkParser.REDUCE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (sparkParser.SERDE - 160)) | (1 << (sparkParser.SERDEPROPERTIES - 160)) | (1 << (sparkParser.RECORDREADER - 160)) | (1 << (sparkParser.RECORDWRITER - 160)) | (1 << (sparkParser.DELIMITED - 160)) | (1 << (sparkParser.FIELDS - 160)) | (1 << (sparkParser.TERMINATED - 160)) | (1 << (sparkParser.COLLECTION - 160)) | (1 << (sparkParser.ITEMS - 160)) | (1 << (sparkParser.KEYS - 160)) | (1 << (sparkParser.ESCAPED - 160)) | (1 << (sparkParser.LINES - 160)) | (1 << (sparkParser.SEPARATED - 160)) | (1 << (sparkParser.FUNCTION - 160)) | (1 << (sparkParser.EXTENDED - 160)) | (1 << (sparkParser.REFRESH - 160)) | (1 << (sparkParser.CLEAR - 160)) | (1 << (sparkParser.CACHE - 160)) | (1 << (sparkParser.UNCACHE - 160)) | (1 << (sparkParser.LAZY - 160)) | (1 << (sparkParser.FORMATTED - 160)) | (1 << (sparkParser.GLOBAL - 160)) | (1 << (sparkParser.TEMPORARY - 160)) | (1 << (sparkParser.OPTIONS - 160)) | (1 << (sparkParser.UNSET - 160)) | (1 << (sparkParser.TBLPROPERTIES - 160)) | (1 << (sparkParser.DBPROPERTIES - 160)) | (1 << (sparkParser.BUCKETS - 160)) | (1 << (sparkParser.SKEWED - 160)) | (1 << (sparkParser.STORED - 160)) | (1 << (sparkParser.DIRECTORIES - 160)) | (1 << (sparkParser.LOCATION - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (sparkParser.EXCHANGE - 192)) | (1 << (sparkParser.ARCHIVE - 192)) | (1 << (sparkParser.UNARCHIVE - 192)) | (1 << (sparkParser.FILEFORMAT - 192)) | (1 << (sparkParser.TOUCH - 192)) | (1 << (sparkParser.COMPACT - 192)) | (1 << (sparkParser.CONCATENATE - 192)) | (1 << (sparkParser.CHANGE - 192)) | (1 << (sparkParser.CASCADE - 192)) | (1 << (sparkParser.RESTRICT - 192)) | (1 << (sparkParser.CLUSTERED - 192)) | (1 << (sparkParser.SORTED - 192)) | (1 << (sparkParser.PURGE - 192)) | (1 << (sparkParser.INPUTFORMAT - 192)) | (1 << (sparkParser.OUTPUTFORMAT - 192)) | (1 << (sparkParser.DATABASE - 192)) | (1 << (sparkParser.DATABASES - 192)) | (1 << (sparkParser.DFS - 192)) | (1 << (sparkParser.TRUNCATE - 192)) | (1 << (sparkParser.ANALYZE - 192)) | (1 << (sparkParser.COMPUTE - 192)) | (1 << (sparkParser.LIST - 192)) | (1 << (sparkParser.STATISTICS - 192)) | (1 << (sparkParser.PARTITIONED - 192)) | (1 << (sparkParser.EXTERNAL - 192)) | (1 << (sparkParser.DEFINED - 192)) | (1 << (sparkParser.REVOKE - 192)) | (1 << (sparkParser.GRANT - 192)) | (1 << (sparkParser.LOCK - 192)) | (1 << (sparkParser.UNLOCK - 192)) | (1 << (sparkParser.MSCK - 192)) | (1 << (sparkParser.REPAIR - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (sparkParser.RECOVER - 224)) | (1 << (sparkParser.EXPORT - 224)) | (1 << (sparkParser.IMPORT - 224)) | (1 << (sparkParser.LOAD - 224)) | (1 << (sparkParser.ROLE - 224)) | (1 << (sparkParser.ROLES - 224)) | (1 << (sparkParser.COMPACTIONS - 224)) | (1 << (sparkParser.PRINCIPALS - 224)) | (1 << (sparkParser.TRANSACTIONS - 224)) | (1 << (sparkParser.INDEX - 224)) | (1 << (sparkParser.INDEXES - 224)) | (1 << (sparkParser.LOCKS - 224)) | (1 << (sparkParser.OPTION - 224)) | (1 << (sparkParser.ANTI - 224)) | (1 << (sparkParser.LOCAL - 224)) | (1 << (sparkParser.INPATH - 224)) | (1 << (sparkParser.STRING - 224)) | (1 << (sparkParser.BIGINT_LITERAL - 224)) | (1 << (sparkParser.SMALLINT_LITERAL - 224)) | (1 << (sparkParser.TINYINT_LITERAL - 224)) | (1 << (sparkParser.INTEGER_VALUE - 224)) | (1 << (sparkParser.DECIMAL_VALUE - 224)) | (1 << (sparkParser.DOUBLE_LITERAL - 224)) | (1 << (sparkParser.BIGDECIMAL_LITERAL - 224)) | (1 << (sparkParser.IDENTIFIER - 224)) | (1 << (sparkParser.BACKQUOTED_IDENTIFIER - 224)))) !== 0)) {
                    this.state = 2113;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 280, this._ctx);
                    if (la_ === 1) {
                        this.state = 2112;
                        this.setQuantifier();
                    }
                    this.state = 2115;
                    localctx._expression = this.expression();
                    localctx.argument.push(localctx._expression);
                    this.state = 2120;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === sparkParser.T__2) {
                        this.state = 2116;
                        this.match(sparkParser.T__2);
                        this.state = 2117;
                        localctx._expression = this.expression();
                        localctx.argument.push(localctx._expression);
                        this.state = 2122;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                }
                this.state = 2125;
                this.match(sparkParser.T__1);
                this.state = 2128;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 283, this._ctx);
                if (la_ === 1) {
                    this.state = 2126;
                    this.match(sparkParser.OVER);
                    this.state = 2127;
                    this.windowSpec();
                }
                break;
            case 14:
                localctx = new FunctionCallContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 2130;
                this.qualifiedName();
                this.state = 2131;
                this.match(sparkParser.T__0);
                this.state = 2132;
                localctx.trimOption = this._input.LT(1);
                _la = this._input.LA(1);
                if (!(((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (sparkParser.BOTH - 124)) | (1 << (sparkParser.LEADING - 124)) | (1 << (sparkParser.TRAILING - 124)))) !== 0))) {
                    localctx.trimOption = this._errHandler.recoverInline(this);
                }
                else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2133;
                localctx._expression = this.expression();
                localctx.argument.push(localctx._expression);
                this.state = 2134;
                this.match(sparkParser.FROM);
                this.state = 2135;
                localctx._expression = this.expression();
                localctx.argument.push(localctx._expression);
                this.state = 2136;
                this.match(sparkParser.T__1);
                break;
            case 15:
                localctx = new LambdaContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 2138;
                this.match(sparkParser.IDENTIFIER);
                this.state = 2139;
                this.match(sparkParser.T__6);
                this.state = 2140;
                this.expression();
                break;
            case 16:
                localctx = new LambdaContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 2141;
                this.match(sparkParser.T__0);
                this.state = 2142;
                this.match(sparkParser.IDENTIFIER);
                this.state = 2145;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 2143;
                    this.match(sparkParser.T__2);
                    this.state = 2144;
                    this.match(sparkParser.IDENTIFIER);
                    this.state = 2147;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === sparkParser.T__2);
                this.state = 2149;
                this.match(sparkParser.T__1);
                this.state = 2150;
                this.match(sparkParser.T__6);
                this.state = 2151;
                this.expression();
                break;
            case 17:
                localctx = new ColumnReferenceContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 2152;
                this.identifier();
                break;
            case 18:
                localctx = new ParenthesizedExpressionContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 2153;
                this.match(sparkParser.T__0);
                this.state = 2154;
                this.expression();
                this.state = 2155;
                this.match(sparkParser.T__1);
                break;
            case 19:
                localctx = new ExtractContext(this, localctx);
                this._ctx = localctx;
                _prevctx = localctx;
                this.state = 2157;
                this.match(sparkParser.EXTRACT);
                this.state = 2158;
                this.match(sparkParser.T__0);
                this.state = 2159;
                localctx.field = this.identifier();
                this.state = 2160;
                this.match(sparkParser.FROM);
                this.state = 2161;
                localctx.source = this.valueExpression(0);
                this.state = 2162;
                this.match(sparkParser.T__1);
                break;
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 2176;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 287, this._ctx);
        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
                if (this._parseListeners !== null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 2174;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 286, this._ctx);
                switch (la_) {
                    case 1:
                        localctx = new SubscriptContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
                        localctx.value = _prevctx;
                        this.pushNewRecursionContext(localctx, _startState, sparkParser.RULE_primaryExpression);
                        this.state = 2166;
                        if (!(this.precpred(this._ctx, 5))) {
                            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                        }
                        this.state = 2167;
                        this.match(sparkParser.T__7);
                        this.state = 2168;
                        localctx.index = this.valueExpression(0);
                        this.state = 2169;
                        this.match(sparkParser.T__8);
                        break;
                    case 2:
                        localctx = new DereferenceContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
                        localctx.base = _prevctx;
                        this.pushNewRecursionContext(localctx, _startState, sparkParser.RULE_primaryExpression);
                        this.state = 2171;
                        if (!(this.precpred(this._ctx, 3))) {
                            throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                        }
                        this.state = 2172;
                        this.match(sparkParser.T__3);
                        this.state = 2173;
                        localctx.fieldName = this.identifier();
                        break;
                }
            }
            this.state = 2178;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 287, this._ctx);
        }
    }
    catch (error) {
        if (error instanceof antlr4.error.RecognitionException) {
            localctx.exception = error;
            this._errHandler.reportError(this, error);
            this._errHandler.recover(this, error);
        }
        else {
            throw error;
        }
    }
    finally {
        this.unrollRecursionContexts(_parentctx);
    }
    return localctx;
};
function ConstantContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_constant;
    return this;
}
ConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantContext.prototype.constructor = ConstantContext;
ConstantContext.prototype.copyFrom = function (ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};
function NullLiteralContext(parser, ctx) {
    ConstantContext.call(this, parser);
    ConstantContext.prototype.copyFrom.call(this, ctx);
    return this;
}
NullLiteralContext.prototype = Object.create(ConstantContext.prototype);
NullLiteralContext.prototype.constructor = NullLiteralContext;
sparkParser.NullLiteralContext = NullLiteralContext;
NullLiteralContext.prototype.NULL = function () {
    return this.getToken(sparkParser.NULL, 0);
};
NullLiteralContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterNullLiteral(this);
    }
};
NullLiteralContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitNullLiteral(this);
    }
};
NullLiteralContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitNullLiteral(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function StringLiteralContext(parser, ctx) {
    ConstantContext.call(this, parser);
    ConstantContext.prototype.copyFrom.call(this, ctx);
    return this;
}
StringLiteralContext.prototype = Object.create(ConstantContext.prototype);
StringLiteralContext.prototype.constructor = StringLiteralContext;
sparkParser.StringLiteralContext = StringLiteralContext;
StringLiteralContext.prototype.STRING = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(sparkParser.STRING);
    }
    else {
        return this.getToken(sparkParser.STRING, i);
    }
};
StringLiteralContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterStringLiteral(this);
    }
};
StringLiteralContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitStringLiteral(this);
    }
};
StringLiteralContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitStringLiteral(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function TypeConstructorContext(parser, ctx) {
    ConstantContext.call(this, parser);
    ConstantContext.prototype.copyFrom.call(this, ctx);
    return this;
}
TypeConstructorContext.prototype = Object.create(ConstantContext.prototype);
TypeConstructorContext.prototype.constructor = TypeConstructorContext;
sparkParser.TypeConstructorContext = TypeConstructorContext;
TypeConstructorContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};
TypeConstructorContext.prototype.STRING = function () {
    return this.getToken(sparkParser.STRING, 0);
};
TypeConstructorContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterTypeConstructor(this);
    }
};
TypeConstructorContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitTypeConstructor(this);
    }
};
TypeConstructorContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitTypeConstructor(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function IntervalLiteralContext(parser, ctx) {
    ConstantContext.call(this, parser);
    ConstantContext.prototype.copyFrom.call(this, ctx);
    return this;
}
IntervalLiteralContext.prototype = Object.create(ConstantContext.prototype);
IntervalLiteralContext.prototype.constructor = IntervalLiteralContext;
sparkParser.IntervalLiteralContext = IntervalLiteralContext;
IntervalLiteralContext.prototype.interval = function () {
    return this.getTypedRuleContext(IntervalContext, 0);
};
IntervalLiteralContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterIntervalLiteral(this);
    }
};
IntervalLiteralContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitIntervalLiteral(this);
    }
};
IntervalLiteralContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitIntervalLiteral(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function NumericLiteralContext(parser, ctx) {
    ConstantContext.call(this, parser);
    ConstantContext.prototype.copyFrom.call(this, ctx);
    return this;
}
NumericLiteralContext.prototype = Object.create(ConstantContext.prototype);
NumericLiteralContext.prototype.constructor = NumericLiteralContext;
sparkParser.NumericLiteralContext = NumericLiteralContext;
NumericLiteralContext.prototype.number = function () {
    return this.getTypedRuleContext(NumberContext, 0);
};
NumericLiteralContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterNumericLiteral(this);
    }
};
NumericLiteralContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitNumericLiteral(this);
    }
};
NumericLiteralContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitNumericLiteral(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function BooleanLiteralContext(parser, ctx) {
    ConstantContext.call(this, parser);
    ConstantContext.prototype.copyFrom.call(this, ctx);
    return this;
}
BooleanLiteralContext.prototype = Object.create(ConstantContext.prototype);
BooleanLiteralContext.prototype.constructor = BooleanLiteralContext;
sparkParser.BooleanLiteralContext = BooleanLiteralContext;
BooleanLiteralContext.prototype.booleanValue = function () {
    return this.getTypedRuleContext(BooleanValueContext, 0);
};
BooleanLiteralContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterBooleanLiteral(this);
    }
};
BooleanLiteralContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitBooleanLiteral(this);
    }
};
BooleanLiteralContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitBooleanLiteral(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.ConstantContext = ConstantContext;
sparkParser.prototype.constant = function () {
    var localctx = new ConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, sparkParser.RULE_constant);
    try {
        this.state = 2191;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 289, this._ctx);
        switch (la_) {
            case 1:
                localctx = new NullLiteralContext(this, localctx);
                this.enterOuterAlt(localctx, 1);
                this.state = 2179;
                this.match(sparkParser.NULL);
                break;
            case 2:
                localctx = new IntervalLiteralContext(this, localctx);
                this.enterOuterAlt(localctx, 2);
                this.state = 2180;
                this.interval();
                break;
            case 3:
                localctx = new TypeConstructorContext(this, localctx);
                this.enterOuterAlt(localctx, 3);
                this.state = 2181;
                this.identifier();
                this.state = 2182;
                this.match(sparkParser.STRING);
                break;
            case 4:
                localctx = new NumericLiteralContext(this, localctx);
                this.enterOuterAlt(localctx, 4);
                this.state = 2184;
                this.number();
                break;
            case 5:
                localctx = new BooleanLiteralContext(this, localctx);
                this.enterOuterAlt(localctx, 5);
                this.state = 2185;
                this.booleanValue();
                break;
            case 6:
                localctx = new StringLiteralContext(this, localctx);
                this.enterOuterAlt(localctx, 6);
                this.state = 2187;
                this._errHandler.sync(this);
                var _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            this.state = 2186;
                            this.match(sparkParser.STRING);
                            break;
                        default:
                            throw new antlr4.error.NoViableAltException(this);
                    }
                    this.state = 2189;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input, 288, this._ctx);
                } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
                break;
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function ComparisonOperatorContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_comparisonOperator;
    return this;
}
ComparisonOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComparisonOperatorContext.prototype.constructor = ComparisonOperatorContext;
ComparisonOperatorContext.prototype.EQ = function () {
    return this.getToken(sparkParser.EQ, 0);
};
ComparisonOperatorContext.prototype.NEQ = function () {
    return this.getToken(sparkParser.NEQ, 0);
};
ComparisonOperatorContext.prototype.NEQJ = function () {
    return this.getToken(sparkParser.NEQJ, 0);
};
ComparisonOperatorContext.prototype.LT = function () {
    return this.getToken(sparkParser.LT, 0);
};
ComparisonOperatorContext.prototype.LTE = function () {
    return this.getToken(sparkParser.LTE, 0);
};
ComparisonOperatorContext.prototype.GT = function () {
    return this.getToken(sparkParser.GT, 0);
};
ComparisonOperatorContext.prototype.GTE = function () {
    return this.getToken(sparkParser.GTE, 0);
};
ComparisonOperatorContext.prototype.NSEQ = function () {
    return this.getToken(sparkParser.NSEQ, 0);
};
ComparisonOperatorContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterComparisonOperator(this);
    }
};
ComparisonOperatorContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitComparisonOperator(this);
    }
};
ComparisonOperatorContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitComparisonOperator(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.ComparisonOperatorContext = ComparisonOperatorContext;
sparkParser.prototype.comparisonOperator = function () {
    var localctx = new ComparisonOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, sparkParser.RULE_comparisonOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2193;
        _la = this._input.LA(1);
        if (!(((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (sparkParser.EQ - 130)) | (1 << (sparkParser.NSEQ - 130)) | (1 << (sparkParser.NEQ - 130)) | (1 << (sparkParser.NEQJ - 130)) | (1 << (sparkParser.LT - 130)) | (1 << (sparkParser.LTE - 130)) | (1 << (sparkParser.GT - 130)) | (1 << (sparkParser.GTE - 130)))) !== 0))) {
            this._errHandler.recoverInline(this);
        }
        else {
            this._errHandler.reportMatch(this);
            this.consume();
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function ArithmeticOperatorContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_arithmeticOperator;
    return this;
}
ArithmeticOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArithmeticOperatorContext.prototype.constructor = ArithmeticOperatorContext;
ArithmeticOperatorContext.prototype.PLUS = function () {
    return this.getToken(sparkParser.PLUS, 0);
};
ArithmeticOperatorContext.prototype.MINUS = function () {
    return this.getToken(sparkParser.MINUS, 0);
};
ArithmeticOperatorContext.prototype.ASTERISK = function () {
    return this.getToken(sparkParser.ASTERISK, 0);
};
ArithmeticOperatorContext.prototype.SLASH = function () {
    return this.getToken(sparkParser.SLASH, 0);
};
ArithmeticOperatorContext.prototype.PERCENT = function () {
    return this.getToken(sparkParser.PERCENT, 0);
};
ArithmeticOperatorContext.prototype.DIV = function () {
    return this.getToken(sparkParser.DIV, 0);
};
ArithmeticOperatorContext.prototype.TILDE = function () {
    return this.getToken(sparkParser.TILDE, 0);
};
ArithmeticOperatorContext.prototype.AMPERSAND = function () {
    return this.getToken(sparkParser.AMPERSAND, 0);
};
ArithmeticOperatorContext.prototype.PIPE = function () {
    return this.getToken(sparkParser.PIPE, 0);
};
ArithmeticOperatorContext.prototype.CONCAT_PIPE = function () {
    return this.getToken(sparkParser.CONCAT_PIPE, 0);
};
ArithmeticOperatorContext.prototype.HAT = function () {
    return this.getToken(sparkParser.HAT, 0);
};
ArithmeticOperatorContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterArithmeticOperator(this);
    }
};
ArithmeticOperatorContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitArithmeticOperator(this);
    }
};
ArithmeticOperatorContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitArithmeticOperator(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.ArithmeticOperatorContext = ArithmeticOperatorContext;
sparkParser.prototype.arithmeticOperator = function () {
    var localctx = new ArithmeticOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, sparkParser.RULE_arithmeticOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2195;
        _la = this._input.LA(1);
        if (!(((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (sparkParser.PLUS - 138)) | (1 << (sparkParser.MINUS - 138)) | (1 << (sparkParser.ASTERISK - 138)) | (1 << (sparkParser.SLASH - 138)) | (1 << (sparkParser.PERCENT - 138)) | (1 << (sparkParser.DIV - 138)) | (1 << (sparkParser.TILDE - 138)) | (1 << (sparkParser.AMPERSAND - 138)) | (1 << (sparkParser.PIPE - 138)) | (1 << (sparkParser.CONCAT_PIPE - 138)) | (1 << (sparkParser.HAT - 138)))) !== 0))) {
            this._errHandler.recoverInline(this);
        }
        else {
            this._errHandler.reportMatch(this);
            this.consume();
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function PredicateOperatorContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_predicateOperator;
    return this;
}
PredicateOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PredicateOperatorContext.prototype.constructor = PredicateOperatorContext;
PredicateOperatorContext.prototype.OR = function () {
    return this.getToken(sparkParser.OR, 0);
};
PredicateOperatorContext.prototype.AND = function () {
    return this.getToken(sparkParser.AND, 0);
};
PredicateOperatorContext.prototype.IN = function () {
    return this.getToken(sparkParser.IN, 0);
};
PredicateOperatorContext.prototype.NOT = function () {
    return this.getToken(sparkParser.NOT, 0);
};
PredicateOperatorContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterPredicateOperator(this);
    }
};
PredicateOperatorContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitPredicateOperator(this);
    }
};
PredicateOperatorContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitPredicateOperator(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.PredicateOperatorContext = PredicateOperatorContext;
sparkParser.prototype.predicateOperator = function () {
    var localctx = new PredicateOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, sparkParser.RULE_predicateOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2197;
        _la = this._input.LA(1);
        if (!(((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (sparkParser.OR - 29)) | (1 << (sparkParser.AND - 29)) | (1 << (sparkParser.IN - 29)) | (1 << (sparkParser.NOT - 29)))) !== 0))) {
            this._errHandler.recoverInline(this);
        }
        else {
            this._errHandler.reportMatch(this);
            this.consume();
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function BooleanValueContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_booleanValue;
    return this;
}
BooleanValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanValueContext.prototype.constructor = BooleanValueContext;
BooleanValueContext.prototype.TRUE = function () {
    return this.getToken(sparkParser.TRUE, 0);
};
BooleanValueContext.prototype.FALSE = function () {
    return this.getToken(sparkParser.FALSE, 0);
};
BooleanValueContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterBooleanValue(this);
    }
};
BooleanValueContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitBooleanValue(this);
    }
};
BooleanValueContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitBooleanValue(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.BooleanValueContext = BooleanValueContext;
sparkParser.prototype.booleanValue = function () {
    var localctx = new BooleanValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, sparkParser.RULE_booleanValue);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2199;
        _la = this._input.LA(1);
        if (!(_la === sparkParser.TRUE || _la === sparkParser.FALSE)) {
            this._errHandler.recoverInline(this);
        }
        else {
            this._errHandler.reportMatch(this);
            this.consume();
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function IntervalContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_interval;
    return this;
}
IntervalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntervalContext.prototype.constructor = IntervalContext;
IntervalContext.prototype.INTERVAL = function () {
    return this.getToken(sparkParser.INTERVAL, 0);
};
IntervalContext.prototype.intervalField = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(IntervalFieldContext);
    }
    else {
        return this.getTypedRuleContext(IntervalFieldContext, i);
    }
};
IntervalContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterInterval(this);
    }
};
IntervalContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitInterval(this);
    }
};
IntervalContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitInterval(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.IntervalContext = IntervalContext;
sparkParser.prototype.interval = function () {
    var localctx = new IntervalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, sparkParser.RULE_interval);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2201;
        this.match(sparkParser.INTERVAL);
        this.state = 2205;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 290, this._ctx);
        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
                this.state = 2202;
                this.intervalField();
            }
            this.state = 2207;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 290, this._ctx);
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function IntervalFieldContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_intervalField;
    this.value = null; // IntervalValueContext
    this.unit = null; // IdentifierContext
    this.to = null; // IdentifierContext
    return this;
}
IntervalFieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntervalFieldContext.prototype.constructor = IntervalFieldContext;
IntervalFieldContext.prototype.intervalValue = function () {
    return this.getTypedRuleContext(IntervalValueContext, 0);
};
IntervalFieldContext.prototype.identifier = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(IdentifierContext);
    }
    else {
        return this.getTypedRuleContext(IdentifierContext, i);
    }
};
IntervalFieldContext.prototype.TO = function () {
    return this.getToken(sparkParser.TO, 0);
};
IntervalFieldContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterIntervalField(this);
    }
};
IntervalFieldContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitIntervalField(this);
    }
};
IntervalFieldContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitIntervalField(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.IntervalFieldContext = IntervalFieldContext;
sparkParser.prototype.intervalField = function () {
    var localctx = new IntervalFieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, sparkParser.RULE_intervalField);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2208;
        localctx.value = this.intervalValue();
        this.state = 2209;
        localctx.unit = this.identifier();
        this.state = 2212;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 291, this._ctx);
        if (la_ === 1) {
            this.state = 2210;
            this.match(sparkParser.TO);
            this.state = 2211;
            localctx.to = this.identifier();
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function IntervalValueContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_intervalValue;
    return this;
}
IntervalValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntervalValueContext.prototype.constructor = IntervalValueContext;
IntervalValueContext.prototype.INTEGER_VALUE = function () {
    return this.getToken(sparkParser.INTEGER_VALUE, 0);
};
IntervalValueContext.prototype.DECIMAL_VALUE = function () {
    return this.getToken(sparkParser.DECIMAL_VALUE, 0);
};
IntervalValueContext.prototype.PLUS = function () {
    return this.getToken(sparkParser.PLUS, 0);
};
IntervalValueContext.prototype.MINUS = function () {
    return this.getToken(sparkParser.MINUS, 0);
};
IntervalValueContext.prototype.STRING = function () {
    return this.getToken(sparkParser.STRING, 0);
};
IntervalValueContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterIntervalValue(this);
    }
};
IntervalValueContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitIntervalValue(this);
    }
};
IntervalValueContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitIntervalValue(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.IntervalValueContext = IntervalValueContext;
sparkParser.prototype.intervalValue = function () {
    var localctx = new IntervalValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, sparkParser.RULE_intervalValue);
    var _la = 0; // Token type
    try {
        this.state = 2219;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
            case sparkParser.PLUS:
            case sparkParser.MINUS:
            case sparkParser.INTEGER_VALUE:
            case sparkParser.DECIMAL_VALUE:
                this.enterOuterAlt(localctx, 1);
                this.state = 2215;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.PLUS || _la === sparkParser.MINUS) {
                    this.state = 2214;
                    _la = this._input.LA(1);
                    if (!(_la === sparkParser.PLUS || _la === sparkParser.MINUS)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }
                this.state = 2217;
                _la = this._input.LA(1);
                if (!(_la === sparkParser.INTEGER_VALUE || _la === sparkParser.DECIMAL_VALUE)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                break;
            case sparkParser.STRING:
                this.enterOuterAlt(localctx, 2);
                this.state = 2218;
                this.match(sparkParser.STRING);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function ColPositionContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_colPosition;
    return this;
}
ColPositionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColPositionContext.prototype.constructor = ColPositionContext;
ColPositionContext.prototype.FIRST = function () {
    return this.getToken(sparkParser.FIRST, 0);
};
ColPositionContext.prototype.AFTER = function () {
    return this.getToken(sparkParser.AFTER, 0);
};
ColPositionContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};
ColPositionContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterColPosition(this);
    }
};
ColPositionContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitColPosition(this);
    }
};
ColPositionContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitColPosition(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.ColPositionContext = ColPositionContext;
sparkParser.prototype.colPosition = function () {
    var localctx = new ColPositionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, sparkParser.RULE_colPosition);
    try {
        this.state = 2224;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
            case sparkParser.FIRST:
                this.enterOuterAlt(localctx, 1);
                this.state = 2221;
                this.match(sparkParser.FIRST);
                break;
            case sparkParser.AFTER:
                this.enterOuterAlt(localctx, 2);
                this.state = 2222;
                this.match(sparkParser.AFTER);
                this.state = 2223;
                this.identifier();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function DataTypeContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_dataType;
    return this;
}
DataTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeContext.prototype.constructor = DataTypeContext;
DataTypeContext.prototype.copyFrom = function (ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};
function ComplexDataTypeContext(parser, ctx) {
    DataTypeContext.call(this, parser);
    this.complex = null; // Token;
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}
ComplexDataTypeContext.prototype = Object.create(DataTypeContext.prototype);
ComplexDataTypeContext.prototype.constructor = ComplexDataTypeContext;
sparkParser.ComplexDataTypeContext = ComplexDataTypeContext;
ComplexDataTypeContext.prototype.dataType = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(DataTypeContext);
    }
    else {
        return this.getTypedRuleContext(DataTypeContext, i);
    }
};
ComplexDataTypeContext.prototype.ARRAY = function () {
    return this.getToken(sparkParser.ARRAY, 0);
};
ComplexDataTypeContext.prototype.MAP = function () {
    return this.getToken(sparkParser.MAP, 0);
};
ComplexDataTypeContext.prototype.STRUCT = function () {
    return this.getToken(sparkParser.STRUCT, 0);
};
ComplexDataTypeContext.prototype.NEQ = function () {
    return this.getToken(sparkParser.NEQ, 0);
};
ComplexDataTypeContext.prototype.complexColTypeList = function () {
    return this.getTypedRuleContext(ComplexColTypeListContext, 0);
};
ComplexDataTypeContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterComplexDataType(this);
    }
};
ComplexDataTypeContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitComplexDataType(this);
    }
};
ComplexDataTypeContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitComplexDataType(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function PrimitiveDataTypeContext(parser, ctx) {
    DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}
PrimitiveDataTypeContext.prototype = Object.create(DataTypeContext.prototype);
PrimitiveDataTypeContext.prototype.constructor = PrimitiveDataTypeContext;
sparkParser.PrimitiveDataTypeContext = PrimitiveDataTypeContext;
PrimitiveDataTypeContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};
PrimitiveDataTypeContext.prototype.INTEGER_VALUE = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(sparkParser.INTEGER_VALUE);
    }
    else {
        return this.getToken(sparkParser.INTEGER_VALUE, i);
    }
};
PrimitiveDataTypeContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterPrimitiveDataType(this);
    }
};
PrimitiveDataTypeContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitPrimitiveDataType(this);
    }
};
PrimitiveDataTypeContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitPrimitiveDataType(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.DataTypeContext = DataTypeContext;
sparkParser.prototype.dataType = function () {
    var localctx = new DataTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, sparkParser.RULE_dataType);
    var _la = 0; // Token type
    try {
        this.state = 2260;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 299, this._ctx);
        switch (la_) {
            case 1:
                localctx = new ComplexDataTypeContext(this, localctx);
                this.enterOuterAlt(localctx, 1);
                this.state = 2226;
                localctx.complex = this.match(sparkParser.ARRAY);
                this.state = 2227;
                this.match(sparkParser.LT);
                this.state = 2228;
                this.dataType();
                this.state = 2229;
                this.match(sparkParser.GT);
                break;
            case 2:
                localctx = new ComplexDataTypeContext(this, localctx);
                this.enterOuterAlt(localctx, 2);
                this.state = 2231;
                localctx.complex = this.match(sparkParser.MAP);
                this.state = 2232;
                this.match(sparkParser.LT);
                this.state = 2233;
                this.dataType();
                this.state = 2234;
                this.match(sparkParser.T__2);
                this.state = 2235;
                this.dataType();
                this.state = 2236;
                this.match(sparkParser.GT);
                break;
            case 3:
                localctx = new ComplexDataTypeContext(this, localctx);
                this.enterOuterAlt(localctx, 3);
                this.state = 2238;
                localctx.complex = this.match(sparkParser.STRUCT);
                this.state = 2245;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case sparkParser.LT:
                        this.state = 2239;
                        this.match(sparkParser.LT);
                        this.state = 2241;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << sparkParser.SELECT) | (1 << sparkParser.FROM) | (1 << sparkParser.ADD) | (1 << sparkParser.AS) | (1 << sparkParser.ALL) | (1 << sparkParser.ANY) | (1 << sparkParser.DISTINCT) | (1 << sparkParser.WHERE) | (1 << sparkParser.GROUP) | (1 << sparkParser.BY) | (1 << sparkParser.GROUPING) | (1 << sparkParser.SETS) | (1 << sparkParser.CUBE) | (1 << sparkParser.ROLLUP) | (1 << sparkParser.ORDER) | (1 << sparkParser.HAVING) | (1 << sparkParser.LIMIT) | (1 << sparkParser.AT) | (1 << sparkParser.OR) | (1 << sparkParser.AND) | (1 << sparkParser.IN))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (sparkParser.NOT - 32)) | (1 << (sparkParser.NO - 32)) | (1 << (sparkParser.EXISTS - 32)) | (1 << (sparkParser.BETWEEN - 32)) | (1 << (sparkParser.LIKE - 32)) | (1 << (sparkParser.RLIKE - 32)) | (1 << (sparkParser.IS - 32)) | (1 << (sparkParser.NULL - 32)) | (1 << (sparkParser.TRUE - 32)) | (1 << (sparkParser.FALSE - 32)) | (1 << (sparkParser.NULLS - 32)) | (1 << (sparkParser.ASC - 32)) | (1 << (sparkParser.DESC - 32)) | (1 << (sparkParser.FOR - 32)) | (1 << (sparkParser.INTERVAL - 32)) | (1 << (sparkParser.CASE - 32)) | (1 << (sparkParser.WHEN - 32)) | (1 << (sparkParser.THEN - 32)) | (1 << (sparkParser.ELSE - 32)) | (1 << (sparkParser.END - 32)) | (1 << (sparkParser.JOIN - 32)) | (1 << (sparkParser.CROSS - 32)) | (1 << (sparkParser.OUTER - 32)) | (1 << (sparkParser.INNER - 32)) | (1 << (sparkParser.LEFT - 32)) | (1 << (sparkParser.SEMI - 32)) | (1 << (sparkParser.RIGHT - 32)) | (1 << (sparkParser.FULL - 32)) | (1 << (sparkParser.NATURAL - 32)) | (1 << (sparkParser.ON - 32)) | (1 << (sparkParser.PIVOT - 32)) | (1 << (sparkParser.LATERAL - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (sparkParser.WINDOW - 64)) | (1 << (sparkParser.OVER - 64)) | (1 << (sparkParser.PARTITION - 64)) | (1 << (sparkParser.RANGE - 64)) | (1 << (sparkParser.ROWS - 64)) | (1 << (sparkParser.UNBOUNDED - 64)) | (1 << (sparkParser.PRECEDING - 64)) | (1 << (sparkParser.FOLLOWING - 64)) | (1 << (sparkParser.CURRENT - 64)) | (1 << (sparkParser.FIRST - 64)) | (1 << (sparkParser.AFTER - 64)) | (1 << (sparkParser.LAST - 64)) | (1 << (sparkParser.ROW - 64)) | (1 << (sparkParser.WITH - 64)) | (1 << (sparkParser.VALUES - 64)) | (1 << (sparkParser.CREATE - 64)) | (1 << (sparkParser.TABLE - 64)) | (1 << (sparkParser.DIRECTORY - 64)) | (1 << (sparkParser.VIEW - 64)) | (1 << (sparkParser.REPLACE - 64)) | (1 << (sparkParser.INSERT - 64)) | (1 << (sparkParser.DELETE - 64)) | (1 << (sparkParser.INTO - 64)) | (1 << (sparkParser.DESCRIBE - 64)) | (1 << (sparkParser.EXPLAIN - 64)) | (1 << (sparkParser.FORMAT - 64)) | (1 << (sparkParser.LOGICAL - 64)) | (1 << (sparkParser.CODEGEN - 64)) | (1 << (sparkParser.COST - 64)) | (1 << (sparkParser.CAST - 64)) | (1 << (sparkParser.SHOW - 64)) | (1 << (sparkParser.TABLES - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (sparkParser.COLUMNS - 96)) | (1 << (sparkParser.COLUMN - 96)) | (1 << (sparkParser.USE - 96)) | (1 << (sparkParser.PARTITIONS - 96)) | (1 << (sparkParser.FUNCTIONS - 96)) | (1 << (sparkParser.DROP - 96)) | (1 << (sparkParser.UNION - 96)) | (1 << (sparkParser.EXCEPT - 96)) | (1 << (sparkParser.SETMINUS - 96)) | (1 << (sparkParser.INTERSECT - 96)) | (1 << (sparkParser.TO - 96)) | (1 << (sparkParser.TABLESAMPLE - 96)) | (1 << (sparkParser.STRATIFY - 96)) | (1 << (sparkParser.ALTER - 96)) | (1 << (sparkParser.RENAME - 96)) | (1 << (sparkParser.ARRAY - 96)) | (1 << (sparkParser.MAP - 96)) | (1 << (sparkParser.STRUCT - 96)) | (1 << (sparkParser.COMMENT - 96)) | (1 << (sparkParser.SET - 96)) | (1 << (sparkParser.RESET - 96)) | (1 << (sparkParser.DATA - 96)) | (1 << (sparkParser.START - 96)) | (1 << (sparkParser.TRANSACTION - 96)) | (1 << (sparkParser.COMMIT - 96)) | (1 << (sparkParser.ROLLBACK - 96)) | (1 << (sparkParser.MACRO - 96)) | (1 << (sparkParser.IGNORE - 96)) | (1 << (sparkParser.BOTH - 96)) | (1 << (sparkParser.LEADING - 96)) | (1 << (sparkParser.TRAILING - 96)) | (1 << (sparkParser.IF - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (sparkParser.POSITION - 128)) | (1 << (sparkParser.EXTRACT - 128)) | (1 << (sparkParser.DIV - 128)) | (1 << (sparkParser.PERCENTLIT - 128)) | (1 << (sparkParser.BUCKET - 128)) | (1 << (sparkParser.OUT - 128)) | (1 << (sparkParser.OF - 128)) | (1 << (sparkParser.SORT - 128)) | (1 << (sparkParser.CLUSTER - 128)) | (1 << (sparkParser.DISTRIBUTE - 128)) | (1 << (sparkParser.OVERWRITE - 128)) | (1 << (sparkParser.TRANSFORM - 128)) | (1 << (sparkParser.REDUCE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (sparkParser.SERDE - 160)) | (1 << (sparkParser.SERDEPROPERTIES - 160)) | (1 << (sparkParser.RECORDREADER - 160)) | (1 << (sparkParser.RECORDWRITER - 160)) | (1 << (sparkParser.DELIMITED - 160)) | (1 << (sparkParser.FIELDS - 160)) | (1 << (sparkParser.TERMINATED - 160)) | (1 << (sparkParser.COLLECTION - 160)) | (1 << (sparkParser.ITEMS - 160)) | (1 << (sparkParser.KEYS - 160)) | (1 << (sparkParser.ESCAPED - 160)) | (1 << (sparkParser.LINES - 160)) | (1 << (sparkParser.SEPARATED - 160)) | (1 << (sparkParser.FUNCTION - 160)) | (1 << (sparkParser.EXTENDED - 160)) | (1 << (sparkParser.REFRESH - 160)) | (1 << (sparkParser.CLEAR - 160)) | (1 << (sparkParser.CACHE - 160)) | (1 << (sparkParser.UNCACHE - 160)) | (1 << (sparkParser.LAZY - 160)) | (1 << (sparkParser.FORMATTED - 160)) | (1 << (sparkParser.GLOBAL - 160)) | (1 << (sparkParser.TEMPORARY - 160)) | (1 << (sparkParser.OPTIONS - 160)) | (1 << (sparkParser.UNSET - 160)) | (1 << (sparkParser.TBLPROPERTIES - 160)) | (1 << (sparkParser.DBPROPERTIES - 160)) | (1 << (sparkParser.BUCKETS - 160)) | (1 << (sparkParser.SKEWED - 160)) | (1 << (sparkParser.STORED - 160)) | (1 << (sparkParser.DIRECTORIES - 160)) | (1 << (sparkParser.LOCATION - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (sparkParser.EXCHANGE - 192)) | (1 << (sparkParser.ARCHIVE - 192)) | (1 << (sparkParser.UNARCHIVE - 192)) | (1 << (sparkParser.FILEFORMAT - 192)) | (1 << (sparkParser.TOUCH - 192)) | (1 << (sparkParser.COMPACT - 192)) | (1 << (sparkParser.CONCATENATE - 192)) | (1 << (sparkParser.CHANGE - 192)) | (1 << (sparkParser.CASCADE - 192)) | (1 << (sparkParser.RESTRICT - 192)) | (1 << (sparkParser.CLUSTERED - 192)) | (1 << (sparkParser.SORTED - 192)) | (1 << (sparkParser.PURGE - 192)) | (1 << (sparkParser.INPUTFORMAT - 192)) | (1 << (sparkParser.OUTPUTFORMAT - 192)) | (1 << (sparkParser.DATABASE - 192)) | (1 << (sparkParser.DATABASES - 192)) | (1 << (sparkParser.DFS - 192)) | (1 << (sparkParser.TRUNCATE - 192)) | (1 << (sparkParser.ANALYZE - 192)) | (1 << (sparkParser.COMPUTE - 192)) | (1 << (sparkParser.LIST - 192)) | (1 << (sparkParser.STATISTICS - 192)) | (1 << (sparkParser.PARTITIONED - 192)) | (1 << (sparkParser.EXTERNAL - 192)) | (1 << (sparkParser.DEFINED - 192)) | (1 << (sparkParser.REVOKE - 192)) | (1 << (sparkParser.GRANT - 192)) | (1 << (sparkParser.LOCK - 192)) | (1 << (sparkParser.UNLOCK - 192)) | (1 << (sparkParser.MSCK - 192)) | (1 << (sparkParser.REPAIR - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (sparkParser.RECOVER - 224)) | (1 << (sparkParser.EXPORT - 224)) | (1 << (sparkParser.IMPORT - 224)) | (1 << (sparkParser.LOAD - 224)) | (1 << (sparkParser.ROLE - 224)) | (1 << (sparkParser.ROLES - 224)) | (1 << (sparkParser.COMPACTIONS - 224)) | (1 << (sparkParser.PRINCIPALS - 224)) | (1 << (sparkParser.TRANSACTIONS - 224)) | (1 << (sparkParser.INDEX - 224)) | (1 << (sparkParser.INDEXES - 224)) | (1 << (sparkParser.LOCKS - 224)) | (1 << (sparkParser.OPTION - 224)) | (1 << (sparkParser.ANTI - 224)) | (1 << (sparkParser.LOCAL - 224)) | (1 << (sparkParser.INPATH - 224)) | (1 << (sparkParser.IDENTIFIER - 224)) | (1 << (sparkParser.BACKQUOTED_IDENTIFIER - 224)))) !== 0)) {
                            this.state = 2240;
                            this.complexColTypeList();
                        }
                        this.state = 2243;
                        this.match(sparkParser.GT);
                        break;
                    case sparkParser.NEQ:
                        this.state = 2244;
                        this.match(sparkParser.NEQ);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                }
                break;
            case 4:
                localctx = new PrimitiveDataTypeContext(this, localctx);
                this.enterOuterAlt(localctx, 4);
                this.state = 2247;
                this.identifier();
                this.state = 2258;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 298, this._ctx);
                if (la_ === 1) {
                    this.state = 2248;
                    this.match(sparkParser.T__0);
                    this.state = 2249;
                    this.match(sparkParser.INTEGER_VALUE);
                    this.state = 2254;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === sparkParser.T__2) {
                        this.state = 2250;
                        this.match(sparkParser.T__2);
                        this.state = 2251;
                        this.match(sparkParser.INTEGER_VALUE);
                        this.state = 2256;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2257;
                    this.match(sparkParser.T__1);
                }
                break;
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function ColTypeListContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_colTypeList;
    return this;
}
ColTypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColTypeListContext.prototype.constructor = ColTypeListContext;
ColTypeListContext.prototype.colType = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(ColTypeContext);
    }
    else {
        return this.getTypedRuleContext(ColTypeContext, i);
    }
};
ColTypeListContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterColTypeList(this);
    }
};
ColTypeListContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitColTypeList(this);
    }
};
ColTypeListContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitColTypeList(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.ColTypeListContext = ColTypeListContext;
sparkParser.prototype.colTypeList = function () {
    var localctx = new ColTypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, sparkParser.RULE_colTypeList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2262;
        this.colType();
        this.state = 2267;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 300, this._ctx);
        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
                this.state = 2263;
                this.match(sparkParser.T__2);
                this.state = 2264;
                this.colType();
            }
            this.state = 2269;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 300, this._ctx);
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function ColTypeContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_colType;
    return this;
}
ColTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColTypeContext.prototype.constructor = ColTypeContext;
ColTypeContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};
ColTypeContext.prototype.dataType = function () {
    return this.getTypedRuleContext(DataTypeContext, 0);
};
ColTypeContext.prototype.COMMENT = function () {
    return this.getToken(sparkParser.COMMENT, 0);
};
ColTypeContext.prototype.STRING = function () {
    return this.getToken(sparkParser.STRING, 0);
};
ColTypeContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterColType(this);
    }
};
ColTypeContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitColType(this);
    }
};
ColTypeContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitColType(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.ColTypeContext = ColTypeContext;
sparkParser.prototype.colType = function () {
    var localctx = new ColTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, sparkParser.RULE_colType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2270;
        this.identifier();
        this.state = 2271;
        this.dataType();
        this.state = 2274;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 301, this._ctx);
        if (la_ === 1) {
            this.state = 2272;
            this.match(sparkParser.COMMENT);
            this.state = 2273;
            this.match(sparkParser.STRING);
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function ComplexColTypeListContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_complexColTypeList;
    return this;
}
ComplexColTypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComplexColTypeListContext.prototype.constructor = ComplexColTypeListContext;
ComplexColTypeListContext.prototype.complexColType = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(ComplexColTypeContext);
    }
    else {
        return this.getTypedRuleContext(ComplexColTypeContext, i);
    }
};
ComplexColTypeListContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterComplexColTypeList(this);
    }
};
ComplexColTypeListContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitComplexColTypeList(this);
    }
};
ComplexColTypeListContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitComplexColTypeList(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.ComplexColTypeListContext = ComplexColTypeListContext;
sparkParser.prototype.complexColTypeList = function () {
    var localctx = new ComplexColTypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, sparkParser.RULE_complexColTypeList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2276;
        this.complexColType();
        this.state = 2281;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === sparkParser.T__2) {
            this.state = 2277;
            this.match(sparkParser.T__2);
            this.state = 2278;
            this.complexColType();
            this.state = 2283;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function ComplexColTypeContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_complexColType;
    return this;
}
ComplexColTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComplexColTypeContext.prototype.constructor = ComplexColTypeContext;
ComplexColTypeContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};
ComplexColTypeContext.prototype.dataType = function () {
    return this.getTypedRuleContext(DataTypeContext, 0);
};
ComplexColTypeContext.prototype.COMMENT = function () {
    return this.getToken(sparkParser.COMMENT, 0);
};
ComplexColTypeContext.prototype.STRING = function () {
    return this.getToken(sparkParser.STRING, 0);
};
ComplexColTypeContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterComplexColType(this);
    }
};
ComplexColTypeContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitComplexColType(this);
    }
};
ComplexColTypeContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitComplexColType(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.ComplexColTypeContext = ComplexColTypeContext;
sparkParser.prototype.complexColType = function () {
    var localctx = new ComplexColTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, sparkParser.RULE_complexColType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2284;
        this.identifier();
        this.state = 2285;
        this.match(sparkParser.T__9);
        this.state = 2286;
        this.dataType();
        this.state = 2289;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === sparkParser.COMMENT) {
            this.state = 2287;
            this.match(sparkParser.COMMENT);
            this.state = 2288;
            this.match(sparkParser.STRING);
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function WhenClauseContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_whenClause;
    this.condition = null; // ExpressionContext
    this.result = null; // ExpressionContext
    return this;
}
WhenClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhenClauseContext.prototype.constructor = WhenClauseContext;
WhenClauseContext.prototype.WHEN = function () {
    return this.getToken(sparkParser.WHEN, 0);
};
WhenClauseContext.prototype.THEN = function () {
    return this.getToken(sparkParser.THEN, 0);
};
WhenClauseContext.prototype.expression = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(ExpressionContext);
    }
    else {
        return this.getTypedRuleContext(ExpressionContext, i);
    }
};
WhenClauseContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterWhenClause(this);
    }
};
WhenClauseContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitWhenClause(this);
    }
};
WhenClauseContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitWhenClause(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.WhenClauseContext = WhenClauseContext;
sparkParser.prototype.whenClause = function () {
    var localctx = new WhenClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, sparkParser.RULE_whenClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2291;
        this.match(sparkParser.WHEN);
        this.state = 2292;
        localctx.condition = this.expression();
        this.state = 2293;
        this.match(sparkParser.THEN);
        this.state = 2294;
        localctx.result = this.expression();
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function WindowsContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_windows;
    return this;
}
WindowsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowsContext.prototype.constructor = WindowsContext;
WindowsContext.prototype.WINDOW = function () {
    return this.getToken(sparkParser.WINDOW, 0);
};
WindowsContext.prototype.namedWindow = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(NamedWindowContext);
    }
    else {
        return this.getTypedRuleContext(NamedWindowContext, i);
    }
};
WindowsContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterWindows(this);
    }
};
WindowsContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitWindows(this);
    }
};
WindowsContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitWindows(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.WindowsContext = WindowsContext;
sparkParser.prototype.windows = function () {
    var localctx = new WindowsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, sparkParser.RULE_windows);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2296;
        this.match(sparkParser.WINDOW);
        this.state = 2297;
        this.namedWindow();
        this.state = 2302;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 304, this._ctx);
        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
                this.state = 2298;
                this.match(sparkParser.T__2);
                this.state = 2299;
                this.namedWindow();
            }
            this.state = 2304;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 304, this._ctx);
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function NamedWindowContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_namedWindow;
    return this;
}
NamedWindowContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedWindowContext.prototype.constructor = NamedWindowContext;
NamedWindowContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};
NamedWindowContext.prototype.AS = function () {
    return this.getToken(sparkParser.AS, 0);
};
NamedWindowContext.prototype.windowSpec = function () {
    return this.getTypedRuleContext(WindowSpecContext, 0);
};
NamedWindowContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterNamedWindow(this);
    }
};
NamedWindowContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitNamedWindow(this);
    }
};
NamedWindowContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitNamedWindow(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.NamedWindowContext = NamedWindowContext;
sparkParser.prototype.namedWindow = function () {
    var localctx = new NamedWindowContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, sparkParser.RULE_namedWindow);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2305;
        this.identifier();
        this.state = 2306;
        this.match(sparkParser.AS);
        this.state = 2307;
        this.windowSpec();
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function WindowSpecContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_windowSpec;
    return this;
}
WindowSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowSpecContext.prototype.constructor = WindowSpecContext;
WindowSpecContext.prototype.copyFrom = function (ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};
function WindowRefContext(parser, ctx) {
    WindowSpecContext.call(this, parser);
    this.name = null; // IdentifierContext;
    WindowSpecContext.prototype.copyFrom.call(this, ctx);
    return this;
}
WindowRefContext.prototype = Object.create(WindowSpecContext.prototype);
WindowRefContext.prototype.constructor = WindowRefContext;
sparkParser.WindowRefContext = WindowRefContext;
WindowRefContext.prototype.identifier = function () {
    return this.getTypedRuleContext(IdentifierContext, 0);
};
WindowRefContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterWindowRef(this);
    }
};
WindowRefContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitWindowRef(this);
    }
};
WindowRefContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitWindowRef(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function WindowDefContext(parser, ctx) {
    WindowSpecContext.call(this, parser);
    this._expression = null; // ExpressionContext;
    this.partition = []; // of ExpressionContexts;
    WindowSpecContext.prototype.copyFrom.call(this, ctx);
    return this;
}
WindowDefContext.prototype = Object.create(WindowSpecContext.prototype);
WindowDefContext.prototype.constructor = WindowDefContext;
sparkParser.WindowDefContext = WindowDefContext;
WindowDefContext.prototype.CLUSTER = function () {
    return this.getToken(sparkParser.CLUSTER, 0);
};
WindowDefContext.prototype.BY = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTokens(sparkParser.BY);
    }
    else {
        return this.getToken(sparkParser.BY, i);
    }
};
WindowDefContext.prototype.expression = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(ExpressionContext);
    }
    else {
        return this.getTypedRuleContext(ExpressionContext, i);
    }
};
WindowDefContext.prototype.windowFrame = function () {
    return this.getTypedRuleContext(WindowFrameContext, 0);
};
WindowDefContext.prototype.sortItem = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(SortItemContext);
    }
    else {
        return this.getTypedRuleContext(SortItemContext, i);
    }
};
WindowDefContext.prototype.PARTITION = function () {
    return this.getToken(sparkParser.PARTITION, 0);
};
WindowDefContext.prototype.DISTRIBUTE = function () {
    return this.getToken(sparkParser.DISTRIBUTE, 0);
};
WindowDefContext.prototype.ORDER = function () {
    return this.getToken(sparkParser.ORDER, 0);
};
WindowDefContext.prototype.SORT = function () {
    return this.getToken(sparkParser.SORT, 0);
};
WindowDefContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterWindowDef(this);
    }
};
WindowDefContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitWindowDef(this);
    }
};
WindowDefContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitWindowDef(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.WindowSpecContext = WindowSpecContext;
sparkParser.prototype.windowSpec = function () {
    var localctx = new WindowSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, sparkParser.RULE_windowSpec);
    var _la = 0; // Token type
    try {
        this.state = 2351;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
            case sparkParser.SELECT:
            case sparkParser.FROM:
            case sparkParser.ADD:
            case sparkParser.AS:
            case sparkParser.ALL:
            case sparkParser.ANY:
            case sparkParser.DISTINCT:
            case sparkParser.WHERE:
            case sparkParser.GROUP:
            case sparkParser.BY:
            case sparkParser.GROUPING:
            case sparkParser.SETS:
            case sparkParser.CUBE:
            case sparkParser.ROLLUP:
            case sparkParser.ORDER:
            case sparkParser.HAVING:
            case sparkParser.LIMIT:
            case sparkParser.AT:
            case sparkParser.OR:
            case sparkParser.AND:
            case sparkParser.IN:
            case sparkParser.NOT:
            case sparkParser.NO:
            case sparkParser.EXISTS:
            case sparkParser.BETWEEN:
            case sparkParser.LIKE:
            case sparkParser.RLIKE:
            case sparkParser.IS:
            case sparkParser.NULL:
            case sparkParser.TRUE:
            case sparkParser.FALSE:
            case sparkParser.NULLS:
            case sparkParser.ASC:
            case sparkParser.DESC:
            case sparkParser.FOR:
            case sparkParser.INTERVAL:
            case sparkParser.CASE:
            case sparkParser.WHEN:
            case sparkParser.THEN:
            case sparkParser.ELSE:
            case sparkParser.END:
            case sparkParser.JOIN:
            case sparkParser.CROSS:
            case sparkParser.OUTER:
            case sparkParser.INNER:
            case sparkParser.LEFT:
            case sparkParser.SEMI:
            case sparkParser.RIGHT:
            case sparkParser.FULL:
            case sparkParser.NATURAL:
            case sparkParser.ON:
            case sparkParser.PIVOT:
            case sparkParser.LATERAL:
            case sparkParser.WINDOW:
            case sparkParser.OVER:
            case sparkParser.PARTITION:
            case sparkParser.RANGE:
            case sparkParser.ROWS:
            case sparkParser.UNBOUNDED:
            case sparkParser.PRECEDING:
            case sparkParser.FOLLOWING:
            case sparkParser.CURRENT:
            case sparkParser.FIRST:
            case sparkParser.AFTER:
            case sparkParser.LAST:
            case sparkParser.ROW:
            case sparkParser.WITH:
            case sparkParser.VALUES:
            case sparkParser.CREATE:
            case sparkParser.TABLE:
            case sparkParser.DIRECTORY:
            case sparkParser.VIEW:
            case sparkParser.REPLACE:
            case sparkParser.INSERT:
            case sparkParser.DELETE:
            case sparkParser.INTO:
            case sparkParser.DESCRIBE:
            case sparkParser.EXPLAIN:
            case sparkParser.FORMAT:
            case sparkParser.LOGICAL:
            case sparkParser.CODEGEN:
            case sparkParser.COST:
            case sparkParser.CAST:
            case sparkParser.SHOW:
            case sparkParser.TABLES:
            case sparkParser.COLUMNS:
            case sparkParser.COLUMN:
            case sparkParser.USE:
            case sparkParser.PARTITIONS:
            case sparkParser.FUNCTIONS:
            case sparkParser.DROP:
            case sparkParser.UNION:
            case sparkParser.EXCEPT:
            case sparkParser.SETMINUS:
            case sparkParser.INTERSECT:
            case sparkParser.TO:
            case sparkParser.TABLESAMPLE:
            case sparkParser.STRATIFY:
            case sparkParser.ALTER:
            case sparkParser.RENAME:
            case sparkParser.ARRAY:
            case sparkParser.MAP:
            case sparkParser.STRUCT:
            case sparkParser.COMMENT:
            case sparkParser.SET:
            case sparkParser.RESET:
            case sparkParser.DATA:
            case sparkParser.START:
            case sparkParser.TRANSACTION:
            case sparkParser.COMMIT:
            case sparkParser.ROLLBACK:
            case sparkParser.MACRO:
            case sparkParser.IGNORE:
            case sparkParser.BOTH:
            case sparkParser.LEADING:
            case sparkParser.TRAILING:
            case sparkParser.IF:
            case sparkParser.POSITION:
            case sparkParser.EXTRACT:
            case sparkParser.DIV:
            case sparkParser.PERCENTLIT:
            case sparkParser.BUCKET:
            case sparkParser.OUT:
            case sparkParser.OF:
            case sparkParser.SORT:
            case sparkParser.CLUSTER:
            case sparkParser.DISTRIBUTE:
            case sparkParser.OVERWRITE:
            case sparkParser.TRANSFORM:
            case sparkParser.REDUCE:
            case sparkParser.SERDE:
            case sparkParser.SERDEPROPERTIES:
            case sparkParser.RECORDREADER:
            case sparkParser.RECORDWRITER:
            case sparkParser.DELIMITED:
            case sparkParser.FIELDS:
            case sparkParser.TERMINATED:
            case sparkParser.COLLECTION:
            case sparkParser.ITEMS:
            case sparkParser.KEYS:
            case sparkParser.ESCAPED:
            case sparkParser.LINES:
            case sparkParser.SEPARATED:
            case sparkParser.FUNCTION:
            case sparkParser.EXTENDED:
            case sparkParser.REFRESH:
            case sparkParser.CLEAR:
            case sparkParser.CACHE:
            case sparkParser.UNCACHE:
            case sparkParser.LAZY:
            case sparkParser.FORMATTED:
            case sparkParser.GLOBAL:
            case sparkParser.TEMPORARY:
            case sparkParser.OPTIONS:
            case sparkParser.UNSET:
            case sparkParser.TBLPROPERTIES:
            case sparkParser.DBPROPERTIES:
            case sparkParser.BUCKETS:
            case sparkParser.SKEWED:
            case sparkParser.STORED:
            case sparkParser.DIRECTORIES:
            case sparkParser.LOCATION:
            case sparkParser.EXCHANGE:
            case sparkParser.ARCHIVE:
            case sparkParser.UNARCHIVE:
            case sparkParser.FILEFORMAT:
            case sparkParser.TOUCH:
            case sparkParser.COMPACT:
            case sparkParser.CONCATENATE:
            case sparkParser.CHANGE:
            case sparkParser.CASCADE:
            case sparkParser.RESTRICT:
            case sparkParser.CLUSTERED:
            case sparkParser.SORTED:
            case sparkParser.PURGE:
            case sparkParser.INPUTFORMAT:
            case sparkParser.OUTPUTFORMAT:
            case sparkParser.DATABASE:
            case sparkParser.DATABASES:
            case sparkParser.DFS:
            case sparkParser.TRUNCATE:
            case sparkParser.ANALYZE:
            case sparkParser.COMPUTE:
            case sparkParser.LIST:
            case sparkParser.STATISTICS:
            case sparkParser.PARTITIONED:
            case sparkParser.EXTERNAL:
            case sparkParser.DEFINED:
            case sparkParser.REVOKE:
            case sparkParser.GRANT:
            case sparkParser.LOCK:
            case sparkParser.UNLOCK:
            case sparkParser.MSCK:
            case sparkParser.REPAIR:
            case sparkParser.RECOVER:
            case sparkParser.EXPORT:
            case sparkParser.IMPORT:
            case sparkParser.LOAD:
            case sparkParser.ROLE:
            case sparkParser.ROLES:
            case sparkParser.COMPACTIONS:
            case sparkParser.PRINCIPALS:
            case sparkParser.TRANSACTIONS:
            case sparkParser.INDEX:
            case sparkParser.INDEXES:
            case sparkParser.LOCKS:
            case sparkParser.OPTION:
            case sparkParser.ANTI:
            case sparkParser.LOCAL:
            case sparkParser.INPATH:
            case sparkParser.IDENTIFIER:
            case sparkParser.BACKQUOTED_IDENTIFIER:
                localctx = new WindowRefContext(this, localctx);
                this.enterOuterAlt(localctx, 1);
                this.state = 2309;
                localctx.name = this.identifier();
                break;
            case sparkParser.T__0:
                localctx = new WindowDefContext(this, localctx);
                this.enterOuterAlt(localctx, 2);
                this.state = 2310;
                this.match(sparkParser.T__0);
                this.state = 2345;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case sparkParser.CLUSTER:
                        this.state = 2311;
                        this.match(sparkParser.CLUSTER);
                        this.state = 2312;
                        this.match(sparkParser.BY);
                        this.state = 2313;
                        localctx._expression = this.expression();
                        localctx.partition.push(localctx._expression);
                        this.state = 2318;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === sparkParser.T__2) {
                            this.state = 2314;
                            this.match(sparkParser.T__2);
                            this.state = 2315;
                            localctx._expression = this.expression();
                            localctx.partition.push(localctx._expression);
                            this.state = 2320;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        break;
                    case sparkParser.T__1:
                    case sparkParser.ORDER:
                    case sparkParser.PARTITION:
                    case sparkParser.RANGE:
                    case sparkParser.ROWS:
                    case sparkParser.SORT:
                    case sparkParser.DISTRIBUTE:
                        this.state = 2331;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === sparkParser.PARTITION || _la === sparkParser.DISTRIBUTE) {
                            this.state = 2321;
                            _la = this._input.LA(1);
                            if (!(_la === sparkParser.PARTITION || _la === sparkParser.DISTRIBUTE)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 2322;
                            this.match(sparkParser.BY);
                            this.state = 2323;
                            localctx._expression = this.expression();
                            localctx.partition.push(localctx._expression);
                            this.state = 2328;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === sparkParser.T__2) {
                                this.state = 2324;
                                this.match(sparkParser.T__2);
                                this.state = 2325;
                                localctx._expression = this.expression();
                                localctx.partition.push(localctx._expression);
                                this.state = 2330;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                        this.state = 2343;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === sparkParser.ORDER || _la === sparkParser.SORT) {
                            this.state = 2333;
                            _la = this._input.LA(1);
                            if (!(_la === sparkParser.ORDER || _la === sparkParser.SORT)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 2334;
                            this.match(sparkParser.BY);
                            this.state = 2335;
                            this.sortItem();
                            this.state = 2340;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === sparkParser.T__2) {
                                this.state = 2336;
                                this.match(sparkParser.T__2);
                                this.state = 2337;
                                this.sortItem();
                                this.state = 2342;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 2348;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.RANGE || _la === sparkParser.ROWS) {
                    this.state = 2347;
                    this.windowFrame();
                }
                this.state = 2350;
                this.match(sparkParser.T__1);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function WindowFrameContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_windowFrame;
    this.frameType = null; // Token
    this.start = null; // FrameBoundContext
    this.end = null; // FrameBoundContext
    return this;
}
WindowFrameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowFrameContext.prototype.constructor = WindowFrameContext;
WindowFrameContext.prototype.RANGE = function () {
    return this.getToken(sparkParser.RANGE, 0);
};
WindowFrameContext.prototype.frameBound = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(FrameBoundContext);
    }
    else {
        return this.getTypedRuleContext(FrameBoundContext, i);
    }
};
WindowFrameContext.prototype.ROWS = function () {
    return this.getToken(sparkParser.ROWS, 0);
};
WindowFrameContext.prototype.BETWEEN = function () {
    return this.getToken(sparkParser.BETWEEN, 0);
};
WindowFrameContext.prototype.AND = function () {
    return this.getToken(sparkParser.AND, 0);
};
WindowFrameContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterWindowFrame(this);
    }
};
WindowFrameContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitWindowFrame(this);
    }
};
WindowFrameContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitWindowFrame(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.WindowFrameContext = WindowFrameContext;
sparkParser.prototype.windowFrame = function () {
    var localctx = new WindowFrameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, sparkParser.RULE_windowFrame);
    try {
        this.state = 2369;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 313, this._ctx);
        switch (la_) {
            case 1:
                this.enterOuterAlt(localctx, 1);
                this.state = 2353;
                localctx.frameType = this.match(sparkParser.RANGE);
                this.state = 2354;
                localctx.start = this.frameBound();
                break;
            case 2:
                this.enterOuterAlt(localctx, 2);
                this.state = 2355;
                localctx.frameType = this.match(sparkParser.ROWS);
                this.state = 2356;
                localctx.start = this.frameBound();
                break;
            case 3:
                this.enterOuterAlt(localctx, 3);
                this.state = 2357;
                localctx.frameType = this.match(sparkParser.RANGE);
                this.state = 2358;
                this.match(sparkParser.BETWEEN);
                this.state = 2359;
                localctx.start = this.frameBound();
                this.state = 2360;
                this.match(sparkParser.AND);
                this.state = 2361;
                localctx.end = this.frameBound();
                break;
            case 4:
                this.enterOuterAlt(localctx, 4);
                this.state = 2363;
                localctx.frameType = this.match(sparkParser.ROWS);
                this.state = 2364;
                this.match(sparkParser.BETWEEN);
                this.state = 2365;
                localctx.start = this.frameBound();
                this.state = 2366;
                this.match(sparkParser.AND);
                this.state = 2367;
                localctx.end = this.frameBound();
                break;
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function FrameBoundContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_frameBound;
    this.boundType = null; // Token
    return this;
}
FrameBoundContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FrameBoundContext.prototype.constructor = FrameBoundContext;
FrameBoundContext.prototype.UNBOUNDED = function () {
    return this.getToken(sparkParser.UNBOUNDED, 0);
};
FrameBoundContext.prototype.PRECEDING = function () {
    return this.getToken(sparkParser.PRECEDING, 0);
};
FrameBoundContext.prototype.FOLLOWING = function () {
    return this.getToken(sparkParser.FOLLOWING, 0);
};
FrameBoundContext.prototype.ROW = function () {
    return this.getToken(sparkParser.ROW, 0);
};
FrameBoundContext.prototype.CURRENT = function () {
    return this.getToken(sparkParser.CURRENT, 0);
};
FrameBoundContext.prototype.expression = function () {
    return this.getTypedRuleContext(ExpressionContext, 0);
};
FrameBoundContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterFrameBound(this);
    }
};
FrameBoundContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitFrameBound(this);
    }
};
FrameBoundContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitFrameBound(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.FrameBoundContext = FrameBoundContext;
sparkParser.prototype.frameBound = function () {
    var localctx = new FrameBoundContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, sparkParser.RULE_frameBound);
    var _la = 0; // Token type
    try {
        this.state = 2378;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 314, this._ctx);
        switch (la_) {
            case 1:
                this.enterOuterAlt(localctx, 1);
                this.state = 2371;
                this.match(sparkParser.UNBOUNDED);
                this.state = 2372;
                localctx.boundType = this._input.LT(1);
                _la = this._input.LA(1);
                if (!(_la === sparkParser.PRECEDING || _la === sparkParser.FOLLOWING)) {
                    localctx.boundType = this._errHandler.recoverInline(this);
                }
                else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                break;
            case 2:
                this.enterOuterAlt(localctx, 2);
                this.state = 2373;
                localctx.boundType = this.match(sparkParser.CURRENT);
                this.state = 2374;
                this.match(sparkParser.ROW);
                break;
            case 3:
                this.enterOuterAlt(localctx, 3);
                this.state = 2375;
                this.expression();
                this.state = 2376;
                localctx.boundType = this._input.LT(1);
                _la = this._input.LA(1);
                if (!(_la === sparkParser.PRECEDING || _la === sparkParser.FOLLOWING)) {
                    localctx.boundType = this._errHandler.recoverInline(this);
                }
                else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                break;
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function QualifiedNameContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_qualifiedName;
    return this;
}
QualifiedNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiedNameContext.prototype.constructor = QualifiedNameContext;
QualifiedNameContext.prototype.identifier = function (i) {
    if (i === undefined) {
        i = null;
    }
    if (i === null) {
        return this.getTypedRuleContexts(IdentifierContext);
    }
    else {
        return this.getTypedRuleContext(IdentifierContext, i);
    }
};
QualifiedNameContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterQualifiedName(this);
    }
};
QualifiedNameContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitQualifiedName(this);
    }
};
QualifiedNameContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitQualifiedName(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.QualifiedNameContext = QualifiedNameContext;
sparkParser.prototype.qualifiedName = function () {
    var localctx = new QualifiedNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, sparkParser.RULE_qualifiedName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2380;
        this.identifier();
        this.state = 2385;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 315, this._ctx);
        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
                this.state = 2381;
                this.match(sparkParser.T__3);
                this.state = 2382;
                this.identifier();
            }
            this.state = 2387;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 315, this._ctx);
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function IdentifierContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_identifier;
    return this;
}
IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;
IdentifierContext.prototype.strictIdentifier = function () {
    return this.getTypedRuleContext(StrictIdentifierContext, 0);
};
IdentifierContext.prototype.ANTI = function () {
    return this.getToken(sparkParser.ANTI, 0);
};
IdentifierContext.prototype.FULL = function () {
    return this.getToken(sparkParser.FULL, 0);
};
IdentifierContext.prototype.INNER = function () {
    return this.getToken(sparkParser.INNER, 0);
};
IdentifierContext.prototype.LEFT = function () {
    return this.getToken(sparkParser.LEFT, 0);
};
IdentifierContext.prototype.SEMI = function () {
    return this.getToken(sparkParser.SEMI, 0);
};
IdentifierContext.prototype.RIGHT = function () {
    return this.getToken(sparkParser.RIGHT, 0);
};
IdentifierContext.prototype.NATURAL = function () {
    return this.getToken(sparkParser.NATURAL, 0);
};
IdentifierContext.prototype.JOIN = function () {
    return this.getToken(sparkParser.JOIN, 0);
};
IdentifierContext.prototype.CROSS = function () {
    return this.getToken(sparkParser.CROSS, 0);
};
IdentifierContext.prototype.ON = function () {
    return this.getToken(sparkParser.ON, 0);
};
IdentifierContext.prototype.UNION = function () {
    return this.getToken(sparkParser.UNION, 0);
};
IdentifierContext.prototype.INTERSECT = function () {
    return this.getToken(sparkParser.INTERSECT, 0);
};
IdentifierContext.prototype.EXCEPT = function () {
    return this.getToken(sparkParser.EXCEPT, 0);
};
IdentifierContext.prototype.SETMINUS = function () {
    return this.getToken(sparkParser.SETMINUS, 0);
};
IdentifierContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterIdentifier(this);
    }
};
IdentifierContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitIdentifier(this);
    }
};
IdentifierContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitIdentifier(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.IdentifierContext = IdentifierContext;
sparkParser.prototype.identifier = function () {
    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, sparkParser.RULE_identifier);
    try {
        this.state = 2403;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
            case sparkParser.SELECT:
            case sparkParser.FROM:
            case sparkParser.ADD:
            case sparkParser.AS:
            case sparkParser.ALL:
            case sparkParser.ANY:
            case sparkParser.DISTINCT:
            case sparkParser.WHERE:
            case sparkParser.GROUP:
            case sparkParser.BY:
            case sparkParser.GROUPING:
            case sparkParser.SETS:
            case sparkParser.CUBE:
            case sparkParser.ROLLUP:
            case sparkParser.ORDER:
            case sparkParser.HAVING:
            case sparkParser.LIMIT:
            case sparkParser.AT:
            case sparkParser.OR:
            case sparkParser.AND:
            case sparkParser.IN:
            case sparkParser.NOT:
            case sparkParser.NO:
            case sparkParser.EXISTS:
            case sparkParser.BETWEEN:
            case sparkParser.LIKE:
            case sparkParser.RLIKE:
            case sparkParser.IS:
            case sparkParser.NULL:
            case sparkParser.TRUE:
            case sparkParser.FALSE:
            case sparkParser.NULLS:
            case sparkParser.ASC:
            case sparkParser.DESC:
            case sparkParser.FOR:
            case sparkParser.INTERVAL:
            case sparkParser.CASE:
            case sparkParser.WHEN:
            case sparkParser.THEN:
            case sparkParser.ELSE:
            case sparkParser.END:
            case sparkParser.OUTER:
            case sparkParser.PIVOT:
            case sparkParser.LATERAL:
            case sparkParser.WINDOW:
            case sparkParser.OVER:
            case sparkParser.PARTITION:
            case sparkParser.RANGE:
            case sparkParser.ROWS:
            case sparkParser.UNBOUNDED:
            case sparkParser.PRECEDING:
            case sparkParser.FOLLOWING:
            case sparkParser.CURRENT:
            case sparkParser.FIRST:
            case sparkParser.AFTER:
            case sparkParser.LAST:
            case sparkParser.ROW:
            case sparkParser.WITH:
            case sparkParser.VALUES:
            case sparkParser.CREATE:
            case sparkParser.TABLE:
            case sparkParser.DIRECTORY:
            case sparkParser.VIEW:
            case sparkParser.REPLACE:
            case sparkParser.INSERT:
            case sparkParser.DELETE:
            case sparkParser.INTO:
            case sparkParser.DESCRIBE:
            case sparkParser.EXPLAIN:
            case sparkParser.FORMAT:
            case sparkParser.LOGICAL:
            case sparkParser.CODEGEN:
            case sparkParser.COST:
            case sparkParser.CAST:
            case sparkParser.SHOW:
            case sparkParser.TABLES:
            case sparkParser.COLUMNS:
            case sparkParser.COLUMN:
            case sparkParser.USE:
            case sparkParser.PARTITIONS:
            case sparkParser.FUNCTIONS:
            case sparkParser.DROP:
            case sparkParser.TO:
            case sparkParser.TABLESAMPLE:
            case sparkParser.STRATIFY:
            case sparkParser.ALTER:
            case sparkParser.RENAME:
            case sparkParser.ARRAY:
            case sparkParser.MAP:
            case sparkParser.STRUCT:
            case sparkParser.COMMENT:
            case sparkParser.SET:
            case sparkParser.RESET:
            case sparkParser.DATA:
            case sparkParser.START:
            case sparkParser.TRANSACTION:
            case sparkParser.COMMIT:
            case sparkParser.ROLLBACK:
            case sparkParser.MACRO:
            case sparkParser.IGNORE:
            case sparkParser.BOTH:
            case sparkParser.LEADING:
            case sparkParser.TRAILING:
            case sparkParser.IF:
            case sparkParser.POSITION:
            case sparkParser.EXTRACT:
            case sparkParser.DIV:
            case sparkParser.PERCENTLIT:
            case sparkParser.BUCKET:
            case sparkParser.OUT:
            case sparkParser.OF:
            case sparkParser.SORT:
            case sparkParser.CLUSTER:
            case sparkParser.DISTRIBUTE:
            case sparkParser.OVERWRITE:
            case sparkParser.TRANSFORM:
            case sparkParser.REDUCE:
            case sparkParser.SERDE:
            case sparkParser.SERDEPROPERTIES:
            case sparkParser.RECORDREADER:
            case sparkParser.RECORDWRITER:
            case sparkParser.DELIMITED:
            case sparkParser.FIELDS:
            case sparkParser.TERMINATED:
            case sparkParser.COLLECTION:
            case sparkParser.ITEMS:
            case sparkParser.KEYS:
            case sparkParser.ESCAPED:
            case sparkParser.LINES:
            case sparkParser.SEPARATED:
            case sparkParser.FUNCTION:
            case sparkParser.EXTENDED:
            case sparkParser.REFRESH:
            case sparkParser.CLEAR:
            case sparkParser.CACHE:
            case sparkParser.UNCACHE:
            case sparkParser.LAZY:
            case sparkParser.FORMATTED:
            case sparkParser.GLOBAL:
            case sparkParser.TEMPORARY:
            case sparkParser.OPTIONS:
            case sparkParser.UNSET:
            case sparkParser.TBLPROPERTIES:
            case sparkParser.DBPROPERTIES:
            case sparkParser.BUCKETS:
            case sparkParser.SKEWED:
            case sparkParser.STORED:
            case sparkParser.DIRECTORIES:
            case sparkParser.LOCATION:
            case sparkParser.EXCHANGE:
            case sparkParser.ARCHIVE:
            case sparkParser.UNARCHIVE:
            case sparkParser.FILEFORMAT:
            case sparkParser.TOUCH:
            case sparkParser.COMPACT:
            case sparkParser.CONCATENATE:
            case sparkParser.CHANGE:
            case sparkParser.CASCADE:
            case sparkParser.RESTRICT:
            case sparkParser.CLUSTERED:
            case sparkParser.SORTED:
            case sparkParser.PURGE:
            case sparkParser.INPUTFORMAT:
            case sparkParser.OUTPUTFORMAT:
            case sparkParser.DATABASE:
            case sparkParser.DATABASES:
            case sparkParser.DFS:
            case sparkParser.TRUNCATE:
            case sparkParser.ANALYZE:
            case sparkParser.COMPUTE:
            case sparkParser.LIST:
            case sparkParser.STATISTICS:
            case sparkParser.PARTITIONED:
            case sparkParser.EXTERNAL:
            case sparkParser.DEFINED:
            case sparkParser.REVOKE:
            case sparkParser.GRANT:
            case sparkParser.LOCK:
            case sparkParser.UNLOCK:
            case sparkParser.MSCK:
            case sparkParser.REPAIR:
            case sparkParser.RECOVER:
            case sparkParser.EXPORT:
            case sparkParser.IMPORT:
            case sparkParser.LOAD:
            case sparkParser.ROLE:
            case sparkParser.ROLES:
            case sparkParser.COMPACTIONS:
            case sparkParser.PRINCIPALS:
            case sparkParser.TRANSACTIONS:
            case sparkParser.INDEX:
            case sparkParser.INDEXES:
            case sparkParser.LOCKS:
            case sparkParser.OPTION:
            case sparkParser.LOCAL:
            case sparkParser.INPATH:
            case sparkParser.IDENTIFIER:
            case sparkParser.BACKQUOTED_IDENTIFIER:
                this.enterOuterAlt(localctx, 1);
                this.state = 2388;
                this.strictIdentifier();
                break;
            case sparkParser.ANTI:
                this.enterOuterAlt(localctx, 2);
                this.state = 2389;
                this.match(sparkParser.ANTI);
                break;
            case sparkParser.FULL:
                this.enterOuterAlt(localctx, 3);
                this.state = 2390;
                this.match(sparkParser.FULL);
                break;
            case sparkParser.INNER:
                this.enterOuterAlt(localctx, 4);
                this.state = 2391;
                this.match(sparkParser.INNER);
                break;
            case sparkParser.LEFT:
                this.enterOuterAlt(localctx, 5);
                this.state = 2392;
                this.match(sparkParser.LEFT);
                break;
            case sparkParser.SEMI:
                this.enterOuterAlt(localctx, 6);
                this.state = 2393;
                this.match(sparkParser.SEMI);
                break;
            case sparkParser.RIGHT:
                this.enterOuterAlt(localctx, 7);
                this.state = 2394;
                this.match(sparkParser.RIGHT);
                break;
            case sparkParser.NATURAL:
                this.enterOuterAlt(localctx, 8);
                this.state = 2395;
                this.match(sparkParser.NATURAL);
                break;
            case sparkParser.JOIN:
                this.enterOuterAlt(localctx, 9);
                this.state = 2396;
                this.match(sparkParser.JOIN);
                break;
            case sparkParser.CROSS:
                this.enterOuterAlt(localctx, 10);
                this.state = 2397;
                this.match(sparkParser.CROSS);
                break;
            case sparkParser.ON:
                this.enterOuterAlt(localctx, 11);
                this.state = 2398;
                this.match(sparkParser.ON);
                break;
            case sparkParser.UNION:
                this.enterOuterAlt(localctx, 12);
                this.state = 2399;
                this.match(sparkParser.UNION);
                break;
            case sparkParser.INTERSECT:
                this.enterOuterAlt(localctx, 13);
                this.state = 2400;
                this.match(sparkParser.INTERSECT);
                break;
            case sparkParser.EXCEPT:
                this.enterOuterAlt(localctx, 14);
                this.state = 2401;
                this.match(sparkParser.EXCEPT);
                break;
            case sparkParser.SETMINUS:
                this.enterOuterAlt(localctx, 15);
                this.state = 2402;
                this.match(sparkParser.SETMINUS);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function StrictIdentifierContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_strictIdentifier;
    return this;
}
StrictIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StrictIdentifierContext.prototype.constructor = StrictIdentifierContext;
StrictIdentifierContext.prototype.copyFrom = function (ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};
function QuotedIdentifierAlternativeContext(parser, ctx) {
    StrictIdentifierContext.call(this, parser);
    StrictIdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}
QuotedIdentifierAlternativeContext.prototype = Object.create(StrictIdentifierContext.prototype);
QuotedIdentifierAlternativeContext.prototype.constructor = QuotedIdentifierAlternativeContext;
sparkParser.QuotedIdentifierAlternativeContext = QuotedIdentifierAlternativeContext;
QuotedIdentifierAlternativeContext.prototype.quotedIdentifier = function () {
    return this.getTypedRuleContext(QuotedIdentifierContext, 0);
};
QuotedIdentifierAlternativeContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterQuotedIdentifierAlternative(this);
    }
};
QuotedIdentifierAlternativeContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitQuotedIdentifierAlternative(this);
    }
};
QuotedIdentifierAlternativeContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitQuotedIdentifierAlternative(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function UnquotedIdentifierContext(parser, ctx) {
    StrictIdentifierContext.call(this, parser);
    StrictIdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}
UnquotedIdentifierContext.prototype = Object.create(StrictIdentifierContext.prototype);
UnquotedIdentifierContext.prototype.constructor = UnquotedIdentifierContext;
sparkParser.UnquotedIdentifierContext = UnquotedIdentifierContext;
UnquotedIdentifierContext.prototype.IDENTIFIER = function () {
    return this.getToken(sparkParser.IDENTIFIER, 0);
};
UnquotedIdentifierContext.prototype.nonReserved = function () {
    return this.getTypedRuleContext(NonReservedContext, 0);
};
UnquotedIdentifierContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterUnquotedIdentifier(this);
    }
};
UnquotedIdentifierContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitUnquotedIdentifier(this);
    }
};
UnquotedIdentifierContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitUnquotedIdentifier(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.StrictIdentifierContext = StrictIdentifierContext;
sparkParser.prototype.strictIdentifier = function () {
    var localctx = new StrictIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, sparkParser.RULE_strictIdentifier);
    try {
        this.state = 2408;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
            case sparkParser.IDENTIFIER:
                localctx = new UnquotedIdentifierContext(this, localctx);
                this.enterOuterAlt(localctx, 1);
                this.state = 2405;
                this.match(sparkParser.IDENTIFIER);
                break;
            case sparkParser.BACKQUOTED_IDENTIFIER:
                localctx = new QuotedIdentifierAlternativeContext(this, localctx);
                this.enterOuterAlt(localctx, 2);
                this.state = 2406;
                this.quotedIdentifier();
                break;
            case sparkParser.SELECT:
            case sparkParser.FROM:
            case sparkParser.ADD:
            case sparkParser.AS:
            case sparkParser.ALL:
            case sparkParser.ANY:
            case sparkParser.DISTINCT:
            case sparkParser.WHERE:
            case sparkParser.GROUP:
            case sparkParser.BY:
            case sparkParser.GROUPING:
            case sparkParser.SETS:
            case sparkParser.CUBE:
            case sparkParser.ROLLUP:
            case sparkParser.ORDER:
            case sparkParser.HAVING:
            case sparkParser.LIMIT:
            case sparkParser.AT:
            case sparkParser.OR:
            case sparkParser.AND:
            case sparkParser.IN:
            case sparkParser.NOT:
            case sparkParser.NO:
            case sparkParser.EXISTS:
            case sparkParser.BETWEEN:
            case sparkParser.LIKE:
            case sparkParser.RLIKE:
            case sparkParser.IS:
            case sparkParser.NULL:
            case sparkParser.TRUE:
            case sparkParser.FALSE:
            case sparkParser.NULLS:
            case sparkParser.ASC:
            case sparkParser.DESC:
            case sparkParser.FOR:
            case sparkParser.INTERVAL:
            case sparkParser.CASE:
            case sparkParser.WHEN:
            case sparkParser.THEN:
            case sparkParser.ELSE:
            case sparkParser.END:
            case sparkParser.OUTER:
            case sparkParser.PIVOT:
            case sparkParser.LATERAL:
            case sparkParser.WINDOW:
            case sparkParser.OVER:
            case sparkParser.PARTITION:
            case sparkParser.RANGE:
            case sparkParser.ROWS:
            case sparkParser.UNBOUNDED:
            case sparkParser.PRECEDING:
            case sparkParser.FOLLOWING:
            case sparkParser.CURRENT:
            case sparkParser.FIRST:
            case sparkParser.AFTER:
            case sparkParser.LAST:
            case sparkParser.ROW:
            case sparkParser.WITH:
            case sparkParser.VALUES:
            case sparkParser.CREATE:
            case sparkParser.TABLE:
            case sparkParser.DIRECTORY:
            case sparkParser.VIEW:
            case sparkParser.REPLACE:
            case sparkParser.INSERT:
            case sparkParser.DELETE:
            case sparkParser.INTO:
            case sparkParser.DESCRIBE:
            case sparkParser.EXPLAIN:
            case sparkParser.FORMAT:
            case sparkParser.LOGICAL:
            case sparkParser.CODEGEN:
            case sparkParser.COST:
            case sparkParser.CAST:
            case sparkParser.SHOW:
            case sparkParser.TABLES:
            case sparkParser.COLUMNS:
            case sparkParser.COLUMN:
            case sparkParser.USE:
            case sparkParser.PARTITIONS:
            case sparkParser.FUNCTIONS:
            case sparkParser.DROP:
            case sparkParser.TO:
            case sparkParser.TABLESAMPLE:
            case sparkParser.STRATIFY:
            case sparkParser.ALTER:
            case sparkParser.RENAME:
            case sparkParser.ARRAY:
            case sparkParser.MAP:
            case sparkParser.STRUCT:
            case sparkParser.COMMENT:
            case sparkParser.SET:
            case sparkParser.RESET:
            case sparkParser.DATA:
            case sparkParser.START:
            case sparkParser.TRANSACTION:
            case sparkParser.COMMIT:
            case sparkParser.ROLLBACK:
            case sparkParser.MACRO:
            case sparkParser.IGNORE:
            case sparkParser.BOTH:
            case sparkParser.LEADING:
            case sparkParser.TRAILING:
            case sparkParser.IF:
            case sparkParser.POSITION:
            case sparkParser.EXTRACT:
            case sparkParser.DIV:
            case sparkParser.PERCENTLIT:
            case sparkParser.BUCKET:
            case sparkParser.OUT:
            case sparkParser.OF:
            case sparkParser.SORT:
            case sparkParser.CLUSTER:
            case sparkParser.DISTRIBUTE:
            case sparkParser.OVERWRITE:
            case sparkParser.TRANSFORM:
            case sparkParser.REDUCE:
            case sparkParser.SERDE:
            case sparkParser.SERDEPROPERTIES:
            case sparkParser.RECORDREADER:
            case sparkParser.RECORDWRITER:
            case sparkParser.DELIMITED:
            case sparkParser.FIELDS:
            case sparkParser.TERMINATED:
            case sparkParser.COLLECTION:
            case sparkParser.ITEMS:
            case sparkParser.KEYS:
            case sparkParser.ESCAPED:
            case sparkParser.LINES:
            case sparkParser.SEPARATED:
            case sparkParser.FUNCTION:
            case sparkParser.EXTENDED:
            case sparkParser.REFRESH:
            case sparkParser.CLEAR:
            case sparkParser.CACHE:
            case sparkParser.UNCACHE:
            case sparkParser.LAZY:
            case sparkParser.FORMATTED:
            case sparkParser.GLOBAL:
            case sparkParser.TEMPORARY:
            case sparkParser.OPTIONS:
            case sparkParser.UNSET:
            case sparkParser.TBLPROPERTIES:
            case sparkParser.DBPROPERTIES:
            case sparkParser.BUCKETS:
            case sparkParser.SKEWED:
            case sparkParser.STORED:
            case sparkParser.DIRECTORIES:
            case sparkParser.LOCATION:
            case sparkParser.EXCHANGE:
            case sparkParser.ARCHIVE:
            case sparkParser.UNARCHIVE:
            case sparkParser.FILEFORMAT:
            case sparkParser.TOUCH:
            case sparkParser.COMPACT:
            case sparkParser.CONCATENATE:
            case sparkParser.CHANGE:
            case sparkParser.CASCADE:
            case sparkParser.RESTRICT:
            case sparkParser.CLUSTERED:
            case sparkParser.SORTED:
            case sparkParser.PURGE:
            case sparkParser.INPUTFORMAT:
            case sparkParser.OUTPUTFORMAT:
            case sparkParser.DATABASE:
            case sparkParser.DATABASES:
            case sparkParser.DFS:
            case sparkParser.TRUNCATE:
            case sparkParser.ANALYZE:
            case sparkParser.COMPUTE:
            case sparkParser.LIST:
            case sparkParser.STATISTICS:
            case sparkParser.PARTITIONED:
            case sparkParser.EXTERNAL:
            case sparkParser.DEFINED:
            case sparkParser.REVOKE:
            case sparkParser.GRANT:
            case sparkParser.LOCK:
            case sparkParser.UNLOCK:
            case sparkParser.MSCK:
            case sparkParser.REPAIR:
            case sparkParser.RECOVER:
            case sparkParser.EXPORT:
            case sparkParser.IMPORT:
            case sparkParser.LOAD:
            case sparkParser.ROLE:
            case sparkParser.ROLES:
            case sparkParser.COMPACTIONS:
            case sparkParser.PRINCIPALS:
            case sparkParser.TRANSACTIONS:
            case sparkParser.INDEX:
            case sparkParser.INDEXES:
            case sparkParser.LOCKS:
            case sparkParser.OPTION:
            case sparkParser.LOCAL:
            case sparkParser.INPATH:
                localctx = new UnquotedIdentifierContext(this, localctx);
                this.enterOuterAlt(localctx, 3);
                this.state = 2407;
                this.nonReserved();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function QuotedIdentifierContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_quotedIdentifier;
    return this;
}
QuotedIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuotedIdentifierContext.prototype.constructor = QuotedIdentifierContext;
QuotedIdentifierContext.prototype.BACKQUOTED_IDENTIFIER = function () {
    return this.getToken(sparkParser.BACKQUOTED_IDENTIFIER, 0);
};
QuotedIdentifierContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterQuotedIdentifier(this);
    }
};
QuotedIdentifierContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitQuotedIdentifier(this);
    }
};
QuotedIdentifierContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitQuotedIdentifier(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.QuotedIdentifierContext = QuotedIdentifierContext;
sparkParser.prototype.quotedIdentifier = function () {
    var localctx = new QuotedIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, sparkParser.RULE_quotedIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2410;
        this.match(sparkParser.BACKQUOTED_IDENTIFIER);
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function NumberContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_number;
    return this;
}
NumberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumberContext.prototype.constructor = NumberContext;
NumberContext.prototype.copyFrom = function (ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};
function DecimalLiteralContext(parser, ctx) {
    NumberContext.call(this, parser);
    NumberContext.prototype.copyFrom.call(this, ctx);
    return this;
}
DecimalLiteralContext.prototype = Object.create(NumberContext.prototype);
DecimalLiteralContext.prototype.constructor = DecimalLiteralContext;
sparkParser.DecimalLiteralContext = DecimalLiteralContext;
DecimalLiteralContext.prototype.DECIMAL_VALUE = function () {
    return this.getToken(sparkParser.DECIMAL_VALUE, 0);
};
DecimalLiteralContext.prototype.MINUS = function () {
    return this.getToken(sparkParser.MINUS, 0);
};
DecimalLiteralContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterDecimalLiteral(this);
    }
};
DecimalLiteralContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitDecimalLiteral(this);
    }
};
DecimalLiteralContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitDecimalLiteral(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function BigIntLiteralContext(parser, ctx) {
    NumberContext.call(this, parser);
    NumberContext.prototype.copyFrom.call(this, ctx);
    return this;
}
BigIntLiteralContext.prototype = Object.create(NumberContext.prototype);
BigIntLiteralContext.prototype.constructor = BigIntLiteralContext;
sparkParser.BigIntLiteralContext = BigIntLiteralContext;
BigIntLiteralContext.prototype.BIGINT_LITERAL = function () {
    return this.getToken(sparkParser.BIGINT_LITERAL, 0);
};
BigIntLiteralContext.prototype.MINUS = function () {
    return this.getToken(sparkParser.MINUS, 0);
};
BigIntLiteralContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterBigIntLiteral(this);
    }
};
BigIntLiteralContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitBigIntLiteral(this);
    }
};
BigIntLiteralContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitBigIntLiteral(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function TinyIntLiteralContext(parser, ctx) {
    NumberContext.call(this, parser);
    NumberContext.prototype.copyFrom.call(this, ctx);
    return this;
}
TinyIntLiteralContext.prototype = Object.create(NumberContext.prototype);
TinyIntLiteralContext.prototype.constructor = TinyIntLiteralContext;
sparkParser.TinyIntLiteralContext = TinyIntLiteralContext;
TinyIntLiteralContext.prototype.TINYINT_LITERAL = function () {
    return this.getToken(sparkParser.TINYINT_LITERAL, 0);
};
TinyIntLiteralContext.prototype.MINUS = function () {
    return this.getToken(sparkParser.MINUS, 0);
};
TinyIntLiteralContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterTinyIntLiteral(this);
    }
};
TinyIntLiteralContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitTinyIntLiteral(this);
    }
};
TinyIntLiteralContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitTinyIntLiteral(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function BigDecimalLiteralContext(parser, ctx) {
    NumberContext.call(this, parser);
    NumberContext.prototype.copyFrom.call(this, ctx);
    return this;
}
BigDecimalLiteralContext.prototype = Object.create(NumberContext.prototype);
BigDecimalLiteralContext.prototype.constructor = BigDecimalLiteralContext;
sparkParser.BigDecimalLiteralContext = BigDecimalLiteralContext;
BigDecimalLiteralContext.prototype.BIGDECIMAL_LITERAL = function () {
    return this.getToken(sparkParser.BIGDECIMAL_LITERAL, 0);
};
BigDecimalLiteralContext.prototype.MINUS = function () {
    return this.getToken(sparkParser.MINUS, 0);
};
BigDecimalLiteralContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterBigDecimalLiteral(this);
    }
};
BigDecimalLiteralContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitBigDecimalLiteral(this);
    }
};
BigDecimalLiteralContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitBigDecimalLiteral(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function DoubleLiteralContext(parser, ctx) {
    NumberContext.call(this, parser);
    NumberContext.prototype.copyFrom.call(this, ctx);
    return this;
}
DoubleLiteralContext.prototype = Object.create(NumberContext.prototype);
DoubleLiteralContext.prototype.constructor = DoubleLiteralContext;
sparkParser.DoubleLiteralContext = DoubleLiteralContext;
DoubleLiteralContext.prototype.DOUBLE_LITERAL = function () {
    return this.getToken(sparkParser.DOUBLE_LITERAL, 0);
};
DoubleLiteralContext.prototype.MINUS = function () {
    return this.getToken(sparkParser.MINUS, 0);
};
DoubleLiteralContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterDoubleLiteral(this);
    }
};
DoubleLiteralContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitDoubleLiteral(this);
    }
};
DoubleLiteralContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitDoubleLiteral(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function IntegerLiteralContext(parser, ctx) {
    NumberContext.call(this, parser);
    NumberContext.prototype.copyFrom.call(this, ctx);
    return this;
}
IntegerLiteralContext.prototype = Object.create(NumberContext.prototype);
IntegerLiteralContext.prototype.constructor = IntegerLiteralContext;
sparkParser.IntegerLiteralContext = IntegerLiteralContext;
IntegerLiteralContext.prototype.INTEGER_VALUE = function () {
    return this.getToken(sparkParser.INTEGER_VALUE, 0);
};
IntegerLiteralContext.prototype.MINUS = function () {
    return this.getToken(sparkParser.MINUS, 0);
};
IntegerLiteralContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterIntegerLiteral(this);
    }
};
IntegerLiteralContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitIntegerLiteral(this);
    }
};
IntegerLiteralContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitIntegerLiteral(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
function SmallIntLiteralContext(parser, ctx) {
    NumberContext.call(this, parser);
    NumberContext.prototype.copyFrom.call(this, ctx);
    return this;
}
SmallIntLiteralContext.prototype = Object.create(NumberContext.prototype);
SmallIntLiteralContext.prototype.constructor = SmallIntLiteralContext;
sparkParser.SmallIntLiteralContext = SmallIntLiteralContext;
SmallIntLiteralContext.prototype.SMALLINT_LITERAL = function () {
    return this.getToken(sparkParser.SMALLINT_LITERAL, 0);
};
SmallIntLiteralContext.prototype.MINUS = function () {
    return this.getToken(sparkParser.MINUS, 0);
};
SmallIntLiteralContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterSmallIntLiteral(this);
    }
};
SmallIntLiteralContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitSmallIntLiteral(this);
    }
};
SmallIntLiteralContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitSmallIntLiteral(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.NumberContext = NumberContext;
sparkParser.prototype.number = function () {
    var localctx = new NumberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, sparkParser.RULE_number);
    var _la = 0; // Token type
    try {
        this.state = 2440;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 325, this._ctx);
        switch (la_) {
            case 1:
                localctx = new DecimalLiteralContext(this, localctx);
                this.enterOuterAlt(localctx, 1);
                this.state = 2413;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.MINUS) {
                    this.state = 2412;
                    this.match(sparkParser.MINUS);
                }
                this.state = 2415;
                this.match(sparkParser.DECIMAL_VALUE);
                break;
            case 2:
                localctx = new IntegerLiteralContext(this, localctx);
                this.enterOuterAlt(localctx, 2);
                this.state = 2417;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.MINUS) {
                    this.state = 2416;
                    this.match(sparkParser.MINUS);
                }
                this.state = 2419;
                this.match(sparkParser.INTEGER_VALUE);
                break;
            case 3:
                localctx = new BigIntLiteralContext(this, localctx);
                this.enterOuterAlt(localctx, 3);
                this.state = 2421;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.MINUS) {
                    this.state = 2420;
                    this.match(sparkParser.MINUS);
                }
                this.state = 2423;
                this.match(sparkParser.BIGINT_LITERAL);
                break;
            case 4:
                localctx = new SmallIntLiteralContext(this, localctx);
                this.enterOuterAlt(localctx, 4);
                this.state = 2425;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.MINUS) {
                    this.state = 2424;
                    this.match(sparkParser.MINUS);
                }
                this.state = 2427;
                this.match(sparkParser.SMALLINT_LITERAL);
                break;
            case 5:
                localctx = new TinyIntLiteralContext(this, localctx);
                this.enterOuterAlt(localctx, 5);
                this.state = 2429;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.MINUS) {
                    this.state = 2428;
                    this.match(sparkParser.MINUS);
                }
                this.state = 2431;
                this.match(sparkParser.TINYINT_LITERAL);
                break;
            case 6:
                localctx = new DoubleLiteralContext(this, localctx);
                this.enterOuterAlt(localctx, 6);
                this.state = 2433;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.MINUS) {
                    this.state = 2432;
                    this.match(sparkParser.MINUS);
                }
                this.state = 2435;
                this.match(sparkParser.DOUBLE_LITERAL);
                break;
            case 7:
                localctx = new BigDecimalLiteralContext(this, localctx);
                this.enterOuterAlt(localctx, 7);
                this.state = 2437;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === sparkParser.MINUS) {
                    this.state = 2436;
                    this.match(sparkParser.MINUS);
                }
                this.state = 2439;
                this.match(sparkParser.BIGDECIMAL_LITERAL);
                break;
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
function NonReservedContext(parser, parent, invokingState) {
    if (parent === undefined) {
        parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = sparkParser.RULE_nonReserved;
    return this;
}
NonReservedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NonReservedContext.prototype.constructor = NonReservedContext;
NonReservedContext.prototype.SHOW = function () {
    return this.getToken(sparkParser.SHOW, 0);
};
NonReservedContext.prototype.TABLES = function () {
    return this.getToken(sparkParser.TABLES, 0);
};
NonReservedContext.prototype.COLUMNS = function () {
    return this.getToken(sparkParser.COLUMNS, 0);
};
NonReservedContext.prototype.COLUMN = function () {
    return this.getToken(sparkParser.COLUMN, 0);
};
NonReservedContext.prototype.PARTITIONS = function () {
    return this.getToken(sparkParser.PARTITIONS, 0);
};
NonReservedContext.prototype.FUNCTIONS = function () {
    return this.getToken(sparkParser.FUNCTIONS, 0);
};
NonReservedContext.prototype.DATABASES = function () {
    return this.getToken(sparkParser.DATABASES, 0);
};
NonReservedContext.prototype.ADD = function () {
    return this.getToken(sparkParser.ADD, 0);
};
NonReservedContext.prototype.OVER = function () {
    return this.getToken(sparkParser.OVER, 0);
};
NonReservedContext.prototype.PARTITION = function () {
    return this.getToken(sparkParser.PARTITION, 0);
};
NonReservedContext.prototype.RANGE = function () {
    return this.getToken(sparkParser.RANGE, 0);
};
NonReservedContext.prototype.ROWS = function () {
    return this.getToken(sparkParser.ROWS, 0);
};
NonReservedContext.prototype.PRECEDING = function () {
    return this.getToken(sparkParser.PRECEDING, 0);
};
NonReservedContext.prototype.FOLLOWING = function () {
    return this.getToken(sparkParser.FOLLOWING, 0);
};
NonReservedContext.prototype.CURRENT = function () {
    return this.getToken(sparkParser.CURRENT, 0);
};
NonReservedContext.prototype.ROW = function () {
    return this.getToken(sparkParser.ROW, 0);
};
NonReservedContext.prototype.LAST = function () {
    return this.getToken(sparkParser.LAST, 0);
};
NonReservedContext.prototype.FIRST = function () {
    return this.getToken(sparkParser.FIRST, 0);
};
NonReservedContext.prototype.AFTER = function () {
    return this.getToken(sparkParser.AFTER, 0);
};
NonReservedContext.prototype.MAP = function () {
    return this.getToken(sparkParser.MAP, 0);
};
NonReservedContext.prototype.ARRAY = function () {
    return this.getToken(sparkParser.ARRAY, 0);
};
NonReservedContext.prototype.STRUCT = function () {
    return this.getToken(sparkParser.STRUCT, 0);
};
NonReservedContext.prototype.PIVOT = function () {
    return this.getToken(sparkParser.PIVOT, 0);
};
NonReservedContext.prototype.LATERAL = function () {
    return this.getToken(sparkParser.LATERAL, 0);
};
NonReservedContext.prototype.WINDOW = function () {
    return this.getToken(sparkParser.WINDOW, 0);
};
NonReservedContext.prototype.REDUCE = function () {
    return this.getToken(sparkParser.REDUCE, 0);
};
NonReservedContext.prototype.TRANSFORM = function () {
    return this.getToken(sparkParser.TRANSFORM, 0);
};
NonReservedContext.prototype.SERDE = function () {
    return this.getToken(sparkParser.SERDE, 0);
};
NonReservedContext.prototype.SERDEPROPERTIES = function () {
    return this.getToken(sparkParser.SERDEPROPERTIES, 0);
};
NonReservedContext.prototype.RECORDREADER = function () {
    return this.getToken(sparkParser.RECORDREADER, 0);
};
NonReservedContext.prototype.DELIMITED = function () {
    return this.getToken(sparkParser.DELIMITED, 0);
};
NonReservedContext.prototype.FIELDS = function () {
    return this.getToken(sparkParser.FIELDS, 0);
};
NonReservedContext.prototype.TERMINATED = function () {
    return this.getToken(sparkParser.TERMINATED, 0);
};
NonReservedContext.prototype.COLLECTION = function () {
    return this.getToken(sparkParser.COLLECTION, 0);
};
NonReservedContext.prototype.ITEMS = function () {
    return this.getToken(sparkParser.ITEMS, 0);
};
NonReservedContext.prototype.KEYS = function () {
    return this.getToken(sparkParser.KEYS, 0);
};
NonReservedContext.prototype.ESCAPED = function () {
    return this.getToken(sparkParser.ESCAPED, 0);
};
NonReservedContext.prototype.LINES = function () {
    return this.getToken(sparkParser.LINES, 0);
};
NonReservedContext.prototype.SEPARATED = function () {
    return this.getToken(sparkParser.SEPARATED, 0);
};
NonReservedContext.prototype.EXTENDED = function () {
    return this.getToken(sparkParser.EXTENDED, 0);
};
NonReservedContext.prototype.REFRESH = function () {
    return this.getToken(sparkParser.REFRESH, 0);
};
NonReservedContext.prototype.CLEAR = function () {
    return this.getToken(sparkParser.CLEAR, 0);
};
NonReservedContext.prototype.CACHE = function () {
    return this.getToken(sparkParser.CACHE, 0);
};
NonReservedContext.prototype.UNCACHE = function () {
    return this.getToken(sparkParser.UNCACHE, 0);
};
NonReservedContext.prototype.LAZY = function () {
    return this.getToken(sparkParser.LAZY, 0);
};
NonReservedContext.prototype.GLOBAL = function () {
    return this.getToken(sparkParser.GLOBAL, 0);
};
NonReservedContext.prototype.TEMPORARY = function () {
    return this.getToken(sparkParser.TEMPORARY, 0);
};
NonReservedContext.prototype.OPTIONS = function () {
    return this.getToken(sparkParser.OPTIONS, 0);
};
NonReservedContext.prototype.GROUPING = function () {
    return this.getToken(sparkParser.GROUPING, 0);
};
NonReservedContext.prototype.CUBE = function () {
    return this.getToken(sparkParser.CUBE, 0);
};
NonReservedContext.prototype.ROLLUP = function () {
    return this.getToken(sparkParser.ROLLUP, 0);
};
NonReservedContext.prototype.EXPLAIN = function () {
    return this.getToken(sparkParser.EXPLAIN, 0);
};
NonReservedContext.prototype.FORMAT = function () {
    return this.getToken(sparkParser.FORMAT, 0);
};
NonReservedContext.prototype.LOGICAL = function () {
    return this.getToken(sparkParser.LOGICAL, 0);
};
NonReservedContext.prototype.FORMATTED = function () {
    return this.getToken(sparkParser.FORMATTED, 0);
};
NonReservedContext.prototype.CODEGEN = function () {
    return this.getToken(sparkParser.CODEGEN, 0);
};
NonReservedContext.prototype.COST = function () {
    return this.getToken(sparkParser.COST, 0);
};
NonReservedContext.prototype.TABLESAMPLE = function () {
    return this.getToken(sparkParser.TABLESAMPLE, 0);
};
NonReservedContext.prototype.USE = function () {
    return this.getToken(sparkParser.USE, 0);
};
NonReservedContext.prototype.TO = function () {
    return this.getToken(sparkParser.TO, 0);
};
NonReservedContext.prototype.BUCKET = function () {
    return this.getToken(sparkParser.BUCKET, 0);
};
NonReservedContext.prototype.PERCENTLIT = function () {
    return this.getToken(sparkParser.PERCENTLIT, 0);
};
NonReservedContext.prototype.OUT = function () {
    return this.getToken(sparkParser.OUT, 0);
};
NonReservedContext.prototype.OF = function () {
    return this.getToken(sparkParser.OF, 0);
};
NonReservedContext.prototype.SET = function () {
    return this.getToken(sparkParser.SET, 0);
};
NonReservedContext.prototype.RESET = function () {
    return this.getToken(sparkParser.RESET, 0);
};
NonReservedContext.prototype.VIEW = function () {
    return this.getToken(sparkParser.VIEW, 0);
};
NonReservedContext.prototype.REPLACE = function () {
    return this.getToken(sparkParser.REPLACE, 0);
};
NonReservedContext.prototype.IF = function () {
    return this.getToken(sparkParser.IF, 0);
};
NonReservedContext.prototype.POSITION = function () {
    return this.getToken(sparkParser.POSITION, 0);
};
NonReservedContext.prototype.EXTRACT = function () {
    return this.getToken(sparkParser.EXTRACT, 0);
};
NonReservedContext.prototype.NO = function () {
    return this.getToken(sparkParser.NO, 0);
};
NonReservedContext.prototype.DATA = function () {
    return this.getToken(sparkParser.DATA, 0);
};
NonReservedContext.prototype.START = function () {
    return this.getToken(sparkParser.START, 0);
};
NonReservedContext.prototype.TRANSACTION = function () {
    return this.getToken(sparkParser.TRANSACTION, 0);
};
NonReservedContext.prototype.COMMIT = function () {
    return this.getToken(sparkParser.COMMIT, 0);
};
NonReservedContext.prototype.ROLLBACK = function () {
    return this.getToken(sparkParser.ROLLBACK, 0);
};
NonReservedContext.prototype.IGNORE = function () {
    return this.getToken(sparkParser.IGNORE, 0);
};
NonReservedContext.prototype.SORT = function () {
    return this.getToken(sparkParser.SORT, 0);
};
NonReservedContext.prototype.CLUSTER = function () {
    return this.getToken(sparkParser.CLUSTER, 0);
};
NonReservedContext.prototype.DISTRIBUTE = function () {
    return this.getToken(sparkParser.DISTRIBUTE, 0);
};
NonReservedContext.prototype.UNSET = function () {
    return this.getToken(sparkParser.UNSET, 0);
};
NonReservedContext.prototype.TBLPROPERTIES = function () {
    return this.getToken(sparkParser.TBLPROPERTIES, 0);
};
NonReservedContext.prototype.SKEWED = function () {
    return this.getToken(sparkParser.SKEWED, 0);
};
NonReservedContext.prototype.STORED = function () {
    return this.getToken(sparkParser.STORED, 0);
};
NonReservedContext.prototype.DIRECTORIES = function () {
    return this.getToken(sparkParser.DIRECTORIES, 0);
};
NonReservedContext.prototype.LOCATION = function () {
    return this.getToken(sparkParser.LOCATION, 0);
};
NonReservedContext.prototype.EXCHANGE = function () {
    return this.getToken(sparkParser.EXCHANGE, 0);
};
NonReservedContext.prototype.ARCHIVE = function () {
    return this.getToken(sparkParser.ARCHIVE, 0);
};
NonReservedContext.prototype.UNARCHIVE = function () {
    return this.getToken(sparkParser.UNARCHIVE, 0);
};
NonReservedContext.prototype.FILEFORMAT = function () {
    return this.getToken(sparkParser.FILEFORMAT, 0);
};
NonReservedContext.prototype.TOUCH = function () {
    return this.getToken(sparkParser.TOUCH, 0);
};
NonReservedContext.prototype.COMPACT = function () {
    return this.getToken(sparkParser.COMPACT, 0);
};
NonReservedContext.prototype.CONCATENATE = function () {
    return this.getToken(sparkParser.CONCATENATE, 0);
};
NonReservedContext.prototype.CHANGE = function () {
    return this.getToken(sparkParser.CHANGE, 0);
};
NonReservedContext.prototype.CASCADE = function () {
    return this.getToken(sparkParser.CASCADE, 0);
};
NonReservedContext.prototype.RESTRICT = function () {
    return this.getToken(sparkParser.RESTRICT, 0);
};
NonReservedContext.prototype.BUCKETS = function () {
    return this.getToken(sparkParser.BUCKETS, 0);
};
NonReservedContext.prototype.CLUSTERED = function () {
    return this.getToken(sparkParser.CLUSTERED, 0);
};
NonReservedContext.prototype.SORTED = function () {
    return this.getToken(sparkParser.SORTED, 0);
};
NonReservedContext.prototype.PURGE = function () {
    return this.getToken(sparkParser.PURGE, 0);
};
NonReservedContext.prototype.INPUTFORMAT = function () {
    return this.getToken(sparkParser.INPUTFORMAT, 0);
};
NonReservedContext.prototype.OUTPUTFORMAT = function () {
    return this.getToken(sparkParser.OUTPUTFORMAT, 0);
};
NonReservedContext.prototype.DBPROPERTIES = function () {
    return this.getToken(sparkParser.DBPROPERTIES, 0);
};
NonReservedContext.prototype.DFS = function () {
    return this.getToken(sparkParser.DFS, 0);
};
NonReservedContext.prototype.TRUNCATE = function () {
    return this.getToken(sparkParser.TRUNCATE, 0);
};
NonReservedContext.prototype.COMPUTE = function () {
    return this.getToken(sparkParser.COMPUTE, 0);
};
NonReservedContext.prototype.LIST = function () {
    return this.getToken(sparkParser.LIST, 0);
};
NonReservedContext.prototype.STATISTICS = function () {
    return this.getToken(sparkParser.STATISTICS, 0);
};
NonReservedContext.prototype.ANALYZE = function () {
    return this.getToken(sparkParser.ANALYZE, 0);
};
NonReservedContext.prototype.PARTITIONED = function () {
    return this.getToken(sparkParser.PARTITIONED, 0);
};
NonReservedContext.prototype.EXTERNAL = function () {
    return this.getToken(sparkParser.EXTERNAL, 0);
};
NonReservedContext.prototype.DEFINED = function () {
    return this.getToken(sparkParser.DEFINED, 0);
};
NonReservedContext.prototype.RECORDWRITER = function () {
    return this.getToken(sparkParser.RECORDWRITER, 0);
};
NonReservedContext.prototype.REVOKE = function () {
    return this.getToken(sparkParser.REVOKE, 0);
};
NonReservedContext.prototype.GRANT = function () {
    return this.getToken(sparkParser.GRANT, 0);
};
NonReservedContext.prototype.LOCK = function () {
    return this.getToken(sparkParser.LOCK, 0);
};
NonReservedContext.prototype.UNLOCK = function () {
    return this.getToken(sparkParser.UNLOCK, 0);
};
NonReservedContext.prototype.MSCK = function () {
    return this.getToken(sparkParser.MSCK, 0);
};
NonReservedContext.prototype.REPAIR = function () {
    return this.getToken(sparkParser.REPAIR, 0);
};
NonReservedContext.prototype.RECOVER = function () {
    return this.getToken(sparkParser.RECOVER, 0);
};
NonReservedContext.prototype.EXPORT = function () {
    return this.getToken(sparkParser.EXPORT, 0);
};
NonReservedContext.prototype.IMPORT = function () {
    return this.getToken(sparkParser.IMPORT, 0);
};
NonReservedContext.prototype.LOAD = function () {
    return this.getToken(sparkParser.LOAD, 0);
};
NonReservedContext.prototype.VALUES = function () {
    return this.getToken(sparkParser.VALUES, 0);
};
NonReservedContext.prototype.COMMENT = function () {
    return this.getToken(sparkParser.COMMENT, 0);
};
NonReservedContext.prototype.ROLE = function () {
    return this.getToken(sparkParser.ROLE, 0);
};
NonReservedContext.prototype.ROLES = function () {
    return this.getToken(sparkParser.ROLES, 0);
};
NonReservedContext.prototype.COMPACTIONS = function () {
    return this.getToken(sparkParser.COMPACTIONS, 0);
};
NonReservedContext.prototype.PRINCIPALS = function () {
    return this.getToken(sparkParser.PRINCIPALS, 0);
};
NonReservedContext.prototype.TRANSACTIONS = function () {
    return this.getToken(sparkParser.TRANSACTIONS, 0);
};
NonReservedContext.prototype.INDEX = function () {
    return this.getToken(sparkParser.INDEX, 0);
};
NonReservedContext.prototype.INDEXES = function () {
    return this.getToken(sparkParser.INDEXES, 0);
};
NonReservedContext.prototype.LOCKS = function () {
    return this.getToken(sparkParser.LOCKS, 0);
};
NonReservedContext.prototype.OPTION = function () {
    return this.getToken(sparkParser.OPTION, 0);
};
NonReservedContext.prototype.LOCAL = function () {
    return this.getToken(sparkParser.LOCAL, 0);
};
NonReservedContext.prototype.INPATH = function () {
    return this.getToken(sparkParser.INPATH, 0);
};
NonReservedContext.prototype.ASC = function () {
    return this.getToken(sparkParser.ASC, 0);
};
NonReservedContext.prototype.DESC = function () {
    return this.getToken(sparkParser.DESC, 0);
};
NonReservedContext.prototype.LIMIT = function () {
    return this.getToken(sparkParser.LIMIT, 0);
};
NonReservedContext.prototype.RENAME = function () {
    return this.getToken(sparkParser.RENAME, 0);
};
NonReservedContext.prototype.SETS = function () {
    return this.getToken(sparkParser.SETS, 0);
};
NonReservedContext.prototype.AT = function () {
    return this.getToken(sparkParser.AT, 0);
};
NonReservedContext.prototype.NULLS = function () {
    return this.getToken(sparkParser.NULLS, 0);
};
NonReservedContext.prototype.OVERWRITE = function () {
    return this.getToken(sparkParser.OVERWRITE, 0);
};
NonReservedContext.prototype.ALL = function () {
    return this.getToken(sparkParser.ALL, 0);
};
NonReservedContext.prototype.ANY = function () {
    return this.getToken(sparkParser.ANY, 0);
};
NonReservedContext.prototype.ALTER = function () {
    return this.getToken(sparkParser.ALTER, 0);
};
NonReservedContext.prototype.AS = function () {
    return this.getToken(sparkParser.AS, 0);
};
NonReservedContext.prototype.BETWEEN = function () {
    return this.getToken(sparkParser.BETWEEN, 0);
};
NonReservedContext.prototype.BY = function () {
    return this.getToken(sparkParser.BY, 0);
};
NonReservedContext.prototype.CREATE = function () {
    return this.getToken(sparkParser.CREATE, 0);
};
NonReservedContext.prototype.DELETE = function () {
    return this.getToken(sparkParser.DELETE, 0);
};
NonReservedContext.prototype.DESCRIBE = function () {
    return this.getToken(sparkParser.DESCRIBE, 0);
};
NonReservedContext.prototype.DROP = function () {
    return this.getToken(sparkParser.DROP, 0);
};
NonReservedContext.prototype.EXISTS = function () {
    return this.getToken(sparkParser.EXISTS, 0);
};
NonReservedContext.prototype.FALSE = function () {
    return this.getToken(sparkParser.FALSE, 0);
};
NonReservedContext.prototype.FOR = function () {
    return this.getToken(sparkParser.FOR, 0);
};
NonReservedContext.prototype.GROUP = function () {
    return this.getToken(sparkParser.GROUP, 0);
};
NonReservedContext.prototype.IN = function () {
    return this.getToken(sparkParser.IN, 0);
};
NonReservedContext.prototype.INSERT = function () {
    return this.getToken(sparkParser.INSERT, 0);
};
NonReservedContext.prototype.INTO = function () {
    return this.getToken(sparkParser.INTO, 0);
};
NonReservedContext.prototype.IS = function () {
    return this.getToken(sparkParser.IS, 0);
};
NonReservedContext.prototype.LIKE = function () {
    return this.getToken(sparkParser.LIKE, 0);
};
NonReservedContext.prototype.NULL = function () {
    return this.getToken(sparkParser.NULL, 0);
};
NonReservedContext.prototype.ORDER = function () {
    return this.getToken(sparkParser.ORDER, 0);
};
NonReservedContext.prototype.OUTER = function () {
    return this.getToken(sparkParser.OUTER, 0);
};
NonReservedContext.prototype.TABLE = function () {
    return this.getToken(sparkParser.TABLE, 0);
};
NonReservedContext.prototype.TRUE = function () {
    return this.getToken(sparkParser.TRUE, 0);
};
NonReservedContext.prototype.WITH = function () {
    return this.getToken(sparkParser.WITH, 0);
};
NonReservedContext.prototype.RLIKE = function () {
    return this.getToken(sparkParser.RLIKE, 0);
};
NonReservedContext.prototype.AND = function () {
    return this.getToken(sparkParser.AND, 0);
};
NonReservedContext.prototype.CASE = function () {
    return this.getToken(sparkParser.CASE, 0);
};
NonReservedContext.prototype.CAST = function () {
    return this.getToken(sparkParser.CAST, 0);
};
NonReservedContext.prototype.DISTINCT = function () {
    return this.getToken(sparkParser.DISTINCT, 0);
};
NonReservedContext.prototype.DIV = function () {
    return this.getToken(sparkParser.DIV, 0);
};
NonReservedContext.prototype.ELSE = function () {
    return this.getToken(sparkParser.ELSE, 0);
};
NonReservedContext.prototype.END = function () {
    return this.getToken(sparkParser.END, 0);
};
NonReservedContext.prototype.FUNCTION = function () {
    return this.getToken(sparkParser.FUNCTION, 0);
};
NonReservedContext.prototype.INTERVAL = function () {
    return this.getToken(sparkParser.INTERVAL, 0);
};
NonReservedContext.prototype.MACRO = function () {
    return this.getToken(sparkParser.MACRO, 0);
};
NonReservedContext.prototype.OR = function () {
    return this.getToken(sparkParser.OR, 0);
};
NonReservedContext.prototype.STRATIFY = function () {
    return this.getToken(sparkParser.STRATIFY, 0);
};
NonReservedContext.prototype.THEN = function () {
    return this.getToken(sparkParser.THEN, 0);
};
NonReservedContext.prototype.UNBOUNDED = function () {
    return this.getToken(sparkParser.UNBOUNDED, 0);
};
NonReservedContext.prototype.WHEN = function () {
    return this.getToken(sparkParser.WHEN, 0);
};
NonReservedContext.prototype.DATABASE = function () {
    return this.getToken(sparkParser.DATABASE, 0);
};
NonReservedContext.prototype.SELECT = function () {
    return this.getToken(sparkParser.SELECT, 0);
};
NonReservedContext.prototype.FROM = function () {
    return this.getToken(sparkParser.FROM, 0);
};
NonReservedContext.prototype.WHERE = function () {
    return this.getToken(sparkParser.WHERE, 0);
};
NonReservedContext.prototype.HAVING = function () {
    return this.getToken(sparkParser.HAVING, 0);
};
NonReservedContext.prototype.NOT = function () {
    return this.getToken(sparkParser.NOT, 0);
};
NonReservedContext.prototype.DIRECTORY = function () {
    return this.getToken(sparkParser.DIRECTORY, 0);
};
NonReservedContext.prototype.BOTH = function () {
    return this.getToken(sparkParser.BOTH, 0);
};
NonReservedContext.prototype.LEADING = function () {
    return this.getToken(sparkParser.LEADING, 0);
};
NonReservedContext.prototype.TRAILING = function () {
    return this.getToken(sparkParser.TRAILING, 0);
};
NonReservedContext.prototype.enterRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.enterNonReserved(this);
    }
};
NonReservedContext.prototype.exitRule = function (listener) {
    if (listener instanceof sparkListener) {
        listener.exitNonReserved(this);
    }
};
NonReservedContext.prototype.accept = function (visitor) {
    if (visitor instanceof sparkVisitor) {
        return visitor.visitNonReserved(this);
    }
    else {
        return visitor.visitChildren(this);
    }
};
sparkParser.NonReservedContext = NonReservedContext;
sparkParser.prototype.nonReserved = function () {
    var localctx = new NonReservedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, sparkParser.RULE_nonReserved);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2442;
        _la = this._input.LA(1);
        if (!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << sparkParser.SELECT) | (1 << sparkParser.FROM) | (1 << sparkParser.ADD) | (1 << sparkParser.AS) | (1 << sparkParser.ALL) | (1 << sparkParser.ANY) | (1 << sparkParser.DISTINCT) | (1 << sparkParser.WHERE) | (1 << sparkParser.GROUP) | (1 << sparkParser.BY) | (1 << sparkParser.GROUPING) | (1 << sparkParser.SETS) | (1 << sparkParser.CUBE) | (1 << sparkParser.ROLLUP) | (1 << sparkParser.ORDER) | (1 << sparkParser.HAVING) | (1 << sparkParser.LIMIT) | (1 << sparkParser.AT) | (1 << sparkParser.OR) | (1 << sparkParser.AND) | (1 << sparkParser.IN))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (sparkParser.NOT - 32)) | (1 << (sparkParser.NO - 32)) | (1 << (sparkParser.EXISTS - 32)) | (1 << (sparkParser.BETWEEN - 32)) | (1 << (sparkParser.LIKE - 32)) | (1 << (sparkParser.RLIKE - 32)) | (1 << (sparkParser.IS - 32)) | (1 << (sparkParser.NULL - 32)) | (1 << (sparkParser.TRUE - 32)) | (1 << (sparkParser.FALSE - 32)) | (1 << (sparkParser.NULLS - 32)) | (1 << (sparkParser.ASC - 32)) | (1 << (sparkParser.DESC - 32)) | (1 << (sparkParser.FOR - 32)) | (1 << (sparkParser.INTERVAL - 32)) | (1 << (sparkParser.CASE - 32)) | (1 << (sparkParser.WHEN - 32)) | (1 << (sparkParser.THEN - 32)) | (1 << (sparkParser.ELSE - 32)) | (1 << (sparkParser.END - 32)) | (1 << (sparkParser.OUTER - 32)) | (1 << (sparkParser.PIVOT - 32)) | (1 << (sparkParser.LATERAL - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (sparkParser.WINDOW - 64)) | (1 << (sparkParser.OVER - 64)) | (1 << (sparkParser.PARTITION - 64)) | (1 << (sparkParser.RANGE - 64)) | (1 << (sparkParser.ROWS - 64)) | (1 << (sparkParser.UNBOUNDED - 64)) | (1 << (sparkParser.PRECEDING - 64)) | (1 << (sparkParser.FOLLOWING - 64)) | (1 << (sparkParser.CURRENT - 64)) | (1 << (sparkParser.FIRST - 64)) | (1 << (sparkParser.AFTER - 64)) | (1 << (sparkParser.LAST - 64)) | (1 << (sparkParser.ROW - 64)) | (1 << (sparkParser.WITH - 64)) | (1 << (sparkParser.VALUES - 64)) | (1 << (sparkParser.CREATE - 64)) | (1 << (sparkParser.TABLE - 64)) | (1 << (sparkParser.DIRECTORY - 64)) | (1 << (sparkParser.VIEW - 64)) | (1 << (sparkParser.REPLACE - 64)) | (1 << (sparkParser.INSERT - 64)) | (1 << (sparkParser.DELETE - 64)) | (1 << (sparkParser.INTO - 64)) | (1 << (sparkParser.DESCRIBE - 64)) | (1 << (sparkParser.EXPLAIN - 64)) | (1 << (sparkParser.FORMAT - 64)) | (1 << (sparkParser.LOGICAL - 64)) | (1 << (sparkParser.CODEGEN - 64)) | (1 << (sparkParser.COST - 64)) | (1 << (sparkParser.CAST - 64)) | (1 << (sparkParser.SHOW - 64)) | (1 << (sparkParser.TABLES - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (sparkParser.COLUMNS - 96)) | (1 << (sparkParser.COLUMN - 96)) | (1 << (sparkParser.USE - 96)) | (1 << (sparkParser.PARTITIONS - 96)) | (1 << (sparkParser.FUNCTIONS - 96)) | (1 << (sparkParser.DROP - 96)) | (1 << (sparkParser.TO - 96)) | (1 << (sparkParser.TABLESAMPLE - 96)) | (1 << (sparkParser.STRATIFY - 96)) | (1 << (sparkParser.ALTER - 96)) | (1 << (sparkParser.RENAME - 96)) | (1 << (sparkParser.ARRAY - 96)) | (1 << (sparkParser.MAP - 96)) | (1 << (sparkParser.STRUCT - 96)) | (1 << (sparkParser.COMMENT - 96)) | (1 << (sparkParser.SET - 96)) | (1 << (sparkParser.RESET - 96)) | (1 << (sparkParser.DATA - 96)) | (1 << (sparkParser.START - 96)) | (1 << (sparkParser.TRANSACTION - 96)) | (1 << (sparkParser.COMMIT - 96)) | (1 << (sparkParser.ROLLBACK - 96)) | (1 << (sparkParser.MACRO - 96)) | (1 << (sparkParser.IGNORE - 96)) | (1 << (sparkParser.BOTH - 96)) | (1 << (sparkParser.LEADING - 96)) | (1 << (sparkParser.TRAILING - 96)) | (1 << (sparkParser.IF - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (sparkParser.POSITION - 128)) | (1 << (sparkParser.EXTRACT - 128)) | (1 << (sparkParser.DIV - 128)) | (1 << (sparkParser.PERCENTLIT - 128)) | (1 << (sparkParser.BUCKET - 128)) | (1 << (sparkParser.OUT - 128)) | (1 << (sparkParser.OF - 128)) | (1 << (sparkParser.SORT - 128)) | (1 << (sparkParser.CLUSTER - 128)) | (1 << (sparkParser.DISTRIBUTE - 128)) | (1 << (sparkParser.OVERWRITE - 128)) | (1 << (sparkParser.TRANSFORM - 128)) | (1 << (sparkParser.REDUCE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (sparkParser.SERDE - 160)) | (1 << (sparkParser.SERDEPROPERTIES - 160)) | (1 << (sparkParser.RECORDREADER - 160)) | (1 << (sparkParser.RECORDWRITER - 160)) | (1 << (sparkParser.DELIMITED - 160)) | (1 << (sparkParser.FIELDS - 160)) | (1 << (sparkParser.TERMINATED - 160)) | (1 << (sparkParser.COLLECTION - 160)) | (1 << (sparkParser.ITEMS - 160)) | (1 << (sparkParser.KEYS - 160)) | (1 << (sparkParser.ESCAPED - 160)) | (1 << (sparkParser.LINES - 160)) | (1 << (sparkParser.SEPARATED - 160)) | (1 << (sparkParser.FUNCTION - 160)) | (1 << (sparkParser.EXTENDED - 160)) | (1 << (sparkParser.REFRESH - 160)) | (1 << (sparkParser.CLEAR - 160)) | (1 << (sparkParser.CACHE - 160)) | (1 << (sparkParser.UNCACHE - 160)) | (1 << (sparkParser.LAZY - 160)) | (1 << (sparkParser.FORMATTED - 160)) | (1 << (sparkParser.GLOBAL - 160)) | (1 << (sparkParser.TEMPORARY - 160)) | (1 << (sparkParser.OPTIONS - 160)) | (1 << (sparkParser.UNSET - 160)) | (1 << (sparkParser.TBLPROPERTIES - 160)) | (1 << (sparkParser.DBPROPERTIES - 160)) | (1 << (sparkParser.BUCKETS - 160)) | (1 << (sparkParser.SKEWED - 160)) | (1 << (sparkParser.STORED - 160)) | (1 << (sparkParser.DIRECTORIES - 160)) | (1 << (sparkParser.LOCATION - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (sparkParser.EXCHANGE - 192)) | (1 << (sparkParser.ARCHIVE - 192)) | (1 << (sparkParser.UNARCHIVE - 192)) | (1 << (sparkParser.FILEFORMAT - 192)) | (1 << (sparkParser.TOUCH - 192)) | (1 << (sparkParser.COMPACT - 192)) | (1 << (sparkParser.CONCATENATE - 192)) | (1 << (sparkParser.CHANGE - 192)) | (1 << (sparkParser.CASCADE - 192)) | (1 << (sparkParser.RESTRICT - 192)) | (1 << (sparkParser.CLUSTERED - 192)) | (1 << (sparkParser.SORTED - 192)) | (1 << (sparkParser.PURGE - 192)) | (1 << (sparkParser.INPUTFORMAT - 192)) | (1 << (sparkParser.OUTPUTFORMAT - 192)) | (1 << (sparkParser.DATABASE - 192)) | (1 << (sparkParser.DATABASES - 192)) | (1 << (sparkParser.DFS - 192)) | (1 << (sparkParser.TRUNCATE - 192)) | (1 << (sparkParser.ANALYZE - 192)) | (1 << (sparkParser.COMPUTE - 192)) | (1 << (sparkParser.LIST - 192)) | (1 << (sparkParser.STATISTICS - 192)) | (1 << (sparkParser.PARTITIONED - 192)) | (1 << (sparkParser.EXTERNAL - 192)) | (1 << (sparkParser.DEFINED - 192)) | (1 << (sparkParser.REVOKE - 192)) | (1 << (sparkParser.GRANT - 192)) | (1 << (sparkParser.LOCK - 192)) | (1 << (sparkParser.UNLOCK - 192)) | (1 << (sparkParser.MSCK - 192)) | (1 << (sparkParser.REPAIR - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (sparkParser.RECOVER - 224)) | (1 << (sparkParser.EXPORT - 224)) | (1 << (sparkParser.IMPORT - 224)) | (1 << (sparkParser.LOAD - 224)) | (1 << (sparkParser.ROLE - 224)) | (1 << (sparkParser.ROLES - 224)) | (1 << (sparkParser.COMPACTIONS - 224)) | (1 << (sparkParser.PRINCIPALS - 224)) | (1 << (sparkParser.TRANSACTIONS - 224)) | (1 << (sparkParser.INDEX - 224)) | (1 << (sparkParser.INDEXES - 224)) | (1 << (sparkParser.LOCKS - 224)) | (1 << (sparkParser.OPTION - 224)) | (1 << (sparkParser.LOCAL - 224)) | (1 << (sparkParser.INPATH - 224)))) !== 0))) {
            this._errHandler.recoverInline(this);
        }
        else {
            this._errHandler.reportMatch(this);
            this.consume();
        }
    }
    catch (re) {
        if (re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        }
        else {
            throw re;
        }
    }
    finally {
        this.exitRule();
    }
    return localctx;
};
sparkParser.prototype.sempred = function (localctx, ruleIndex, predIndex) {
    switch (ruleIndex) {
        case 35:
            return this.queryTerm_sempred(localctx, predIndex);
        case 71:
            return this.booleanExpression_sempred(localctx, predIndex);
        case 73:
            return this.valueExpression_sempred(localctx, predIndex);
        case 74:
            return this.primaryExpression_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
    }
};
sparkParser.prototype.queryTerm_sempred = function (localctx, predIndex) {
    switch (predIndex) {
        case 0:
            return this.precpred(this._ctx, 3);
        case 1:
            return this.legacy_setops_precedence_enbled;
        case 2:
            return this.precpred(this._ctx, 2);
        case 3:
            return !this.legacy_setops_precedence_enbled;
        case 4:
            return this.precpred(this._ctx, 1);
        case 5:
            return !this.legacy_setops_precedence_enbled;
        default:
            throw "No predicate with index:" + predIndex;
    }
};
sparkParser.prototype.booleanExpression_sempred = function (localctx, predIndex) {
    switch (predIndex) {
        case 6:
            return this.precpred(this._ctx, 2);
        case 7:
            return this.precpred(this._ctx, 1);
        default:
            throw "No predicate with index:" + predIndex;
    }
};
sparkParser.prototype.valueExpression_sempred = function (localctx, predIndex) {
    switch (predIndex) {
        case 8:
            return this.precpred(this._ctx, 6);
        case 9:
            return this.precpred(this._ctx, 5);
        case 10:
            return this.precpred(this._ctx, 4);
        case 11:
            return this.precpred(this._ctx, 3);
        case 12:
            return this.precpred(this._ctx, 2);
        case 13:
            return this.precpred(this._ctx, 1);
        default:
            throw "No predicate with index:" + predIndex;
    }
};
sparkParser.prototype.primaryExpression_sempred = function (localctx, predIndex) {
    switch (predIndex) {
        case 14:
            return this.precpred(this._ctx, 5);
        case 15:
            return this.precpred(this._ctx, 3);
        default:
            throw "No predicate with index:" + predIndex;
    }
};
exports.sparkParser = sparkParser;
